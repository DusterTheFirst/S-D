{"version":3,"sources":["state.ts","card/cardGroup.ts","styles/app.ts","util/file.ts","util/image.ts","styles/renderedCard.ts","util/string.ts","card/rendered/useEmbeddedFont.ts","card/rendered/CardBack.tsx","util/wordWrap.ts","card/rendered/CardFront.tsx","card/rendered/cardOrdering.ts","card/rendered/RenderedCards.tsx","styles/editor/index.ts","editor/AutoResizeTextArea.tsx","styles/editor/group.ts","editor/GroupSettings.tsx","editor/CardSettings.tsx","editor/Editor.tsx","styles/contextMenu.ts","explorer/ContextMenu.tsx","styles/modal.ts","explorer/DeleteModal.tsx","styles/explorer/index.ts","styles/explorer/cardGroup.ts","styles/explorer/card.ts","explorer/CardComponent.tsx","explorer/CardGroupComponent.tsx","explorer/Explorer.tsx","util/useIsTop.ts","registerServiceWorker.ts","RenderingModal.tsx","styles/global.ts","UpdateModal.tsx","App.tsx","index.tsx"],"names":["SelectionType","CardGroup","persist","name","defaults","cards","this","_cards","card","length","push","oldpos","newpos","splice","map","i","key","value","Object","entries","filter","undefined","reduce","pre","k","v","data","observable","action","GlobalState","_selection","group","type","None","Group","Card","selection","_groups","x","GlobalStateContext","createContext","AppContainer","styled","div","CardContainer","textFileReaderAsync","file","a","Promise","resolve","reject","reader","FileReader","readAsText","onload","_","result","toString","Error","onerror","dataFileReaderAsync","readAsDataURL","downloadSelection","filename","saveAs","Blob","JSON","stringify","loadSelection","state","addGroup","fromData","id","select","groups","addCard","alert","createImageAsync","src","image","Image","canvasToBlobAsync","canvas","toBlob","RenderedCard","svg","attrs","fontFamily","height","version","viewBox","width","xmlns","CardText","text","props","fontSize","textAnchor","CardTextInverted","ExpandedText","bulletLists","replace","hashCode","s","hash","charCodeAt","useEmbeddedFont","useState","fonts","setFonts","useEffect","all","fetch","then","blob","catch","e","console","error","ModestoRegular","ModestoExpd","OpenSansRegular","OpenSansSemiBold","CardBackDyn","useContext","IsRenderingContext","isRendering","rendered","BackRenderedCallbackContext","useLayoutEffect","current","useObserver","useMemo","color","fill","y","rx","ry","stroke","strokeWidth","points","level","href","CardImagePreloader","preloadedImages","Map","g","c","has","set","Array","from","values","CardBack","forwardRef","ref","wordWrapSVG","outputElement","split","initialOffset","words","elems","tspanElement","document","createElementNS","textNode","createTextNode","setAttribute","baseVal","valueAsString","attributes","getNamedItem","appendChild","some","textContent","parseFloat","firstChild","len","getComputedTextLength","slice","wordWrapOneLineSVG","b","CardFront","FrontRenderedCallbackContext","physComponentsRef","useRef","physComponentsBackgroundRef","descriptionRef","extDescriptionRef","extDescriptionTitleRef","currHeight","physComp","physCompBkg","desc","extDesc","extDescTitle","physicalComponents","removeAttribute","description","extDescription","innerHTML","durationConc","duration","toLowerCase","match","durationCap","charAt","toUpperCase","cardLevel","parseInt","cardType","isNaN","j","ordinalSuffixOf","x1","y1","x2","y2","castingTime","range","components","display","dominantBaseline","letterSpacing","clazz","doubleSideOrdering","front","back","cardXIdx","cardYIdx","Math","floor","cardY","cardX","absolutePosition","CARD_TILE_WIDTH","pageBreak","done","fronts","backs","foldableOrdering","CARD_TILE_HEIGHT","PRINT_CARD_WIDTH","RenderedCards","frontRef","backRef","frontRenderedCallback","backRenderedCallback","setIsRendering","expd","regular","sans","sansSemi","pdfMake","vfs","substring","lastIndexOf","normal","selectAsync","useCallback","args","race","setTimeout","getCurrentSelectedSVGs","ReferenceError","outerHTML","renderCurrentSelection","zip","JSZip","createElement","context","getContext","svgFront","svgBack","encodeURIComponent","imageFront","imageBack","drawImage","RASTER_WIDTH","RASTER_HEIGHT","remove","print","ordering","preselect","svgs","currentSvgs","createPdf","content","pageMargins","pageSize","setSelection","useImperativeHandle","printDoubleSided","printFoldable","render","cardCount","cardCountWidth","folder","padStart","generateAsync","groupCount","groupCountWidth","groupFolder","Provider","EditorContainer","EditorValues","EditorEmpty","EditorCenter","EditorTitle","EditorLabel","label","hidden","EditorInput","input","EditorTextArea","textarea","EditorImage","img","AutoResizeTextArea","memo","resize","style","scrollHeight","window","addEventListener","removeEventListener","onKeyUp","GroupSettingsContainer","GroupSettings","onChange","event","editName","currentTarget","CardSettings","imageRef","cardSettings","rawCards","placeholders","cardValueUpdater","editCard","editDefaults","clear","param","fileInput","files","placeholder","min","max","onClick","disabled","alt","accept","Editor","ContextMenuStyles","createGlobalStyle","DangerItem","Item","BetterMenuProvider","children","onContextMenu","preventDefault","stopPropagation","contextMenu","hideAll","show","ExplorerContextMenus","setDeleteSelection","renderedCards","RenderedCardsContext","downloadClick","toJS","groupsData","addClick","deleteClick","duplicateClick","upClick","moveGroup","moveCard","downClick","upDisable","downDisable","renderClick","printDoubleSidedClick","printFoldableClick","ModalStyles","background","border","left","maxHeight","maxWidth","minHeight","minWidth","position","top","transform","overlay","ModalContainer","ModalDialog","ModalEmph","span","ModalDesc","ModalDangerEmph","ModalButtons","ModalButton","button","ModalDangerButton","ModalSuggestedButton","DeleteModal","deleteSelection","confirmationMessage","isOpen","removeGroup","removeCard","warn","ExplorerContainer","ExplorerHeader","isTop","ExplorerSearch","ExporerSearchInput","short","ExplorerSearchX","ExplorerAddButton","ExplorerGroups","dragOver","ExplorerHighlight","CardGroupTitle","selected","CardGroupCaret","CardGroupName","CardTitle","cardFilter","includes","CardComponent","groupid","search","highlightMatches","CardGroupComponent","collapsed","setCollapsed","toggleCollapse","icon","faCaretRight","faCaretDown","RegExp","part","Explorer","setSearch","isDragOver","setDragOver","setTop","scrollTop","useIsTop","onScroll","onDrop","dataTransfer","items","endsWith","contents","parse","onDragEnter","onDragExit","onDragOver","target","faTimes","idx","faPlus","isLocalhost","Boolean","location","hostname","register","setUpdateAvaliable","navigator","URL","process","origin","swUrl","response","status","headers","get","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","RenderingModal","GlobalStyles","UpdateModal","doUpdate","callDoUpdate","update","App","cardsRef","updateAvaliable","create","jsonify","storage","localStorage","hydrate","oncontextmenu","ReactModal","setAppElement","ReactDOM","getElementById"],"mappings":";8JAUYA,E,yLCYSC,G,EAKJC,kBAAQ,U,EAGRA,kBAAQ,Q,aAGrB,aAAgF,IAApEC,EAAmE,uDAA5D,GAAIC,EAAwD,uDAAzB,GAAIC,EAAqB,uDAAJ,GAAI,0HAC3EC,KAAKH,KAAOA,EACZG,KAAKC,OAASF,EACdC,KAAKF,SAAWA,E,sCASpB,WACI,MAAO,CACHC,MAAOC,KAAKC,OACZH,SAAUE,KAAKF,SACfD,KAAMG,KAAKH,Q,qBAKnB,WAC0E,IAA3DK,EAA0D,uDAA5C,CAAEL,KAAK,YAAD,OAAcG,KAAKC,OAAOE,SACzD,OAAOH,KAAKC,OAAOG,KAAKF,GAAQ,I,sBAIpC,SACgBG,EAAgBC,GAAuB,IAAD,EACnCN,KAAKC,OAAOM,OAAOF,EAAQ,GAAnCH,EAD2C,oBAIlD,OAFAF,KAAKC,OAAOM,OAAOD,EAAQ,EAAGJ,GAEvBF,O,iBAIX,WAA6B,IAAD,OACxB,OAAOA,KAAKC,OAAOO,KAAI,SAAAN,GAAI,kCAAU,EAAKJ,UAAaI,Q,oBAI3D,WACI,OAAOF,KAAKC,S,wBAIhB,SACkBQ,GACd,OAAOT,KAAKC,OAAOM,OAAOE,EAAG,GAAG,K,sBAIpC,SACuCP,EAAcQ,EAAQC,GACzDX,KAAKC,OAAOC,GAAQU,OAAOC,QAAPD,OAAA,IAAAA,QAAA,IAAAA,CAAA,GAAoBZ,KAAKC,OAAOC,IAAhC,GAAAU,OAAA,IAAAA,CAAA,GAAwCF,EAAMC,KAE7DG,QAAO,wBAAiBC,IAAjB,uBACPC,QAAc,SAACC,EAAD,0BAAOC,EAAP,KAAUC,EAAV,wBAAC,eAAsBF,GAAvB,kBAA6BC,EAAIC,MAAM,M,0BAI9D,SAC2CT,EAAQC,GAC/CX,KAAKF,SAAWc,OAAOC,QAAPD,OAAA,IAAAA,QAAA,IAAAA,CAAA,GAAoBZ,KAAKF,UAAzB,GAAAc,OAAA,IAAAA,CAAA,GAAoCF,EAAMC,KAErDG,QAAO,wBAAiBC,IAAjB,uBACPC,QAAuB,SAACC,EAAD,0BAAOC,EAAP,KAAUC,EAAV,wBAAC,eAAsBF,GAAvB,kBAA6BC,EAAIC,MAAM,M,sBAIvE,SACgBtB,GACZG,KAAKH,KAAOA,K,uBAjEhB,SAAuBuB,GACnB,OAAO,IAAIzB,EAAUyB,EAAKvB,KAAMuB,EAAKtB,SAAUsB,EAAKrB,W,uCAjBvDsB,aAAYzB,W,oGAGZyB,a,qGAGAA,a,oGAwBAC,U,wGAMAA,U,2GAmBAA,U,2GAMAA,U,6GASAA,U,6GASAA,U,kFD7FO5B,K,YAAAA,E,cAAAA,E,aAAAA,M,KAyBL,I,IAAM6B,GAAb,EAEiB3B,kBAAQ,UAFzB,EAKiBA,kBAAQ,OAAQD,GALjC,kKASI,WACI,OAAOK,KAAKwB,aAVpB,oBAcI,SACcC,EAAgBvB,GAEtBF,KAAKwB,gBADKT,IAAVU,EACkB,CAAEC,KAAMhC,EAAciC,WACxBZ,IAATb,EACW,CACduB,QACAC,KAAMhC,EAAckC,OAGN,CACd1B,OACAuB,QACAC,KAAMhC,EAAcmC,QA3BpC,0BAiCI,SACoBC,GAChB9B,KAAKwB,WAAaM,IAnC1B,sBAuCI,SACgBL,GACZ,OAAOzB,KAAK+B,QAAQ3B,KAAKqB,GAAS,IAzC1C,yBA6CI,SACmBA,GACf,OAAOzB,KAAK+B,QAAQxB,OAAOkB,EAAO,GAAG,KA/C7C,kBAmDI,WACI,OAAOzB,KAAK+B,UApDpB,sBAwDI,WACI,OAAO/B,KAAK+B,QAAQvB,KAAI,SAAAwB,GAAC,OAAIA,EAAEZ,UAzDvC,uBA6DI,SACiBf,EAAgBC,GAAiB,IAAD,EAC7BN,KAAK+B,QAAQxB,OAAOF,EAAQ,GAArCoB,EADsC,oBAE7CzB,KAAK+B,QAAQxB,OAAOD,EAAQ,EAAGmB,OAhEvC,6CAEKJ,aAFL,2EAGoC,CAAEK,KAAMhC,EAAciC,SAH1D,qCAKKN,aALL,2EAM4C,MAN5C,kCAcKC,UAdL,2GAiCKA,UAjCL,6GAuCKA,UAvCL,4GA6CKA,UA7CL,6GA6DKA,UA7DL,yEAqEaW,EAAqBC,wBAAc,IAAIX,G,cEjGvCY,EAAeC,IAAOC,IAAV,yUAqBZC,EAAgBF,IAAOC,IAAV,+H,gBClBnB,SAAeE,EAAtB,kC,4CAAO,WAAmCC,GAAnC,SAAAC,EAAA,+EACI,IAAIC,SAAgB,SAACC,EAASC,GACjC,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,WAAWP,GAClBK,EAAOG,OAAS,SAACC,GACS,OAAlBJ,EAAOK,OACPP,EAAQE,EAAOK,OAAOC,YAEtBP,EAAO,IAAIQ,MAAM,eAGzBP,EAAOQ,QAAUT,MAXlB,4C,sBAgBA,SAAeU,EAAtB,kC,4CAAO,WAAmCd,GAAnC,SAAAC,EAAA,+EACI,IAAIC,SAAgB,SAACC,EAASC,GACjC,IAAMC,EAAS,IAAIC,WACnBD,EAAOU,cAAcf,GACrBK,EAAOG,OAAS,SAACC,GACS,OAAlBJ,EAAOK,OACPP,EAAQE,EAAOK,OAAOC,YAEtBP,EAAO,IAAIQ,MAAM,eAGzBP,EAAOQ,QAAUT,MAXlB,4C,sBAkCA,SAASY,EAAkBhB,EAAyBiB,GACvDC,iBAAO,IAAIC,KAAK,CAACC,KAAKC,UAAUrB,IAAQ,CAAEd,KAAM,qBAAuB+B,GAIpE,SAASK,EAActB,EAAyBuB,GACnD,GAAIvB,EAAKd,OAAShC,EAAciC,KAAM,CAAC,IAAD,gBACda,EAAKpB,MADS,IAClC,2BAA+B,CAAC,IAArBK,EAAoB,QAC3BsC,EAAMC,SAASrE,EAAUsE,SAASxC,KAFJ,oCAI/B,GAAIe,EAAKd,OAAShC,EAAckC,MAAO,CAC1C,IAAMsC,EAAKH,EAAMC,SAASrE,EAAUsE,SAASzB,EAAKpB,OAClD2C,EAAMI,OAAOD,QAEb,GAAIH,EAAMjC,UAAUJ,OAAShC,EAAcmC,MAAQkC,EAAMjC,UAAUJ,OAAShC,EAAckC,MAAO,CAC7F,IAAMsC,EAAKH,EAAMK,OAAOL,EAAMjC,UAAUL,OAAO4C,QAAQ7B,EAAKpB,MAC5D2C,EAAMI,OAAOJ,EAAMjC,UAAUL,MAAOyC,QAEpCI,MAAM,qDCzEX,SAAeC,GAAtB,mC,8CAAO,WAAgCC,GAAhC,SAAA/B,EAAA,+EACI,IAAIC,SAAQ,SAACC,EAASC,GACzB,IAAM6B,EAAQ,IAAIC,MAClBD,EAAMD,IAAMA,EACZC,EAAMzB,OAAS,kBAAML,EAAQ8B,IAC7BA,EAAMpB,QAAUT,MALjB,4C,sBAUA,SAAe+B,GAAtB,mC,8CAAO,WAAiCC,GAAjC,SAAAnC,EAAA,+EACI,IAAIC,SAAQ,SAACC,EAASC,GACzBgC,EAAOC,QAAO,SAAC1D,GAAD,OAAa,OAANA,EAAayB,IAAWD,EAAQxB,KAAI,iBAF1D,4C,8CCRM2D,GAAe1C,IAAO2C,IAAIC,MAAM,CACzCC,WAAY,kBACZC,OAAQ,IACRC,QAAS,MACTC,QAAS,YACTC,MAAO,IACPC,MAAO,8BANiBlD,CAAH,2GAeZmD,GAAWnD,IAAOoD,KAAKR,OAAM,SAAAS,GAAK,gBAAK,CAChDR,WAAU,UAAEQ,EAAMR,kBAAR,QAAsB,YAChCS,SAAQ,UAAED,EAAMC,gBAAR,QAAoB,EAC5BC,WAAU,UAAEF,EAAME,kBAAR,QAAsB,YAHZvD,CAAH,4BAORwD,GAAmBxD,YAAOmD,IAAUP,MAAM,CACnDC,WAAY,sBADgB7C,CAAH,4BAKhByD,GAAezD,YAAOmD,IAAUP,MAAM,CAC/CC,WAAY,gBADY7C,CAAH,4BCZlB,SAAS0D,GAAYN,GACxB,OAAOA,EAAKO,QAAQ,kBAAmB,UAIpC,SAASC,GAASC,GAGrB,IAFA,IAAIC,EAAO,EAEFzF,EAAI,EAAGA,EAAIwF,EAAE9F,OAAQM,IAE1ByF,GAASA,GAAQ,GAAKA,EADhBD,EAAEE,WAAW1F,GAEnByF,GAAQ,EAGZ,OAAOA,EC5BI,SAASE,KAAmB,IAAD,EACZC,qBADY,mBAC/BC,EAD+B,KACxBC,EADwB,KAqBtC,GAlBAC,qBAAU,WACN9D,QAAQ+D,IAAI,CACRC,MAAM,2BACDC,MAAK,SAAA3E,GAAC,OAAIA,EAAE4E,UACZD,KAAKrD,GACVoD,MAAM,8BACDC,MAAK,SAAA3E,GAAC,OAAIA,EAAE4E,UACZD,KAAKrD,GACVoD,MAAM,+BACDC,MAAK,SAAA3E,GAAC,OAAIA,EAAE4E,UACZD,KAAKrD,GACVoD,MAAM,gCACDC,MAAK,SAAA3E,GAAC,OAAIA,EAAE4E,UACZD,KAAKrD,KACXqD,KAAKJ,GACHM,OAAM,SAAAC,GAAC,OAAIC,QAAQC,MAAMF,QAC/B,SAEW/F,IAAVuF,EACA,OAAO,KAtB2B,kBAyBmCA,EAzBnC,GAyB/BW,EAzB+B,KAyBfC,EAzBe,KAyBFC,EAzBE,KAyBeC,EAzBf,KA2BtC,MAAM,2FAAN,OAGoBH,EAHpB,sHAQoBC,EARpB,gHAaoBC,EAbpB,yHAkBoBC,EAlBpB,wBCrBJ,SAASC,KACL,IAAMtD,EAAQuD,qBAAWrF,GADN,EAEGqF,qBAAWC,IAA1BC,EAFY,oBAIbC,EAAWH,qBAAWI,IAE5BC,0BAAgBF,EAASG,SAEzB,IAAM1H,EAAO2H,cAAY,kBACrB9D,EAAMjC,UAAUJ,OAAShC,EAAcmC,KACjCkC,EAAMK,OAAOL,EAAMjC,UAAUL,OAAO1B,MAAMgE,EAAMjC,UAAU5B,MAC1D6D,EAAMjC,UAAUJ,OAAShC,EAAckC,MACnCmC,EAAMK,OAAOL,EAAMjC,UAAUL,OAAO3B,SACpC,CAAED,KAAM,mBAEhBqG,EAAO4B,mBAAQ,wBAAM9B,GAAQ,UAAC9F,EAAKuE,aAAN,QAAe,MAAK,CAACvE,EAAKuE,QAE7D,OAAOoD,cAAY,WAAO,IAAD,EACfE,EAAK,UAAG7H,EAAK6H,aAAR,QAAiB,UAE5B,OACI,oCAEI,0BAAM1C,MAAM,KAAKH,OAAO,KAAK8C,KAAMD,IAGnC,0BAAM1C,MAAM,KAAKH,OAAO,KAAKlD,EAAE,IAAIiG,EAAE,IAAIC,GAAG,IAAIC,GAAG,IAAIH,KAAK,UAG5D,0BAAM3C,MAAM,KAAKH,OAAO,KAAKlD,EAAE,IAAIiG,EAAE,IAAIC,GAAG,IAAIC,GAAG,IAAIC,OAAQL,EAAOM,YAAY,MAAML,KAAK,gBAG7F,8BAAUM,OAAO,4CAA4CN,KAAK,cAAcI,OAAQL,EAAOM,YAAY,OAG3G,0BAAM3C,SAAS,KAAKsC,KAAMD,EAAO/F,EAAE,KAAKiG,EAAE,KAAKtC,WAAW,UAAUzF,EAAKqI,OAEzE,0BAAM7C,SAAS,KAAKsC,KAAMD,EAAO/F,EAAE,KAAKiG,EAAE,KAAKtC,WAAW,UAAUzF,EAAKqI,OAGxEf,EAAc,2BAAOgB,KAAMtI,EAAKuE,MAAOY,MAAM,KAAKH,OAAO,KAAKlD,EAAE,OAAOiG,EAAE,SAAY,yBAAKO,KAAI,WAAMtC,SAOrH,SAASuC,KACL,IAAM1E,EAAQuD,qBAAWrF,GAEzB,OAAO4F,cAAY,WACf,IADqB,EACfa,EAAkB,IAAIC,IADP,cAGL5E,EAAMK,QAHD,IAGrB,2BAA8B,CAAC,IAAD,EAAnBwE,EAAmB,sBACVA,EAAE7I,OADQ,IAC1B,2BAAyB,CAAC,IAAf8I,EAAc,QACrB,QAAgB9H,IAAZ8H,EAAEpE,MAAqB,CACvB,IAAMyB,EAAOF,GAAS6C,EAAEpE,OACnBiE,EAAgBI,IAAI5C,IACrBwC,EAAgBK,IAAI7C,EAAM,2BAAOxF,IAAKwF,EAAMhC,GAAIgC,EAAK/C,WAAYqF,KAAMK,EAAEpE,MAAOY,MAAM,KAAKH,OAAO,KAAKlD,EAAE,OAAOiG,EAAE,YALpG,gCAHT,8BAcrB,OAAO,oCAAGe,MAAMC,KAAKP,EAAgBQ,cAK7C,IAiBeC,GAjBEC,sBAA0B,SAACnG,EAAGoG,GAAS,IAAD,EAC7B/B,qBAAWC,IAA1BC,EAD4C,oBAG7ClB,EAAQF,KAEd,OACI,kBAACtB,GAAD,CAAcuE,IAAKA,GACf,8BACK7B,EAAc,KAAO,kBAACiB,GAAD,MACtB,+BAAQnC,IAGZ,kBAACe,GAAD,UC1FL,SAASiC,GAAY9D,EAAcH,EAAekE,GACrD,OAAO/D,EAAKO,QAAQ,KAAM,IAAIyD,MAAM,MAAMhJ,KAAI,SAACwB,EAAGvB,GAAJ,OAIlD,SAA4B+E,EAAcH,EAAekE,GAAuD,IAAD,IAAvBE,EAAuB,wDACrGC,EAAQlE,EAAKgE,MAAM,KACrBG,EAAQ,EAERC,EAAeC,SAASC,gBAAgB,6BAA8B,SACtEC,EAAWF,SAASG,eAAeN,EAAM,IAE7C,GAAID,EAAe,CAAC,IAAD,IACfG,EAAaK,aAAa,IAAKV,EAAcvH,EAAEkI,QAAQ,GAAGC,eAC1DP,EAAaK,aAAa,KAA1B,oBAAgCV,EAAca,WAAWC,aAAa,oBAAtE,aAAgC,EAAoD1J,aAApF,QAA6F,IAE7FgJ,IAMJ,GAHAC,EAAaU,YAAYP,GACzBR,EAAce,YAAYV,IAErBF,EAAMa,MAAK,SAAAvI,GAAC,OAAIA,EAAE7B,OAAS,KAAI,CAAC,IAAD,IAGhC,OAFAyJ,EAAaY,YAAc,IAEpBC,WAAU,oBAAClB,EAAca,WAAWC,aAAa,oBAAvC,aAAC,EAAoD1J,aAArD,QAA8D,KAGnF,IAAK,IAAIF,EAAI,EAAGA,EAAIiJ,EAAMvJ,OAAQM,IAAK,CAAC,IAAD,IACmD,IAAtF,GAAgC,OAA5BmJ,EAAac,YAA+D,OAAxCd,EAAac,WAAWF,YAG5D,OAFAzD,QAAQC,MAAM,mCAAoC4C,GAE3CD,EAAQc,WAAU,oBAAClB,EAAca,WAAWC,aAAa,oBAAvC,aAAC,EAAoD1J,aAArD,QAA8D,KAG3F,IAGkD,IAH5CgK,EAAG,UAAGf,EAAac,kBAAhB,iBAAG,EAAyBF,mBAA5B,aAAG,EAAsCrK,OAGlD,GAFAyJ,EAAac,WAAWF,aAAxB,WAA2Cd,EAAMjJ,IAE7CmJ,EAAagB,wBAA0BvF,EACvCuE,EAAac,WAAWF,YAAcZ,EAAac,WAAWF,YAAYK,MAAM,EAAGF,IAEnFf,EAAeC,SAASC,gBAAgB,6BAA8B,UACzDG,aAAa,IAAKV,EAAcvH,EAAEkI,QAAQ,GAAGC,eAC1DP,EAAaK,aAAa,KAA1B,oBAAgCV,EAAca,WAAWC,aAAa,oBAAtE,aAAgC,EAAoD1J,aAApF,QAA6F,IAC7FoJ,EAAWF,SAASG,eAAeN,EAAMjJ,IAEzCmJ,EAAaU,YAAYP,GACzBR,EAAce,YAAYV,GAE1BD,IAIR,OAAOA,EAAQc,WAAU,oBAAClB,EAAca,WAAWC,aAAa,oBAAvC,aAAC,EAAoD1J,aAArD,QAA8D,KApD/BmK,CAAmB9I,EAAGqD,EAAOkE,EAAqB,IAAN9I,MAAUO,QAAO,SAACyB,EAAGsI,GAAJ,OAAUtI,EAAIsI,KCQvI,IAuKeC,GAvKG5B,sBAA0B,SAACnG,EAAGoG,GAC5C,IAAMtF,EAAQuD,qBAAWrF,GAEnBwF,EAAWH,qBAAW2D,IAGtBC,EAAoBC,iBAAuB,MAC3CC,EAA8BD,iBAAuB,MACrDE,EAAiBF,iBAAuB,MACxCG,EAAoBH,iBAAuB,MAC3CI,EAAyBJ,iBAAoB,MAG7CjL,EAAO2H,cAAY,kBACrB9D,EAAMjC,UAAUJ,OAAShC,EAAcmC,KACjCkC,EAAMK,OAAOL,EAAMjC,UAAUL,OAAO1B,MAAMgE,EAAMjC,UAAU5B,MAC1D6D,EAAMjC,UAAUJ,OAAShC,EAAckC,MAAvC,aACM/B,KAAMkE,EAAMK,OAAOL,EAAMjC,UAAUL,OAAO5B,MAASkE,EAAMK,OAAOL,EAAMjC,UAAUL,OAAO3B,UACzF,CAAED,KAAM,mBAGhByG,EAAQF,KAwEd,OArEAI,qBAAU,WACN,GAAc,OAAVF,EAAJ,CAIA,IAAIkF,EAAa,EAGXC,EAAWP,EAAkBtD,QAC7B8D,EAAcN,EAA4BxD,QAC1C+D,EAAON,EAAezD,QACtBgE,EAAUN,EAAkB1D,QAC5BiE,EAAeN,EAAuB3D,QAE5C,GAAoB,OAAhB8D,EACA,QAAgC3K,IAA5Bb,EAAK4L,oBAAiD,OAAbL,EAAmB,CAC5D,IAAMvG,EAASoE,GAAYxD,GAAY5F,EAAK4L,oBAAqB,GAAIL,GAErEC,EAAYzB,aAAa,UAAW/E,EAAS,GAAG/B,YAChDuI,EAAYK,gBAAgB,WAE5BP,GAActG,EAAS,SAEvBwG,EAAYzB,aAAa,UAAW,QAI5C,QAAyBlJ,IAArBb,EAAK8L,aAAsC,OAATL,EAClCA,EAAK1B,aAAa,KAAMuB,EAAWrI,YAGnCqI,GAFelC,GAAYxD,GAAY5F,EAAK8L,aAAc,GAAIL,GAKlE,GAAqB,OAAjBE,EACA,QAA4B9K,IAAxBb,EAAK+L,gBAA4C,OAAZL,EAAkB,CACvD,IAAM1G,EAASoE,GAAYxD,GAAY5F,EAAK+L,gBAAiB,GAAIL,GACjEA,EAAQ3B,aAAa,KAAM,GAAK/E,GAAQ/B,YACxC0I,EAAa5B,aAAa,YAA1B,uBAAwD,GAAK/E,EAA7D,MACA2G,EAAaE,gBAAgB,gBAE7BF,EAAa5B,aAAa,UAAW,QAM7C,OAFAxC,EAASG,UAEF,WACc,OAAb6D,IACAA,EAASS,UAAY,IAEZ,OAATP,IACAA,EAAKO,UAAY,IAEL,OAAZN,IACAA,EAAQM,UAAY,QAG7B,CACChM,EACAuH,EACA4D,EACAC,EACAC,EACAH,EACAF,EACA5E,IAGGuB,cAAY,WAAO,IAAD,QACfsE,OAAiCpL,IAAlBb,EAAKkM,UAAuF,OAA7DlM,EAAKkM,SAASC,cAAcC,MAAM,uBAChFF,EAAWD,EAAY,UAAGjM,EAAKkM,gBAAR,aAAG,EAAerG,QAAQ,uBAAwB,IAAM7F,EAAKkM,SACpFG,EAAW,2BAAMH,QAAN,IAAMA,OAAN,EAAMA,EAAUI,OAAO,GAAGC,qBAA1B,QAA2C,IAA3C,wBAAgDL,QAAhD,IAAgDA,OAAhD,EAAgDA,EAAUvB,MAAM,UAAhE,QAAsE,IAEjF6B,EAAYC,cAAwB5L,IAAfb,EAAKqI,MAAsBrI,EAAKqI,MAAQ,IAAK,IAClEqE,EAAYC,MAAMH,QAA6G3L,EAAlF,IAAd2L,EAAA,UAAqBxM,EAAKwB,KAA1B,sBJ5GtC,SAAyBjB,GAC5B,IAAMqM,EAAIrM,EAAI,GACRS,EAAIT,EAAI,IACd,MACU,GAAN,OAAUA,EADJ,IAANqM,GAAiB,KAAN5L,EACX,KAEM,IAAN4L,GAAiB,KAAN5L,EACX,KAEM,IAAN4L,GAAiB,KAAN5L,EACX,KAEA,MIgGmF6L,CAAgBL,GAA9D,kBAAkFxM,EAAKwB,MAEtHqG,EAAK,UAAG7H,EAAK6H,aAAR,QAAiB,UAE5B,OACI,kBAACjD,GAAD,CAAcuE,IAAKA,GACf,8BACI,+BAAQ/C,IAGZ,0BAAMjB,MAAM,KAAKH,OAAO,KAAK8C,KAAMD,IAEnC,0BAAM1C,MAAM,KAAKH,OAAO,KAAKlD,EAAE,IAAIiG,EAAE,IAAIC,GAAG,IAAIC,GAAG,IAAIH,KAAK,UAG5D,0BAAMgF,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAAKC,GAAG,IAAI/E,OAAQL,EAAOM,YAAY,OAC9D,0BAAM2E,GAAG,IAAIC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAK/E,OAAQL,EAAOM,YAAY,OAChE,0BAAM2E,GAAG,IAAIC,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAK/E,OAAQL,EAAOM,YAAY,OAChE,0BAAM2E,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,KAAK/E,OAAQL,EAAOM,YAAY,OAGhE,kBAACxC,GAAD,CAAcmC,KAAMD,EAAOrC,SAAS,IAAI1D,EAAE,KAAKiG,EAAE,QAAQ/H,EAAKL,MAG9D,kBAACgG,GAAD,CAAcmC,KAAMD,EAAO/F,EAAE,OAAOiG,EAAE,MAAtC,gBACA,kBAAC1C,GAAD,CAAUvD,EAAE,OAAOiG,EAAE,QAAQ/H,EAAKkN,aAGlC,kBAACvH,GAAD,CAAcmC,KAAMD,EAAO/F,EAAE,OAAOiG,EAAE,MAAtC,SACA,kBAAC1C,GAAD,CAAUvD,EAAE,OAAOiG,EAAE,QAAS/H,EAAKmN,OAGnC,kBAACxH,GAAD,CAAcmC,KAAMD,EAAO/F,EAAE,OAAOiG,EAAE,MAAtC,cACA,kBAAC1C,GAAD,CAAUvD,EAAE,OAAOiG,EAAE,QAAQ/H,EAAKoN,YAGlC,kBAACzH,GAAD,CAAcmC,KAAMD,EAAO/F,EAAE,OAAOiG,EAAE,MAAtC,YACA,kBAAC1C,GAAD,CAAUvD,EAAE,OAAOiG,EAAE,QAASsE,GAE9B,uBAAGgB,QAASpB,OAAepL,EAAY,QACnC,6BAASuH,OAAO,8CAA8CN,KAAMD,IACpE,kBAAClC,GAAD,CAAc7D,EAAE,OAAOiG,EAAE,OAAOuF,iBAAiB,SAASxF,KAAK,WAA/D,MAIJ,0BAAM3C,MAAM,KAAKH,OAAO,MAAM+C,EAAE,KAAKD,KAAMD,EAAOsB,IAAK+B,IACvD,kBAACxF,GAAD,CAAkB5D,EAAE,IAAIiG,EAAE,OAAOoB,IAAK6B,EAAmBlD,KAAK,UAAUrC,WAAW,UAGnF,kBAACJ,GAAD,CAAUvD,EAAE,IAAIiG,EAAE,OAAOoB,IAAKgC,EAAgB1F,WAAW,UAGzD,uBAAG0D,IAAKkC,GACJ,0BAAMlG,MAAM,KAAKH,OAAO,MAAM+C,EAAE,KAAKD,KAAMD,IAC3C,kBAAClC,GAAD,CAAc4H,cAAc,KAAKxF,EAAE,MAAMjG,EAAE,KAAKgG,KAAK,WAArD,qBAEJ,kBAACzC,GAAD,CAAUvD,EAAE,IAAIqH,IAAKiC,EAAmB3F,WAAW,UAGnD,kBAACE,GAAD,CAAcmC,KAAK,QAAQhG,EAAE,MAAMiG,EAAE,OAAOtC,WAAW,QAAQzF,EAAKwN,OAGpE,kBAAC9H,GAAD,CAAkBoC,KAAK,QAAQhG,EAAE,KAAKiG,EAAE,OAAOtC,WAAW,OAAOiH,U,SCtJ1E,SAASe,GAAmB5N,GAC/B,OAAOA,EAAMS,KAAwB,WAAgBC,GAAO,IAAD,mBAApBmN,EAAoB,KAAbC,EAAa,KACjDC,EAAWrN,EAAI,EACfsN,EAAWC,KAAKC,MAAMxN,EAAI,GAAK,EAG/ByN,EAdW,IAcFH,EAxBG,GA0BZI,EAlBU,IAkBDL,EA1BG,GA4BlB,MAAO,CACH,CAEIM,iBAAkB,CACdpM,EAAGmM,EACHlG,EAAGiG,GAEPhJ,OAzBS,IA0BTH,IAAK6I,EACLvI,MA7BQ,KA+BZ,CAEI+I,iBAAkB,CACdpM,EAAIqM,IAAuBF,EAC3BlG,EAAGiG,GAEPhJ,OAnCS,IAqCToJ,UACI7N,IAAMV,EAAMI,OAAS,OAAIY,EACR,IAAbgN,GAA+B,IAAbD,EACZ,SACa,IAAbC,GAA+B,IAAbD,EACd,aACA/M,EAClBgE,IAAK8I,EACLxI,MA/CQ,SAkDjBrE,QAA0C,aAAuCP,GAAO,IAAD,mBAA3C8N,EAA2C,KAArCC,EAAqC,KAA7BC,EAA6B,wBAApBb,EAAoB,KAAbC,EAAa,KAEtF,OAAIpN,EAAI,IAAM,EACH,CAAC,GAAD,oBAAK8N,GAAL,aAAcC,GAAd,aAAyBC,IAAQ,CAACb,GAAQ,CAACC,IAE3C,CAACU,EAAD,uBAAWC,GAAX,CAAmBZ,IAAnB,uBAA+Ba,GAA/B,CAAsCZ,OAElD,CAAC,GAAI,GAAI,KAIT,SAASa,GAAiB3O,GAC7B,OAAOA,EAAMS,KAAwB,WAAgBC,GAAO,IAAD,mBAApBmN,EAAoB,KAAbC,EAAa,KACjDE,EAAWtN,EAAI,EAGfyN,EAhEW,IAgEFH,EA1EG,GA4ElB,MAAO,CACH,CAEIK,iBAAkB,CACdpM,EAhFM,GAiFNiG,EAAGiG,GAEPhJ,OAzES,IA0ETH,IAAK6I,EACLvI,MAxEUsJ,KA0Ed,CAEIP,iBAAkB,CACdpM,EAAG4M,IACH3G,EAAGiG,GAEPhJ,OAnFS,IAoFToJ,UACiB,IAAbP,GAAkBtN,IAAMV,EAAMI,OAAS,EACjC,aACAY,EACVgE,IAAK8I,EACLxI,MAtFUsJ,SCF1B,I,8BAea1D,GAA+B/I,wBAA4C,CAAE0F,QAAS,eAEtFF,GAA8BxF,wBAA4C,CAAE0F,QAAS,eAuRnFiH,GApROzF,sBAA8B,SAACnG,EAAGoG,GACpD,IAAMyF,EAAW3D,iBAAsB,MACjC4D,EAAU5D,iBAAsB,MAEhC6D,EAAwB7D,kBAAmB,eAC3C8D,EAAuB9D,kBAAmB,eAE1CpH,EAAQuD,qBAAWrF,GAPmC,EAQjCqF,qBAAWC,IAA7B2H,EARmD,oBAU5D1I,qBAAU,WACN9D,QAAQ+D,IAAI,CACRC,MAAM,2BAA2BC,MAAK,SAAA3E,GAAC,OAAIA,EAAE4E,UAAQD,KAAKrD,GAC1DoD,MAAM,8BAA8BC,MAAK,SAAA3E,GAAC,OAAIA,EAAE4E,UAAQD,KAAKrD,GAC7DoD,MAAM,+BAA+BC,MAAK,SAAA3E,GAAC,OAAIA,EAAE4E,UAAQD,KAAKrD,GAC9DoD,MAAM,gCAAgCC,MAAK,SAAA3E,GAAC,OAAIA,EAAE4E,UAAQD,KAAKrD,KAChEqD,MAAK,YAAsC,IAAD,mBAAnCwI,EAAmC,KAA7BC,EAA6B,KAApBC,EAAoB,KAAdC,EAAc,KACzCC,IAAQC,IAAM,CACV,mBAAoBL,EAAKM,UAAUN,EAAKO,YAAY,KAAO,GAC3D,sBAAuBN,EAAQK,UAAUL,EAAQM,YAAY,KAAO,GACpE,uBAAwBL,EAAKI,UAAUJ,EAAKK,YAAY,KAAO,GAC/D,wBAAyBJ,EAASG,UAAUH,EAASI,YAAY,KAAO,IAE5EH,IAAQjJ,MAAQ,CACZ,eAAgB,CACZqJ,OAAQ,oBAEZ,kBAAmB,CACfA,OAAQ,uBAEZ,YAAa,CACTA,OAAQ,wBAEZ,qBAAsB,CAClBA,OAAQ,6BAGjB9I,OAAM,SAAAC,GAAC,OAAIC,QAAQC,MAAMF,QAC7B,IAEH,IAAM8I,EAAcC,uBAAY,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAgDpN,QAAQqN,KAAK,CACzF,IAAIrN,SAAQ,SAACC,GACTqM,EAAsBpH,QAAU,WAC5BoH,EAAsBpH,QAAU,aAChCqH,EAAqBrH,QAAU,aAC/BjF,OAAQ5B,IAGZgD,EAAMI,OAAN,MAAAJ,EAAgB+L,MAEpB,IAAIpN,SAAQ,SAACC,GACTsM,EAAqBrH,QAAU,WAC3BoH,EAAsBpH,QAAU,aAChCqH,EAAqBrH,QAAU,aAC/BjF,OAAQ5B,OAGhB,IAAI2B,SAAQ,SAACC,GAAD,OAAaqN,YAAW,kBAAMrN,OAAQ5B,KAAY,YAC9D,CAACgD,EAAOiL,EAAuBC,IAE7BgB,EAAyBJ,uBAAY,WAEvC,GAAyB,OAArBf,EAASlH,SAAwC,OAApBmH,EAAQnH,QACrC,MAAM,IAAIsI,eAAe,0EAO7B,MAAO,CAHO,gDAA4CpB,EAASlH,QAAQuI,WAC9D,gDAA4CpB,EAAQnH,QAAQuI,cAG1E,CAACrB,EAAUC,IAERqB,EAAyBP,sBAAW,sBAAC,wDAAApN,EAAA,yDAAO4N,EAAP,+BAAoB,IAAIC,KAEzD1L,EAASiF,SAAS0G,cAAc,WAC/BlL,MAhGM,KAiGbT,EAAOM,OA/FO,KAoGE,QAHVsL,EAAU5L,EAAO6L,WAAW,OANK,sBAU7B,IAAIP,eAAe,oCAVU,gBAaXD,IAbW,mBAahCS,EAbgC,KAatBC,EAbsB,KAgBvCN,EAAI7N,KAAK,YAAakO,GACtBL,EAAI7N,KAAK,WAAYmO,GAjBkB,UAoBdpM,GAAiB,2BAAD,OAA4BqM,mBAAmBF,KApBjD,eAoBjCG,EApBiC,iBAqBftM,GAAiB,2BAAD,OAA4BqM,mBAAmBD,KArBhD,eAqBjCG,EArBiC,OAwBhC,OAAPN,QAAO,IAAPA,KAASO,UAAUF,EAAY,EAAG,EArHrB,KAEC,MA2FyB,KAyBvCR,EAzBuC,UAyBX1L,GAAkBC,GAzBP,gCAyBnCpC,KAzBmC,UAyB9B,YAzB8B,MA4BhC,OAAPgO,QAAO,IAAPA,KAASO,UAAUD,EAAW,EAAG,EAzHpB,KAEC,MA2FyB,KA6BvCT,EA7BuC,UA6BZ1L,GAAkBC,GA7BN,gCA6BnCpC,KA7BmC,UA6B9B,WA7B8B,MAgCvCoC,EAAOS,MAAQ2L,IACfpM,EAAOM,OA5HO,KA6HP,OAAPsL,QAAO,IAAPA,KAASO,UAAUF,EAAY,EAAG,EA/HrB,KAEC,MA8HP,OAAPL,QAAO,IAAPA,KAASO,UAAUD,EAhIN,KAgI+B,EAhI/B,KAEC,MA2FyB,KAoCvCT,EApCuC,UAoCb1L,GAAkBC,GApCL,gCAoCnCpC,KApCmC,UAoC9B,UApC8B,MAuCvCoC,EAAOS,MApIM,KAqIbT,EAAOM,OAAS+L,KACT,OAAPT,QAAO,IAAPA,KAASO,UAAUF,EAAY,EAAG,EAtIrB,KAEC,MAqIP,OAAPL,QAAO,IAAPA,KAASO,UAAUD,EAAW,EArIhB,KAFD,KAEC,MA2FyB,KA2CvCT,EA3CuC,UA2CV1L,GAAkBC,GA3CR,gCA2CnCpC,KA3CmC,UA2C9B,aA3C8B,MA8CvCoC,EAAOsM,SA9CgC,kBAiDhCb,GAjDgC,4CAkDxC,CAACJ,IAEEkB,EAAQtB,uBAAY,SAACuB,GAAD,8CAA2D,WAAOtP,GAAP,6BAAAW,EAAA,yDAEjFyM,GAAe,GAGTmC,EAAYtN,EAAMjC,UAEpBA,EAAUJ,OAAShC,EAAckC,MAP4C,iBAQvE0P,EAAgC,GAE7BpR,EAAO,EAV6D,YAU1DA,EAAO6D,EAAMK,OAAOtC,EAAUL,OAAO1B,MAAMI,QAVe,iCAYnEyP,EAAY9N,EAAUL,MAAOvB,GAZsC,OAcnEqR,EAActB,IAEpBqB,EAAKlR,KAAKmR,GAhB+D,QAUPrR,IAVO,uBAmB7EqP,IAAQiC,UAAU,CACdC,QAASL,EAASE,GAClBI,YAAa,EACbC,SAAU,WACXR,QAvB0E,2BAwBtErP,EAAUJ,OAAShC,EAAcmC,KAxBqC,kCA0BvE+N,EAAY9N,EAAUL,MAAOK,EAAU5B,MA1BgC,QA6B7EqP,IAAQiC,UAAU,CACdC,QAASL,EAAS,CAACnB,MACnByB,YAAa,EACbC,SAAU,WACXR,QAjC0E,wBAmCvEG,EAAgC,GAE7B7P,EAAQ,EArC4D,aAqCzDA,EAAQsC,EAAMK,OAAOjE,QArCoC,iBAsChED,EAAO,EAtCyD,aAsCtDA,EAAO6D,EAAMK,OAAO3C,GAAO1B,MAAMI,QAtCqB,kCAwC/DyP,EAAYnO,EAAOvB,GAxC4C,QA0C/DqR,EAActB,IAEpBqB,EAAKlR,KAAKmR,GA5C2D,QAsCbrR,IAtCa,wBAqC5BuB,IArC4B,wBAgD7E8N,IAAQiC,UAAU,CACdC,QAASL,EAASE,GAClBI,YAAa,EACbC,SAAU,WACXR,QApD0E,QAwDjFpN,EAAM6N,aAAaP,GAGnBnC,GAAe,GA3DkE,4CAA3D,wDA4DvB,CAACe,EAAwBL,EAAaV,EAAgBnL,IA+EzD,OA7EA8N,8BAA0DxI,GAAK,iBAAO,CAClEyI,iBAAkBX,EAAMxD,IACxBoE,cAAeZ,EAAMzC,IACrBsD,OAAO,WAAD,4BAAE,WAAOlQ,GAAP,6CAAAW,EAAA,yDAEJyM,GAAe,GAGTmC,EAAYtN,EAAMjC,UAEpBA,EAAUJ,OAAShC,EAAckC,MAPjC,iBASMyO,EAAM,IAAIC,IAEV2B,EAAYlO,EAAMK,OAAOtC,EAAUL,OAAO1B,MAAMI,OAChD+R,EAAiBD,EAAU9O,SAAS,IAAIhD,OACrCD,EAAO,EAbhB,YAamBA,EAAO+R,GAb1B,kCAeUrC,EAAY9N,EAAUL,MAAOvB,GAfvC,eAmBUiS,EAAS9B,EAAI8B,OAAJ,UAAcjS,EAAKiD,SAAS,IAAIiP,SAASF,EAAgB,KAAzD,YAAiEnO,EAAMK,OAAOtC,EAAUL,OAAO1B,MAAMG,GAAML,OAnB9H,UAsBUuQ,EAAuB+B,GAtBjC,QAaqCjS,IAbrC,mCA0BAwD,OA1BA,UA0Ba2M,EAAIgC,cAAc,CAAE3Q,KAAM,SA1BvC,mCA0BqDqC,EAAMK,OAAOtC,EAAUL,OAAO5B,KA1BnF,uDA2BOiC,EAAUJ,OAAShC,EAAcmC,KA3BxC,kCA6BM+N,EAAY9N,EAAUL,MAAOK,EAAU5B,MA7B7C,yBAgCkBkQ,IAhClB,eAgCMC,EAhCN,YAmCA3M,OAnCA,UAmCa2M,EAAIgC,cAAc,CAAE3Q,KAAM,SAnCvC,mCAmCqDqC,EAAMK,OAAOtC,EAAUL,OAAO1B,MAAM+B,EAAU5B,MAAML,KAnCzG,oDAsCMwQ,EAAM,IAAIC,IAEVgC,EAAavO,EAAMK,OAAOjE,OAC1BoS,EAAkBD,EAAWnP,SAAS,IAAIhD,OACvCsB,EAAQ,EA1CjB,aA0CoBA,EAAQ6Q,GA1C5B,iBA6CUE,EAAcnC,EAAI8B,OAAJ,UAAc1Q,EAAM0B,SAAS,IAAIiP,SAASG,EAAiB,KAA3D,YAAmExO,EAAMK,OAAO3C,GAAO5B,OAErGoS,EAAYlO,EAAMK,OAAO3C,GAAO1B,MAAMI,OACtC+R,EAAiBD,EAAU9O,SAAS,IAAIhD,OACrCD,EAAO,EAjDpB,aAiDuBA,EAAO+R,GAjD9B,kCAmDcrC,EAAYnO,EAAOvB,GAnDjC,eAuDciS,EAASK,EAAYL,OAAZ,UAAsBjS,EAAKiD,SAAS,IAAIiP,SAASF,EAAgB,KAAjE,YAAyEnO,EAAMK,OAAO3C,GAAO1B,MAAMG,GAAML,OAvDhI,UA0DcuQ,EAAuB+B,GA1DrC,QAiDyCjS,IAjDzC,wBA0CwCuB,IA1CxC,oCA+DAiC,OA/DA,UA+Da2M,EAAIgC,cAAc,CAAE3Q,KAAM,SA/DvC,kCA+DkD,iBA/DlD,QAmEJqC,EAAM6N,aAAaP,GAGnBnC,GAAe,GAtEX,4CAAF,mDAAC,OA2EP,kBAAC5M,EAAD,KACI,kBAAC2I,GAA6BwH,SAA9B,CAAuC9R,MAAOqO,GAC1C,kBAACtH,GAA4B+K,SAA7B,CAAsC9R,MAAOsO,GACzC,kBAAC,GAAD,CAAW5F,IAAKyF,IAChB,kBAAC,GAAD,CAAUzF,IAAK0F,UC5StB2D,GAAkBtQ,IAAOC,IAAV,mKAWfsQ,GAAevQ,IAAOC,IAAV,yDAKZuQ,GAAcxQ,IAAOC,IAAV,iJAUXwQ,GAAezQ,IAAOC,IAAV,qJAUZyQ,GAAc1Q,IAAOC,IAAV,yKAUX0Q,GAAc3Q,IAAO4Q,MAAV,qMAET,SAAAvN,GAAK,OAAqB,IAAjBA,EAAMwN,OAAkB,OAAS,WAU5CC,GAAc9Q,IAAO+Q,MAAV,sVAqBXC,GAAiBhR,IAAOiR,SAAV,yWAsBdC,GAAclR,IAAOmR,IAAV,0EC7ETC,GAvBYC,gBAAK,SAAChO,GAC7B,IAAM4D,EAAM8B,iBAA4B,MAElCuI,EAAS7D,uBAAY,WACH,OAAhBxG,EAAIzB,UAIRyB,EAAIzB,QAAQ+L,MAAMzO,OAAS,MAC3BmE,EAAIzB,QAAQ+L,MAAMzO,OAAlB,UAA8BmE,EAAIzB,QAAQgM,aAA1C,SACD,CAACvK,IAUJ,OARA7C,qBAAU,WAKN,OAJAkN,IAEAG,OAAOC,iBAAiB,SAAUJ,GAE3B,kBAAMG,OAAOE,oBAAoB,SAAUL,MACnD,CAACA,EAAQjO,EAAM9E,QAEX,kBAACyS,GAAD,iBAAoB3N,EAApB,CAA2B4D,IAAKA,EAAK2K,QAASN,QCrB5CO,GAAyB7R,IAAOC,IAAV,wDCIpB,SAAS6R,KACpB,IAAMnQ,EAAQuD,qBAAWrF,GAEzB,OAAO4F,cAAY,WAAO,IAAD,EACrB,GAAI9D,EAAMjC,UAAUJ,OAAShC,EAAckC,MACvC,OAAO,KAGX,IAAMsC,EAAKH,EAAMjC,UAAUL,MAK3B,OACI,kBAACwS,GAAD,KACI,kBAACnB,GAAD,uBACA,kBAACC,GAAD,aAEI,kBAACG,GAAD,CAAaxR,KAAK,OAAOf,MAAK,UAAEoD,EAAMK,OAAOL,EAAMjC,UAAUL,OAAO5B,YAAtC,QAA8C,GAAIsU,SAT7E,SAACC,GACZrQ,EAAMK,OAAOF,GAAImQ,SAASD,EAAME,cAAc3T,eCP3C,SAAS4T,KACpB,IAAMxQ,EAAQuD,qBAAWrF,GACnBuS,EAAWrJ,iBAAyB,MAE1C,OAAOtD,cAAY,WAAO,IAAD,4BACf4M,EACF1Q,EAAMjC,UAAUJ,OAAShC,EAAcmC,KACjCkC,EAAMK,OAAOL,EAAMjC,UAAUL,OAAOiT,SAAS3Q,EAAMjC,UAAU5B,MAC7D6D,EAAMjC,UAAUJ,OAAShC,EAAckC,MAAvC,aACM/B,KAAMkE,EAAMK,OAAOL,EAAMjC,UAAUL,OAAO5B,MAASkE,EAAMK,OAAOL,EAAMjC,UAAUL,OAAO3B,UACzF,CAAED,KAAM,gBAChB8U,EAAe5Q,EAAMjC,UAAUJ,OAAShC,EAAcmC,KAAOkC,EAAMK,OAAOL,EAAMjC,UAAUL,OAAO3B,cAAWiB,EAG5G6T,EAAmB,SAAC/U,GACtB,OAAO,SAACuU,GACJA,EAAMxU,UAEFmE,EAAMjC,UAAUJ,OAAShC,EAAcmC,KACvCkC,EAAMK,OAAOL,EAAMjC,UAAUL,OAAOoT,SAAS9Q,EAAMjC,UAAU5B,KAAML,EAAoC,KAA9BuU,EAAME,cAAc3T,OAAyB,SAATd,OAAkBkB,EAAYqT,EAAME,cAAc3T,OACxJoD,EAAMjC,UAAUJ,OAAShC,EAAckC,OAC9CmC,EAAMK,OAAOL,EAAMjC,UAAUL,OAAOqT,aAAajV,EAAoC,KAA9BuU,EAAME,cAAc3T,WAAeI,EAAYqT,EAAME,cAAc3T,SAKhIoU,EAAQ,SAACC,GAAD,OAAwB,WAC9BjR,EAAMjC,UAAUJ,OAAShC,EAAcmC,KACvCkC,EAAMK,OAAOL,EAAMjC,UAAUL,OAAOoT,SAAS9Q,EAAMjC,UAAU5B,KAAM8U,OAAOjU,GACnEgD,EAAMjC,UAAUJ,OAAShC,EAAckC,OAC9CmC,EAAMK,OAAOL,EAAMjC,UAAUL,OAAOqT,aAAaE,OAAOjU,KAI1DkU,EAAS,uCAAG,WAAOb,GAAP,iBAAA3R,EAAA,yDACd2R,EAAMxU,UAEFmE,EAAMjC,UAAUJ,OAAShC,EAAcmC,KAH7B,oBAIe,OAArB2S,EAAS5M,QAJH,mBAOyB,OAA3B4M,EAAS5M,QAAQsN,MAPf,gCAQY5R,EAAoBkR,EAAS5M,QAAQsN,MAAM,IARvD,OAQFzQ,EARE,cAWNV,EAAMK,OAAOL,EAAMjC,UAAUL,OAAOoT,SAAS9Q,EAAMjC,UAAU5B,KAAM,QAASuE,GAXtE,kCAaHV,EAAMjC,UAAUJ,OAAShC,EAAckC,MAbpC,oBAce,OAArB4S,EAAS5M,QAdH,oBAiByB,OAA3B4M,EAAS5M,QAAQsN,MAjBf,kCAkBY5R,EAAoBkR,EAAS5M,QAAQsN,MAAM,IAlBvD,QAkBFzQ,EAlBE,eAqBNV,EAAMK,OAAOL,EAAMjC,UAAUL,OAAOqT,aAAa,QAASrQ,GArBpD,4CAAH,sDA0Bf,OACI,kBAACkO,GAAD,KACI,kBAACuB,GAAD,MACA,kBAACpB,GAAD,sBACA,kBAACC,GAAD,CAAaE,OAAQlP,EAAMjC,UAAUJ,OAAShC,EAAckC,OAA5D,QAEI,kBAACsR,GAAD,CAAaxR,KAAK,OAAOf,MAAK,UAAE8T,EAAa5U,YAAf,QAAuB,GAAIsU,SAAUS,EAAiB,WAExF,kBAAC7B,GAAD,qBAEI,kBAACG,GAAD,CAAaxR,KAAK,OAAOf,MAAK,UAAE8T,EAAarH,mBAAf,QAA8B,GAAI+G,SAAUS,EAAiB,eAAgBO,YAAW,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAAcvH,eAE1I,kBAAC2F,GAAD,cAEI,kBAACG,GAAD,CAAaxR,KAAK,OAAOf,MAAK,UAAE8T,EAAapH,aAAf,QAAwB,GAAI8G,SAAUS,EAAiB,SAAUO,YAAW,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAActH,SAE9H,kBAAC0F,GAAD,mBAEI,kBAACG,GAAD,CAAaxR,KAAK,OAAOf,MAAK,UAAE8T,EAAanH,kBAAf,QAA6B,GAAI6G,SAAUS,EAAiB,cAAeO,YAAW,iBAAER,QAAF,IAAEA,OAAF,EAAEA,EAAcrH,kBAAhB,QAA8B,MAEtJ,kBAACyF,GAAD,iBAEI,kBAACG,GAAD,CAAaxR,KAAK,OAAOf,MAAK,UAAE8T,EAAarI,gBAAf,QAA2B,GAAI+H,SAAUS,EAAiB,YAAaO,YAAW,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAAcvI,YAEpI,kBAAC2G,GAAD,4BAEI,kBAAC,GAAD,CAAoBpS,MAAK,UAAE8T,EAAa3I,0BAAf,QAAqC,GAAIqI,SAAUS,EAAiB,sBAAuBO,YAAW,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAAc7I,sBAEnJ,kBAACiH,GAAD,oBAEI,kBAAC,GAAD,CAAoBpS,MAAK,UAAE8T,EAAazI,mBAAf,QAA8B,GAAImI,SAAUS,EAAiB,eAAgBO,YAAW,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAAc3I,eAErI,kBAAC+G,GAAD,6BAEI,kBAAC,GAAD,CAAoBpS,MAAK,UAAE8T,EAAaxI,sBAAf,QAAiC,GAAIkI,SAAUS,EAAiB,kBAAmBO,YAAW,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAAc1I,kBAE3I,kBAAC8G,GAAD,cAEI,kBAACG,GAAD,CAAaxR,KAAK,OAAOf,MAAK,UAAE8T,EAAa/G,aAAf,QAAwB,GAAIyG,SAAUS,EAAiB,SAAUO,YAAW,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAAcjH,SAE9H,kBAACqF,GAAD,aAEI,kBAACG,GAAD,CAAaxR,KAAK,OAAOf,MAAK,UAAE8T,EAAa/S,YAAf,QAAuB,GAAIyS,SAAUS,EAAiB,QAASO,YAAW,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAAcjT,QAE5H,kBAACqR,GAAD,cAEI,kBAACG,GAAD,CAAaxR,KAAK,SAAS0T,IAAK,EAAGC,IAAK,GAAI1U,MAAK,UAAE8T,EAAalM,aAAf,QAAwB,GAAI4L,SAAUS,EAAiB,SAAUO,iBAAqCpU,KAAZ,OAAZ4T,QAAY,IAAZA,OAAA,EAAAA,EAAcpM,QAAd,OAAgDoM,QAAhD,IAAgDA,GAAhD,UAAgDA,EAAcpM,aAA9D,WAAoCxH,EAAY,EAAqBoC,cAExM,kBAAC4P,GAAD,cAEI,kBAACG,GAAD,CAAaxR,KAAK,QAAQf,MAAK,UAAE8T,EAAa1M,aAAf,QAAwB,GAAIoM,SAAUS,EAAiB,SAAUO,YAAW,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAAc5M,QAC3H,4BAAQuN,QAASP,EAAM,SAAUQ,cAAiCxU,IAAvB0T,EAAa1M,OAAxD,gBAEJ,kBAACgL,GAAD,cAEI,kBAACO,GAAD,CAAa9O,IAAKiQ,EAAahQ,MAAO+Q,IAAI,kBAC1C,kBAACtC,GAAD,CAAaxR,KAAK,OAAO+T,OAAO,UAAUtB,SAAUc,EAAW5L,IAAKmL,IACpE,4BAAQc,QAASP,EAAM,SAAUQ,cAAiCxU,IAAvB0T,EAAahQ,OAAxD,qBCxHL,SAASiR,KACpB,IAAM3R,EAAQuD,qBAAWrF,GAEzB,OAAO4F,cAAY,WACf,OAAI9D,EAAMjC,UAAUJ,OAAShC,EAAciC,KAEnC,kBAAC+Q,GAAD,KACI,kBAAC6B,GAAD,OAKJ,kBAAC3B,GAAD,KACI,kBAACC,GAAD,sC,6CChBP8C,GAAoBC,YAAH,q8DAsFjBC,GAAazT,YAAO0T,QAAP1T,CAAH,8DCtEhB,SAAS2T,GAAT,GAAwF,IAA1D7R,EAAyD,EAAzDA,GAAI8R,EAAqD,EAArDA,SAAUlU,EAA2C,EAA3CA,UAkB/C,OACI,yBAAKmU,cAlBU,SAAC7B,GAChBA,EAAM8B,iBACN9B,EAAM+B,kBACN/B,EAAMxU,UAENwW,eAAYC,UACZrG,YAAW,kBAAMoG,eAAYE,KAAK,CAC9BlC,QACAlQ,KACAuB,MAAO3D,MACP,IAQ4BwT,QALlB,SAACrS,GACfmT,eAAYC,YAKPL,GAYN,SAASO,GAAT,GAAkE,IAAlCC,EAAiC,EAAjCA,mBAC7BzS,EAAQuD,qBAAWrF,GACnBwU,EAAgBnP,qBAAWoP,IAEjC,OAAO7O,cAAY,WACf,IAAM8O,EAAiB,SAAC,GAA0B,IAAxBlR,EAAuB,EAAvBA,MACtB,GAAIA,EAAM/D,OAAShC,EAAckC,MAAO,CACpC,IAAMH,EAAQsC,EAAMK,OAAOqB,EAAMhE,OAEjC+B,EAAkB,CAAE9B,KAAMhC,EAAckC,MAAOR,KAAMK,EAAML,MAA1C,UAAqDK,EAAM5B,KAA3D,qBACd,GAAI4F,EAAM/D,OAAShC,EAAcmC,KAAM,CAC1C,IAAM3B,EAAO6D,EAAMK,OAAOqB,EAAMhE,OAAO1B,MAAM0F,EAAMvF,MAEnDsD,EAAkB,CAAE9B,KAAMhC,EAAcmC,KAAMT,KAAMlB,GAAnC,UAA8CA,EAAKL,KAAnD,oBAEjB2D,EAAkB,CAAE9B,KAAMhC,EAAciC,KAAMP,KAAMwV,eAAK7S,EAAM8S,aAA9C,mBAInBC,EAAY,SAAC,GAA0B,IAAxBrR,EAAuB,EAAvBA,MACjB,GAAIA,EAAM/D,OAAShC,EAAckC,MAAO,CACpC,IAAMsC,EAAKH,EAAMK,OAAOqB,EAAMhE,OAAO4C,UACrCN,EAAMI,OAAOsB,EAAMhE,MAAOyC,QACvB,GAAIuB,EAAM/D,OAAShC,EAAciC,KAAM,CAC1C,IAAMuC,EAAKH,EAAMC,SAAS,IAAIrE,EAAJ,oBAA2BoE,EAAMK,OAAOjE,UAClE4D,EAAMI,OAAOD,KAef6S,EAAe,SAAC,GAAD,IAAGtR,EAAH,EAAGA,MAAH,OAA0B+Q,EAAmB/Q,IAE5DuR,EAAkB,SAAC,GAA0B,IAAxBvR,EAAuB,EAAvBA,MACvB,GAAIA,EAAM/D,OAAShC,EAAckC,MAAO,CACpC,IAAMsC,EAAKH,EAAMC,SAASD,EAAMK,OAAOqB,EAAMhE,QAE7CsC,EAAMI,OAAOD,QACV,GAAIuB,EAAM/D,OAAShC,EAAcmC,KAAM,CAC1C,IAAMJ,EAAQsC,EAAMK,OAAOqB,EAAMhE,OAC3ByC,EAAKzC,EAAM4C,QAAQ5C,EAAMiT,SAASjP,EAAMvF,OAE9C6D,EAAMI,OAAOsB,EAAMhE,MAAOyC,KAI5B+S,EAAW,SAAC,GAA0B,IAAxBxR,EAAuB,EAAvBA,MACZA,EAAM/D,OAAShC,EAAckC,OAC7BmC,EAAMmT,UAAUzR,EAAMhE,MAAOgE,EAAMhE,MAAQ,GAC3CsC,EAAMI,OAAOsB,EAAMhE,MAAQ,IACpBgE,EAAM/D,OAAShC,EAAcmC,OACpCkC,EAAMK,OAAOqB,EAAMhE,OAAO0V,SAAS1R,EAAMvF,KAAMuF,EAAMvF,KAAO,GAC5D6D,EAAMI,OAAOsB,EAAMhE,MAAOgE,EAAMvF,KAAO,KAIzCkX,EAAa,SAAC,GAA0B,IAAxB3R,EAAuB,EAAvBA,MACdA,EAAM/D,OAAShC,EAAckC,OAC7BmC,EAAMmT,UAAUzR,EAAMhE,MAAOgE,EAAMhE,MAAQ,GAC3CsC,EAAMI,OAAOsB,EAAMhE,MAAQ,IACpBgE,EAAM/D,OAAShC,EAAcmC,OACpCkC,EAAMK,OAAOqB,EAAMhE,OAAO0V,SAAS1R,EAAMvF,KAAMuF,EAAMvF,KAAO,GAC5D6D,EAAMI,OAAOsB,EAAMhE,MAAOgE,EAAMvF,KAAO,KAIzCmX,EAAa,SAAC,GAAmC,IAAjC5R,EAAgC,EAAhCA,MAClB,OAAIA,EAAM/D,OAAShC,EAAckC,MACN,IAAhB6D,EAAMhE,MACNgE,EAAM/D,OAAShC,EAAcmC,MACd,IAAf4D,EAAMvF,MAMfoX,EAAe,SAAC,GAAmC,IAAjC7R,EAAgC,EAAhCA,MACpB,OAAIA,EAAM/D,OAAShC,EAAckC,MACtB6D,EAAMhE,QAAUsC,EAAMK,OAAOjE,OAAS,EACtCsF,EAAM/D,OAAShC,EAAcmC,MAC7B4D,EAAMvF,OAAS6D,EAAMK,OAAOqB,EAAMhE,OAAO1B,MAAMI,OAAS,GAUjEoX,EAAW,uCAAI,6BAAA9U,EAAA,yDAASgD,EAAT,EAASA,MACI,OAA1BgR,EAAc7O,QADD,iEAMX6O,EAAc7O,QAAQoK,OAAOvM,GANlB,2CAAJ,sDASX+R,EAAqB,uCAAI,6BAAA/U,EAAA,yDAASgD,EAAT,EAASA,MACN,OAA1BgR,EAAc7O,QADS,iEAMrB6O,EAAc7O,QAAQkK,iBAAiBrM,GANlB,2CAAJ,sDASrBgS,EAAkB,uCAAI,6BAAAhV,EAAA,yDAASgD,EAAT,EAASA,MACH,OAA1BgR,EAAc7O,QADM,iEAMlB6O,EAAc7O,QAAQmK,cAActM,GANlB,2CAAJ,sDASxB,OACI,oCACI,kBAAC,QAAD,CAAMvB,GAAG,oBACL,kBAAC,QAAD,CAAMoR,QAASwB,GAAf,aACA,kBAAC,aAAD,MACA,kBAAC,QAAD,CAAMxB,QApCD,WACbvR,EAAMI,WAmCE,gBACA,kBAAC,aAAD,MACA,kBAAC,QAAD,CAAMmR,QAASqB,GAAf,gBACA,kBAAC,QAAD,CAAMrB,QAASiC,GAAf,cACA,kBAAC,QAAD,CAAMjC,QAASkC,GAAf,4BACA,kBAAC,QAAD,CAAMlC,QAASmC,GAAf,yBAEJ,kBAAC,QAAD,CAAMvT,GAAG,qBACL,kBAAC,QAAD,CAAMoR,QA9GC,SAAC,GAA0B,IAAxB7P,EAAuB,EAAvBA,MACdA,EAAM/D,OAAShC,EAAckC,OAC7BmC,EAAMI,OAAOsB,EAAMhE,QA4GW8T,SAxGjB,SAAC,GAA0B,IAAxB9P,EAAuB,EAAvBA,MAEpB,OAAOA,EAAM/D,OAAShC,EAAckC,OAASmC,EAAMjC,UAAUJ,OAAShC,EAAckC,OAASmC,EAAMjC,UAAUL,QAAUgE,EAAMhE,QAsGrH,QACA,kBAAC,QAAD,CAAM6T,QAASwB,GAAf,YACA,kBAAC,QAAD,CAAMxB,QAAS0B,GAAf,aACA,kBAAC,aAAD,MACA,kBAAC,QAAD,CAAM1B,QAAS2B,EAAS1B,SAAU8B,GAAlC,WACA,kBAAC,QAAD,CAAM/B,QAAS8B,EAAW7B,SAAU+B,GAApC,aACA,kBAAC,aAAD,MACA,kBAAC,QAAD,CAAMhC,QAASqB,GAAf,kBACA,kBAAC,QAAD,CAAMrB,QAASiC,GAAf,gBACA,kBAAC,QAAD,CAAMjC,QAASkC,GAAf,8BACA,kBAAC,QAAD,CAAMlC,QAASmC,GAAf,0BACA,kBAAC,aAAD,MACA,kBAAC5B,GAAD,CAAYP,QAASyB,GAArB,WAEJ,kBAAC,QAAD,CAAM7S,GAAG,oBACL,kBAAC,QAAD,CAAMoR,QAAS0B,GAAf,aACA,kBAAC,aAAD,MACA,kBAAC,QAAD,CAAM1B,QAAS2B,EAAS1B,SAAU8B,GAAlC,WACA,kBAAC,QAAD,CAAM/B,QAAS8B,EAAW7B,SAAU+B,GAApC,aACA,kBAAC,aAAD,MACA,kBAAC,QAAD,CAAMhC,QAASqB,GAAf,iBACA,kBAAC,QAAD,CAAMrB,QAASiC,GAAf,eACA,kBAAC,QAAD,CAAMjC,QAASkC,GAAf,6BACA,kBAAC,QAAD,CAAMlC,QAASmC,GAAf,yBACA,kBAAC,aAAD,MACA,kBAAC5B,GAAD,CAAYP,QAASyB,GAArB,eCrNb,IAAMW,GAKT,CACAjG,QAAS,CACLkG,WAAY,UACZC,OAAQ,oBACR7P,MAAO,UACP7C,OAAQ,QACR2S,KAAM,MACNC,UAAW,oBACXC,SAAU,oBACVC,UAAW,QACXC,SAAU,QACVC,SAAU,WACVC,IAAK,MACLC,UAAW,wBACX/S,MAAO,SAEXgT,QAAS,CACLV,WAAY,cAKPW,GAAiBlW,IAAOC,IAAV,2NAadkW,GAAcnW,IAAOC,IAAV,wEAMXmW,GAAYpW,IAAOqW,KAAV,+EAMTC,GAAYtW,IAAOC,IAAV,kGAQTsW,GAAkBvW,IAAOqW,KAAV,mDAKfG,GAAexW,IAAOC,IAAV,yEAMZwW,GAAczW,IAAO0W,OAAV,kOAgBXC,GAAoB3W,YAAOyW,GAAPzW,CAAH,0JAWjB4W,GAAuB5W,YAAOyW,GAAPzW,CAAH,0JCtFlB,SAAS6W,GAAT,GAAkF,IAA3DC,EAA0D,EAA1DA,gBAAiB1C,EAAyC,EAAzCA,mBAC7CzS,EAAQuD,qBAAWrF,GAiBnBkX,EAAsB,WACxB,GAAID,EAAgBxX,OAAShC,EAAckC,MAAO,CAC9C,IAAMH,EAAQsC,EAAMK,OAAO8U,EAAgBzX,OAE3C,OAAO,2EAAgD,kBAAC+W,GAAD,KAAY/W,EAAM5B,MAAlE,yBACJ,GAAIqZ,EAAgBxX,OAAShC,EAAcmC,KAAM,CACpD,IAAM3B,EAAO6D,EAAMK,OAAO8U,EAAgBzX,OAAO1B,MAAMmZ,EAAgBhZ,MAEvE,OAAO,0EAA+C,kBAACsY,GAAD,KAAYtY,EAAKL,OAEvE,OAAO,yFAIf,OACI,kBAAC,IAAD,CAAYuZ,OAAQF,EAAgBxX,OAAShC,EAAciC,KAAMgS,MAAO+D,IACpE,kBAACY,GAAD,KACI,kBAACC,GAAD,KACI,kBAAC,KAAD,KAAWY,IAEf,kBAACT,GAAD,uBACmB,kBAACC,GAAD,sBAEnB,kBAACC,GAAD,KACI,kBAACC,GAAD,CAAavD,QA1BJ,kBAAMkB,EAAmB,CAAE9U,KAAMhC,EAAciC,SA0BxD,UACA,kBAACoX,GAAD,CAAmBzD,QAxChB,WACX4D,EAAgBxX,OAAShC,EAAckC,OACvCmC,EAAMI,SACNJ,EAAMsV,YAAYH,EAAgBzX,QAC3ByX,EAAgBxX,OAAShC,EAAcmC,MAC9CkC,EAAMI,OAAO+U,EAAgBzX,OAC7BsC,EAAMK,OAAO8U,EAAgBzX,OAAO6X,WAAWJ,EAAgBhZ,OAE/D6G,QAAQwS,KAAK,+DAGjB/C,EAAmB,CAAE9U,KAAMhC,EAAciC,SA6B7B,a,uDCvDP6X,GAAoBpX,IAAOC,IAAV,gQAqBjBoX,GAAiBrX,IAAOC,IAAV,kKAST,SAAAoD,GAAK,OAAIA,EAAMiU,MAAQ,OAAS,2BAIrCC,GAAiBvX,IAAOC,IAAV,qNAoBduX,GAAqBxX,IAAO+Q,MAAMnO,MAAM,CACjDtD,KAAM,QADwBU,CAAH,8RASlB,SAAAqD,GAAK,OAAIA,EAAMoU,MAAQ,oBAAsB,gBAc7CC,GAAkB1X,IAAOC,IAAV,yaAOb,SAAAoD,GAAK,OAAqB,IAAjBA,EAAMwN,OAAkB,OAAS,kBAqB5C8G,GAAoB3X,IAAOC,IAAV,oPAuBjB2X,GAAiB5X,IAAOC,IAAV,2KAQT,SAAAoD,GAAK,OAAIA,EAAMwU,SAAW,YAAc,UAI7CC,GAAoB9X,IAAOqW,KAAV,0DCtIvB,I,GAAM0B,GAAiB/X,IAAOC,IAAV,0IAET,SAAAoD,GAAK,OAAIA,EAAM2U,SAAW,UAAY,UAQ3CC,GAAiBjY,IAAOC,IAAV,qGAOdiY,GAAgBlY,IAAOC,IAAV,wGCtBbkY,GAAYnY,IAAOC,IAAV,mKAEJ,SAAAoD,GAAK,OAAIA,EAAM2U,SAAW,UAAY,UCajD,SAASI,GAAW1Z,GACvB,OAAO,SAACZ,GAAD,OAAkBA,EAAKL,KAAKwM,cAAcoO,SAAS3Z,EAAOuL,gBAItD,SAASqO,GAAT,GAAyD,IAAhCC,EAA+B,EAA/BA,QAASzW,EAAsB,EAAtBA,GAAI0W,EAAkB,EAAlBA,OAC3C7W,EAAQuD,qBAAWrF,GAEnBkC,EAAS,kBAAMJ,EAAMI,OAAOwW,EAASzW,IAE3C,OAAO2D,cAAY,WACf,IAAM3H,EAAO6D,EAAMK,OAAOuW,GAAS5a,MAAMmE,GAGnC+O,EAAoB,KAAX2H,IAEX7W,EAAMjC,UAAUJ,OAAShC,EAAcmC,MACpCkC,EAAMjC,UAAU5B,OAASgE,GACzBH,EAAMjC,UAAUL,QAAUkZ,KAE3BH,GAAWI,EAAXJ,CAAmBta,GAEzB,OACI,kBAAC6V,GAAD,CAAoB7R,GAAG,mBAAmBpC,UAAW,CAAEJ,KAAMhC,EAAcmC,KAAM3B,KAAMgE,EAAIzC,MAAOkZ,IAC9F,kBAACJ,GAAD,CACIH,SAAUrW,EAAMjC,UAAUJ,OAAShC,EAAcmC,MAAQkC,EAAMjC,UAAU5B,OAASgE,GAAMH,EAAMjC,UAAUL,QAAUkZ,EAClHrF,QAASnR,EACT8O,OAAQA,GAGP4H,GAAiB3a,EAAKL,KAAM+a,QC9BlC,SAASE,GAAT,GAAqD,IAAvB5W,EAAsB,EAAtBA,GAAI0W,EAAkB,EAAlBA,OAAkB,EAC7BvU,oBAAS,GADoB,mBACxD0U,EADwD,KAC7CC,EAD6C,KAEzDjX,EAAQuD,qBAAWrF,GAGnBgR,EAASpL,cAAY,iBAAiB,KAAX+S,GAEgC,IAA7D7W,EAAMK,OAAOF,GAAInE,MAAMe,OAAO0Z,GAAWI,IAASza,SAE9C4D,EAAMK,OAAOF,GAAIrE,KAAKwM,cAAcoO,SAASG,EAAOvO,mBAElDtI,EAAMjC,UAAUJ,OAAShC,EAAcmC,MAAQkC,EAAMjC,UAAUJ,OAAShC,EAAckC,QAAUmC,EAAMjC,UAAUL,QAAUyC,MAG9H+W,EAAiB,kBAAMD,GAAcD,IAE3C,OAAOlT,cAAY,kBACf,kBAACkO,GAAD,CAAoB7R,GAAG,oBAAoBpC,UAAW,CAAEJ,KAAMhC,EAAckC,MAAOH,MAAOyC,IACtF,yBAAK+O,OAAQA,GACT,kBAACkH,GAAD,CAAgBC,SAAUrW,EAAMjC,UAAUJ,OAAShC,EAAckC,OAASmC,EAAMjC,UAAUL,QAAUyC,EAAIoR,QAAS2F,GAC7G,kBAACZ,GAAD,KACI,kBAAC,KAAD,CAAiBa,KAAMH,EAAYI,KAAeC,QAEtD,kBAACd,GAAD,KAEI,kBAAC,KAAD,MAAW,kBAAM,oCAAGO,GAAiB9W,EAAMK,OAAOF,GAAIrE,KAAM+a,SAGpE,yBAAK3H,OAAQ8H,GACT,kBAAC,KAAD,MAAW,kBAAM,oCAAGhX,EAAMK,OAAOF,GAAInE,MAAMS,KAAI,SAACyC,EAAG6J,GAAJ,OAAU,kBAAC4N,GAAD,CAAeha,IAAKoM,EAAG5I,GAAI4I,EAAG6N,QAASzW,EAAI0W,OAAQA,iBClCzH,SAASC,GAAiBrV,EAAe8G,GAE5C,YAAcvL,IAAVuL,GAAiC,KAAVA,OAEPvL,IAATyE,GAA+B,KAATA,EACzBA,EAAKgE,MAAM,IAAI6R,OAAJ,WAAe/O,EAAMvG,QAAQ,2BAA4B,QAAzD,KAAqE,OAC3EvF,KAAI,SAAC8a,EAAM7a,GAAP,OAED6a,EAAKjP,gBAAkBC,EAAMD,cACzB,kBAAC6N,GAAD,KACKoB,GAGD,0BAAM5a,IAAKD,GACN6a,WAGZva,EAENyE,EAgBA,SAAS+V,KAAY,IAAD,EACHlV,mBAAS,IADN,mBACxBuU,EADwB,KAChBY,EADgB,OAEGnV,oBAAS,GAFZ,mBAExBoV,EAFwB,KAEZC,EAFY,OC9CpB,WAA0E,IAAD,EAC5DrV,oBAAS,GADmD,mBAC7EqT,EAD6E,KACtEiC,EADsE,KAUpF,MAAO,CAACjC,EANS,SAACtF,GACVsF,KAA6C,IAAlCtF,EAAME,cAAcsH,YAC/BD,EAAyC,IAAlCvH,EAAME,cAAcsH,aD2CTC,GAHK,mBAGxBnC,EAHwB,KAGjBoC,EAHiB,KAIzB/X,EAAQuD,qBAAWrF,GAQnB8Z,EAAM,uCAAG,WAAO3H,GAAP,mBAAA3R,EAAA,sDACX2R,EAAM8B,iBACN9B,EAAMxU,UAEN8b,GAAY,GAEHjb,EAAI,EANF,YAMKA,EAAI2T,EAAM4H,aAAaC,MAAM9b,QANlC,oBASW,sBAFZqC,EAAO4R,EAAM4H,aAAa9G,MAAMzU,IAE7BiB,OAA+Bc,EAAK3C,KAAKqc,SAAS,SATpD,iCAUoB3Z,EAAoBC,GAVxC,OAUG2Z,EAVH,OAYHrY,EAAcF,KAAKwY,MAAMD,GAAgCpY,GAZtD,wBAcHgD,QAAQC,MAAR,kBAAyBxE,EAAKd,KAA9B,mBAdG,QAM0CjB,IAN1C,uBAkBX2T,EAAM4H,aAAaC,MAAMlH,QAlBd,4CAAH,sDA6BZ,OACI,kBAACyE,GAAD,KAEI,kBAACzD,GAAD,CAAoB7R,GAAG,mBAAmBpC,UAAW,CAAEJ,KAAMhC,EAAciC,OACvE,kBAACqY,GAAD,CAAgBC,SAAUwB,EAAYK,SAAUA,EAAUC,OAAQA,EAAQM,YAvClE,kBAAMX,GAAY,IAuC0EY,WAtC7F,kBAAMZ,GAAY,IAsCmGa,WArCrH,SAACnI,GAChBA,EAAM8B,mBAqCM,kBAAC,KAAD,MAAW,kBAAM,oCAAGnS,EAAMK,OAAO5D,KAAI,SAACyC,EAAGxC,GAAJ,OAAU,kBAACqa,GAAD,CAAoBpa,IAAKD,EAAGyD,GAAIzD,EAAGma,OAAQA,aAKlG,kBAACnB,GAAD,CAAgBC,MAAOA,GACnB,kBAACC,GAAD,KACI,kBAACC,GAAD,CAAoBC,MAAkB,KAAXe,EAAeja,MAAOia,EAAQzG,SAnBpD,SAACrN,GAAD,OAAsC0U,EAAU1U,EAAE0V,OAAO7b,UAoB9D,kBAACmZ,GAAD,CAAiB7G,OAAmB,KAAX2H,EAAetF,QArBpC,kBAAMkG,EAAU,MAsBhB,kBAAC,KAAD,CAAiBN,KAAMuB,SAG/B,kBAAC1C,GAAD,CAAmBzE,QAtBd,WACb,IAAMoH,EAAM3Y,EAAMC,SAAS,IAAIrE,EAAJ,oBAA2BoE,EAAMK,OAAOjE,UACnE4D,EAAMI,OAAOuY,KAoBiC,kBAAC,KAAD,CAAiBxB,KAAMyB,UEhG7E,I,GAAMC,GAAcC,QACa,cAA7BhJ,OAAOiJ,SAASC,UAEa,UAA7BlJ,OAAOiJ,SAASC,UAIV,OAFNlJ,OAAOiJ,SAASC,SAASzQ,MACrB,2DAKO,SAAS0Q,GAASC,GAC7B,GAA6C,kBAAmBC,UAAW,CAMvE,GAJkB,IAAIC,IAClBC,GACAvJ,OAAOiJ,SAAS3Z,YAENka,SAAWxJ,OAAOiJ,SAASO,OAIrC,OAGJxJ,OAAOC,iBAAiB,QAAQ,WAC5B,IAAMwJ,EAAK,UAAMF,GAAN,sBAEPR,KAsDhB,SAAiCU,EAAeL,GAE5CvW,MAAM4W,GACD3W,MAAK,SAAA4W,GAGsB,MAApBA,EAASC,SACwD,IAAjED,EAASE,QAAQC,IAAI,gBAAiBC,QAAQ,cAG9CT,UAAUU,cAAcC,MAAMlX,MAAK,SAAAmX,GAAY,OAC3CA,EAAaC,aACRpX,MAAK,WACFkN,OAAOiJ,SAASkB,eAE1BnX,OAAM,SAAAC,GAAC,OAAIC,QAAQC,MAAMF,MAG3BmX,GAAgBX,EAAOL,MAG9BpW,OAAM,WACHE,QAAQmX,IACJ,oEA3EAC,CAAwBb,EAAOL,GAI/BC,UAAUU,cAAcC,MAAMlX,MAAK,WAC/BI,QAAQmX,IACJ,+GAGLrX,OAAM,SAAAC,GAAC,OAAIC,QAAQC,MAAMF,OAG5BmX,GAAgBX,EAAOL,OAOvC,SAASgB,GAAgBX,EAAeL,GACpCC,UAAUU,cACLZ,SAASM,GACT3W,MAAK,SAAAmX,GACFA,EAAaM,cAAgB,WACzB,IAAMC,EAAmBP,EAAaQ,WACb,OAArBD,IACAA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBta,QAC0B,OAAvCmZ,UAAUU,cAAcY,YAKxBzX,QAAQmX,IAAI,6CACZjB,GAAmB,IAKnBlW,QAAQmX,IAAI,6CAOnCrX,OAAM,SAAAG,GACHD,QAAQC,MAAM,4CAA6CA,MC7ExD,SAASyX,GAAT,GAAyD,IAA/BnI,EAA8B,EAA9BA,KACrC,OACI,kBAAC,IAAD,CAAY8C,OAAQ9C,EAAM3C,MAAO+D,IAC7B,kBAACY,GAAD,KACI,kBAACC,GAAD,yCAGA,kBAACG,GAAD,eACW,kBAACC,GAAD,eADX,qBCfhB,IAgCe+F,GAhCM9I,YAAH,0qBCUH,SAAS+I,GAAT,GAA6D,IAAtCC,EAAqC,EAArCA,SAAUtI,EAA2B,EAA3BA,KACtCuI,EAAe,SAACC,GAAD,OAAqB,kBAAMF,EAASE,KAEzD,OACI,kBAAC,IAAD,CAAY1F,OAAQ9C,EAAM3C,MAAO+D,IAC7B,kBAACY,GAAD,KACI,kBAACC,GAAD,oFAGA,kBAACK,GAAD,KACI,kBAACI,GAAD,CAAsB1D,QAASuJ,GAAa,IAA5C,UACA,kBAAChG,GAAD,CAAavD,QAASuJ,GAAa,IAAnC,aCDb,IAAMnI,GAAuBxU,wBAAkD,CAAE0F,QAAS,OAEpFL,GAAqBrF,wBAAmD,EAAC,EAAO,eAG9E,SAAS6c,KACpB,IAAMhb,EAAQuD,qBAAWrF,GADC,EAGYoE,oBAAS,GAHrB,mBAGnBmB,EAHmB,KAGN0H,EAHM,KAKpB8P,EAAW7T,iBAA0B,MALjB,EAQoB9E,oBAAS,GAR7B,mBAQnB4Y,EARmB,KAQFhC,EARE,KAqB1BzW,qBAAU,WAEU0Y,iBAAO,CACnBC,SAAS,EACTC,QAASC,cAGbC,CAAQ,QAASvb,GAGjBiZ,GAASC,GAGTpT,SAAS0V,cAAgB,SAACzY,GACtBA,EAAEoP,oBAGP,IAtCuB,MAwCoB7P,mBAAoB,CAAE3E,KAAMhC,EAAciC,OAxC9D,mBAwCnBuX,EAxCmB,KAwCF1C,EAxCE,KA0C1B,OACI,kBAACrU,EAAD,KACI,kBAACuU,GAAqBjE,SAAtB,CAA+B9R,MAAOqe,GAClC,kBAACzX,GAAmBkL,SAApB,CAA6B9R,MAAO,CAAC6G,EAAa0H,IAE9C,kBAAC,GAAD,MACA,kBAACyG,GAAD,MAGA,kBAAC4F,GAAD,MACA,kBAAChF,GAAD,CAAsBC,mBAAoBA,IAC1C,kBAACyC,GAAD,CAAazC,mBAAoBA,EAAoB0C,gBAAiBA,IAGtE,kBAACxD,GAAD,MAGA,kBAAC,GAAD,CAAerM,IAAK2V,IAGpB,kBAACL,GAAD,CAAaC,SArDZ,SAACE,GACVA,GACA/X,QAAQmX,IAAI,qCAAsC,oBAClDpB,SAASkB,UAETjX,QAAQmX,IAAI,wBAAyB,oBAIzCjB,GAAmB,IA4C0B3G,KAAM2I,IAGvC,kBAACR,GAAD,CAAgBnI,KAAM9O,OCxF1CgY,IAAWC,cAAc,SAEzBC,IAAS1N,OACL,kBAAC+M,GAAD,MACAlV,SAAS8V,eAAe,W","file":"static/js/main.a9fe4271.chunk.js","sourcesContent":["/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { action, observable } from \"mobx\";\nimport { persist } from \"mobx-persist\";\nimport { createContext } from \"react\";\nimport CardGroup, { ICardGroupData } from \"./card/cardGroup\";\n\n/** The tag for the selection enum */\nexport enum SelectionType {\n    None = \"none\",\n    Group = \"group\",\n    Card = \"card\",\n}\n\n/** The user's selection */\nexport type Selection = {\n    /** The type of selection */\n    type: SelectionType.None;\n} | {\n    /** The type of selection */\n    type: SelectionType.Group;\n    /** The current selected group */\n    group: number;\n} | {\n    /** The type of selection */\n    type: SelectionType.Card;\n    /** The current selected group */\n    group: number;\n    /** The current selected card */\n    card: number;\n};\n\n/** The global state of the application */\nexport class GlobalState {\n    /** The current selection */\n    @observable @persist(\"object\")\n    private _selection: Selection = { type: SelectionType.None };\n    /** The groups of cards */\n    @observable @persist(\"list\", CardGroup)\n    private readonly _groups: CardGroup[] = [];\n\n    /** The current selection */\n    public get selection(): Selection {\n        return this._selection;\n    }\n\n    /** Select a group and or a card */\n    @action\n    public select(group?: number, card?: number) {\n        if (group === undefined) {\n            this._selection = { type: SelectionType.None };\n        } else if (card === undefined) {\n            this._selection = {\n                group,\n                type: SelectionType.Group\n            };\n        } else {\n            this._selection = {\n                card,\n                group,\n                type: SelectionType.Card\n            };\n        }\n    }\n\n    /** A way to set the selection directly */\n    @action\n    public setSelection(selection: Selection) {\n        this._selection = selection;\n    }\n\n    /** Add a group */\n    @action\n    public addGroup(group: CardGroup) {\n        return this._groups.push(group) - 1;\n    }\n\n    /** Remove a group */\n    @action\n    public removeGroup(group: number) {\n        return this._groups.splice(group, 1)[0];\n    }\n\n    /** Get a group */\n    public get groups() {\n        return this._groups;\n    }\n\n    /** Get a group */\n    public get groupsData(): ICardGroupData[] {\n        return this._groups.map(x => x.data);\n    }\n\n    /** Move a group */\n    @action\n    public moveGroup(oldpos: number, newpos: number) {\n        const [group] = this._groups.splice(oldpos, 1);\n        this._groups.splice(newpos, 0, group);\n    }\n}\n\n/** The global state context */\nexport const GlobalStateContext = createContext(new GlobalState());","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { action, observable } from \"mobx\";\nimport { persist } from \"mobx-persist\";\nimport ICard from \"./card\";\n\n/** The persistant data of a card group */\nexport interface ICardGroupData {\n    /** The name of the group */\n    readonly name: string;\n    /** The defaults for the cards */\n    readonly defaults: Partial<ICard>;\n    /** The child cards of the group */\n    readonly cards: ICard[];\n}\n\n/** The defaults that can be from a card group */\ntype ICardGroupDefaults = Omit<ICard, \"name\">;\n\n/** A group of cards */\nexport default class CardGroup {\n    /** The name of the group */\n    @observable @persist\n    public name: string;\n    /** The defaults for the cards */\n    @observable @persist(\"object\")\n    public defaults: ICardGroupDefaults;\n    /** The child cards of the group */\n    @observable @persist(\"list\")\n    private readonly _cards: ICard[];\n\n    constructor(name = \"\", defaults: ICardGroupDefaults = {}, cards: ICard[] = []) {\n        this.name = name;\n        this._cards = cards;\n        this.defaults = defaults;\n    }\n\n    /** Create a card group from a data object */\n    public static fromData(data: ICardGroupData) {\n        return new CardGroup(data.name, data.defaults, data.cards);\n    }\n\n    /** Method to get the jsonifyable data for the group */\n    public get data(): ICardGroupData {\n        return {\n            cards: this._cards,\n            defaults: this.defaults,\n            name: this.name\n        };\n    }\n\n    /** Add a card to the group */\n    @action\n    public addCard(card: ICard = { name: `New Card ${this._cards.length}` }) {\n        return this._cards.push(card) - 1;\n    }\n\n    /** Move a cards position */\n    @action\n    public moveCard(oldpos: number, newpos: number): this {\n        const [card] = this._cards.splice(oldpos, 1);\n        this._cards.splice(newpos, 0, card);\n\n        return this;\n    }\n\n    /** Get the cards stored in the group */\n    public get cards(): ICard[] {\n        return this._cards.map(card => ({ ...this.defaults, ...card }));\n    }\n\n    /** Get the cards stored in the group without their defaults applied */\n    public get rawCards(): ICard[] {\n        return this._cards;\n    }\n\n    /** Remove a card from the group */\n    @action\n    public removeCard(i: number): ICard {\n        return this._cards.splice(i, 1)[0];\n    }\n\n    /** Change the value of a card in the group */\n    @action\n    public editCard<K extends keyof ICard>(card: number, key: K, value: ICard[K]) {\n        this._cards[card] = Object.entries({ ...this._cards[card], [key]: value })\n            // Remove undefined props\n            .filter(([, v]) => v !== undefined)\n            .reduce<ICard>((pre, [k, v]) => ({ ...pre, [k]: v }), {} as unknown as ICard);\n    }\n\n    /** Change the value of the groups defaults */\n    @action\n    public editDefaults<K extends keyof ICard>(key: K, value: ICard[K]) {\n        this.defaults = Object.entries({ ...this.defaults, [key]: value })\n            // Remove undefined props\n            .filter(([, v]) => v !== undefined)\n            .reduce<Partial<ICard>>((pre, [k, v]) => ({ ...pre, [k]: v }), {});\n    }\n\n    /** Change the value of the groups defaults */\n    @action\n    public editName(name: string) {\n        this.name = name;\n    }\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport styled from \"styled-components\";\n\n/** The main app container */\nexport const AppContainer = styled.div`\n    position: absolute;\n\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n\n    display: grid;\n    grid-template-columns: 250px auto 300px;\n    grid-template-rows: 100%;\n    grid-column-gap: 3px;\n\n    min-width: 800px;\n    height: 100%;\n    width: 100%;\n\n    background: #202020;\n`;\n\n/** The container for the rendered card views */\nexport const CardContainer = styled.div`\n    grid-column: 3;\n\n    overflow-y: auto;\n    overflow-x: hidden;\n    scrollbar-width: none;\n`;","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { saveAs } from \"file-saver\";\nimport ICard from \"../card/card\";\nimport CardGroup, { ICardGroupData } from \"../card/cardGroup\";\nimport { GlobalState, SelectionType } from \"../state\";\n\n/** Helper to create a file reader that is async and reads text */\nexport async function textFileReaderAsync(file: Blob) {\n    return new Promise<string>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsText(file);\n        reader.onload = (_) => {\n            if (reader.result !== null) {\n                resolve(reader.result.toString());\n            } else {\n                reject(new Error(\"No result\"));\n            }\n        };\n        reader.onerror = reject;\n    });\n}\n\n/** Helper that can create a file reader that is async and reads data */\nexport async function dataFileReaderAsync(file: Blob) {\n    return new Promise<string>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = (_) => {\n            if (reader.result !== null) {\n                resolve(reader.result.toString());\n            } else {\n                reject(new Error(\"No result\"));\n            }\n        };\n        reader.onerror = reject;\n    });\n}\n\n/** The structure for a downloaded file */\nexport type DownloadSelection = {\n    /** The type of selection */\n    type: SelectionType.None;\n    /** All groups */\n    data: ICardGroupData[];\n} | {\n    /** The type of selection */\n    type: SelectionType.Group;\n    /** The group */\n    data: ICardGroupData;\n} | {\n    /** The type of selection */\n    type: SelectionType.Card;\n    /** The card */\n    data: ICard;\n};\n\n/** Helper to download a file */\nexport function downloadSelection(file: DownloadSelection, filename: string) {\n    saveAs(new Blob([JSON.stringify(file)], { type: \"application/json\" }), filename);\n}\n\n/** Helper to load a file */\nexport function loadSelection(file: DownloadSelection, state: GlobalState) {\n    if (file.type === SelectionType.None) {\n        for (const group of file.data) {\n            state.addGroup(CardGroup.fromData(group));\n        }\n    } else if (file.type === SelectionType.Group) {\n        const id = state.addGroup(CardGroup.fromData(file.data));\n        state.select(id);\n    } else {\n        if (state.selection.type === SelectionType.Card || state.selection.type === SelectionType.Group) {\n            const id = state.groups[state.selection.group].addCard(file.data);\n            state.select(state.selection.group, id);\n        } else {\n            alert(\"Attempted to add a card when no group is selected\");\n        }\n    }\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\n/** Helper to create and load an image async */\nexport async function createImageAsync(src: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.src = src;\n        image.onload = () => resolve(image);\n        image.onerror = reject;\n    });\n}\n\n/** Helper to async create blob from canvas */\nexport async function canvasToBlobAsync(canvas: HTMLCanvasElement): Promise<Blob> {\n    return new Promise((resolve, reject) => {\n        canvas.toBlob((v) => v === null ? reject() : resolve(v), \"image/png\");\n    });\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport styled from \"styled-components\";\n\n/** The view container for the rendered card svg */\nexport const RenderedCard = styled.svg.attrs({\n    fontFamily: \"Modesto-Regular\",\n    height: 700,\n    version: \"1.1\",\n    viewBox: \"0 0 50 70\",\n    width: 500,\n    xmlns: \"http://www.w3.org/2000/svg\",\n})`\n    width: 300px;\n    height: calc(300px * 7/5);\n\n    user-select: none;\n`;\n\n/** Text for use on a card */\nexport const CardText = styled.text.attrs(props => ({\n    fontFamily: props.fontFamily ?? \"Open Sans\",\n    fontSize: props.fontSize ?? 2,\n    textAnchor: props.textAnchor ?? \"middle\"\n}))``;\n\n/** Text for use on a card on a colored background */\nexport const CardTextInverted = styled(CardText).attrs({\n    fontFamily: \"Open Sans SemiBold\"\n})``;\n\n/** Text with the expanded font */\nexport const ExpandedText = styled(CardText).attrs({\n    fontFamily: \"Modesto-Expd\"\n})``;","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\n/** Add a suffix to a number */\nexport function ordinalSuffixOf(i: number) {\n    const j = i % 10;\n    const k = i % 100;\n    if (j === 1 && k !== 11) {\n        return `${i}st`;\n    }\n    if (j === 2 && k !== 12) {\n        return `${i}nd`;\n    }\n    if (j === 3 && k !== 13) {\n        return `${i}rd`;\n    } else {\n        return `${i}th`;\n    }\n}\n\n/** Replace `- ` and `* ` with a bullet */\nexport function bulletLists(text: string): string {\n    return text.replace(/^(\\*|-)(?= )/img, \"\\u2022\");\n}\n\n/** Hash a string */\nexport function hashCode(s: string) {\n    let hash = 0;\n    let chr;\n    for (let i = 0; i < s.length; i++) {\n        chr = s.charCodeAt(i);\n        hash = ((hash << 5) - hash) + chr; // tslint:disable-line no-bitwise\n        hash |= 0; // tslint:disable-line no-bitwise // Convert to 32bit integer\n    }\n\n    return hash;\n}\n","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { useEffect, useState } from \"react\";\nimport { dataFileReaderAsync } from \"../../util/file\";\n\n/** Style section for the svgs */\nexport default function useEmbeddedFont() {\n    const [fonts, setFonts] = useState<[string, string, string, string]>();\n\n    useEffect(() => {\n        Promise.all([\n            fetch(\"/fonts/Modesto-Expd.ttf\")\n                .then(x => x.blob())\n                .then(dataFileReaderAsync),\n            fetch(\"/fonts/Modesto-Regular.ttf\")\n                .then(x => x.blob())\n                .then(dataFileReaderAsync),\n            fetch(\"/fonts/OpenSans-Regular.ttf\")\n                .then(x => x.blob())\n                .then(dataFileReaderAsync),\n            fetch(\"/fonts/OpenSans-SemiBold.ttf\")\n                .then(x => x.blob())\n                .then(dataFileReaderAsync)\n        ]).then(setFonts)\n            .catch(e => console.error(e));\n    }, []);\n\n    if (fonts === undefined) {\n        return null;\n    }\n\n    const [ModestoRegular, ModestoExpd, OpenSansRegular, OpenSansSemiBold] = fonts;\n\n    return `\n        @font-face {\n            font-family: \"Modesto-Expd\";\n            src: url(\"${ModestoRegular}\");\n        }\n\n        @font-face {\n            font-family: \"Modesto-Regular\";\n            src: url(\"${ModestoExpd}\");\n        }\n\n        @font-face {\n            font-family: \"Open Sans\";\n            src: url(\"${OpenSansRegular}\");\n        }\n\n        @font-face {\n            font-family: \"Open Sans SemiBold\";\n            src: url(\"${OpenSansSemiBold}\");\n        }\n    `;\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { useObserver } from \"mobx-react-lite\";\nimport React, { forwardRef, useContext, useLayoutEffect, useMemo } from \"react\";\nimport { IsRenderingContext } from \"../../App\";\nimport { GlobalStateContext, SelectionType } from \"../../state\";\nimport { RenderedCard } from \"../../styles/renderedCard\";\nimport { hashCode } from \"../../util/string\";\nimport { BackRenderedCallbackContext } from \"./RenderedCards\";\nimport useEmbeddedFont from \"./useEmbeddedFont\";\n\n/** The more dynamic part of the card back */\nfunction CardBackDyn() {\n    const state = useContext(GlobalStateContext);\n    const [isRendering] = useContext(IsRenderingContext);\n\n    const rendered = useContext(BackRenderedCallbackContext);\n\n    useLayoutEffect(rendered.current);\n\n    const card = useObserver(() =>\n        state.selection.type === SelectionType.Card\n            ? state.groups[state.selection.group].cards[state.selection.card]\n            : state.selection.type === SelectionType.Group\n                ? state.groups[state.selection.group].defaults\n                : { name: \"No Selection\" }\n    );\n    const hash = useMemo(() => hashCode(card.image ?? \"\"), [card.image]);\n\n    return useObserver(() => {\n        const color = card.color ?? \"#000000\";\n\n        return (\n            <>\n                {/* Frame */}\n                <rect width=\"50\" height=\"70\" fill={color} />\n\n                {/* Background */}\n                <rect width=\"46\" height=\"66\" x=\"2\" y=\"2\" rx=\"2\" ry=\"2\" fill=\"white\" />\n\n                {/* Rounded line */}\n                <rect width=\"40\" height=\"60\" x=\"5\" y=\"5\" rx=\"2\" ry=\"2\" stroke={color} strokeWidth=\"0.5\" fill=\"transparent\" />\n\n                {/* Rhombus */}\n                <polyline points=\"5.25,35 25,5.25 45,34.75 25,64.75 5.25,35\" fill=\"transparent\" stroke={color} strokeWidth=\".5\" />\n\n                {/* Card level top right */}\n                <text fontSize=\"10\" fill={color} x=\"38\" y=\"15\" textAnchor=\"middle\">{card.level}</text>\n                {/* Card level bottom left */}\n                <text fontSize=\"10\" fill={color} x=\"12\" y=\"62\" textAnchor=\"middle\">{card.level}</text>\n\n                {/* Card image */}\n                {isRendering ? <image href={card.image} width=\"25\" height=\"25\" x=\"12.5\" y=\"22.5\" /> : <use href={`#${hash}`} />}\n            </>\n        );\n    });\n}\n\n/** A component that contains hidden images to preload them into memory */\nfunction CardImagePreloader() {\n    const state = useContext(GlobalStateContext);\n\n    return useObserver(() => {\n        const preloadedImages = new Map<number, JSX.Element>();\n\n        for (const g of state.groups) {\n            for (const c of g.cards) {\n                if (c.image !== undefined) {\n                    const hash = hashCode(c.image);\n                    if (!preloadedImages.has(hash)) {\n                        preloadedImages.set(hash, <image key={hash} id={hash.toString()} href={c.image} width=\"25\" height=\"25\" x=\"12.5\" y=\"22.5\" />);\n                    }\n                }\n            }\n        }\n\n        return <>{Array.from(preloadedImages.values())}</>;\n    });\n}\n\n/** The back face of the card */\nconst CardBack = forwardRef<SVGSVGElement>((_, ref) => {\n    const [isRendering] = useContext(IsRenderingContext);\n\n    const fonts = useEmbeddedFont();\n\n    return (\n        <RenderedCard ref={ref}>\n            <defs>\n                {isRendering ? null : <CardImagePreloader />}\n                <style>{fonts}</style>\n            </defs>\n\n            <CardBackDyn />\n        </RenderedCard>\n    );\n});\n\nexport default CardBack;","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\n/** Helper function to achieve word wrapping */\nexport function wordWrapSVG(text: string, width: number, outputElement: SVGTextElement) {\n    return text.replace(\"\\r\", \"\").split(\"\\n\").map((x, i) => wordWrapOneLineSVG(x, width, outputElement, i !== 0)).reduce((a, b) => a + b);\n}\n\n/** Helper Function to wrap one continous line of text in an svg */\nfunction wordWrapOneLineSVG(text: string, width: number, outputElement: SVGTextElement, initialOffset = false) {\n    const words = text.split(\" \");\n    let elems = 0;\n\n    let tspanElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");   // Create first tspan element\n    let textNode = document.createTextNode(words[0]);           // Create text in tspan element\n\n    if (initialOffset) {\n        tspanElement.setAttribute(\"x\", outputElement.x.baseVal[0].valueAsString);\n        tspanElement.setAttribute(\"dy\", outputElement.attributes.getNamedItem(\"font-size\")?.value ?? \"\");\n\n        elems++;\n    }\n\n    tspanElement.appendChild(textNode);                     // Add tspan element to DOM\n    outputElement.appendChild(tspanElement);                        // Add text to tspan element\n\n    if (!words.some(x => x.length > 0)) {\n        tspanElement.textContent = \"\\x20\";\n\n        return parseFloat(outputElement.attributes.getNamedItem(\"font-size\")?.value ?? \"0\");\n    }\n\n    for (let i = 1; i < words.length; i++) {\n        if (tspanElement.firstChild === null || tspanElement.firstChild.textContent === null) {\n            console.error(\"TSPAN element has no first child\", tspanElement);\n\n            return elems * parseFloat(outputElement.attributes.getNamedItem(\"font-size\")?.value ?? \"0\");\n        }\n\n        const len = tspanElement.firstChild?.textContent?.length;             // Find number of letters in string\n        tspanElement.firstChild.textContent += ` ${words[i]}`;            // Add next word\n\n        if (tspanElement.getComputedTextLength() > width) {\n            tspanElement.firstChild.textContent = tspanElement.firstChild.textContent.slice(0, len);    // Remove added word\n\n            tspanElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");       // Create new tspan element\n            tspanElement.setAttribute(\"x\", outputElement.x.baseVal[0].valueAsString);\n            tspanElement.setAttribute(\"dy\", outputElement.attributes.getNamedItem(\"font-size\")?.value ?? \"\");\n            textNode = document.createTextNode(words[i]);\n\n            tspanElement.appendChild(textNode);\n            outputElement.appendChild(tspanElement);\n\n            elems++;\n        }\n    }\n\n    return elems * parseFloat(outputElement.attributes.getNamedItem(\"font-size\")?.value ?? \"0\");\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { useObserver } from \"mobx-react-lite\";\nimport React, { forwardRef, useContext, useEffect, useRef } from \"react\";\nimport { GlobalStateContext, SelectionType } from \"../../state\";\nimport { CardText, CardTextInverted, ExpandedText, RenderedCard } from \"../../styles/renderedCard\";\nimport { bulletLists, ordinalSuffixOf } from \"../../util/string\";\nimport { wordWrapSVG } from \"../../util/wordWrap\";\nimport { FrontRenderedCallbackContext } from \"./RenderedCards\";\nimport useEmbeddedFont from \"./useEmbeddedFont\";\n\n/** The front face of the card */\nconst CardFront = forwardRef<SVGSVGElement>((_, ref) => {\n    const state = useContext(GlobalStateContext);\n\n    const rendered = useContext(FrontRenderedCallbackContext);\n\n    // Refs to wrappable words\n    const physComponentsRef = useRef<SVGTextElement>(null);\n    const physComponentsBackgroundRef = useRef<SVGRectElement>(null);\n    const descriptionRef = useRef<SVGTextElement>(null);\n    const extDescriptionRef = useRef<SVGTextElement>(null);\n    const extDescriptionTitleRef = useRef<SVGGElement>(null);\n\n    // Card selection\n    const card = useObserver(() =>\n        state.selection.type === SelectionType.Card\n            ? state.groups[state.selection.group].cards[state.selection.card]\n            : state.selection.type === SelectionType.Group\n                ? { name: state.groups[state.selection.group].name, ...state.groups[state.selection.group].defaults }\n                : { name: \"No Selection\" }\n    );\n\n    const fonts = useEmbeddedFont();\n\n    // Apply word wrapping to text\n    useEffect(() => {\n        if (fonts === null) {\n            return undefined;\n        }\n        // Collective hight of blocks\n        let currHeight = 0;\n\n        // Aliases for refs\n        const physComp = physComponentsRef.current;\n        const physCompBkg = physComponentsBackgroundRef.current;\n        const desc = descriptionRef.current;\n        const extDesc = extDescriptionRef.current;\n        const extDescTitle = extDescriptionTitleRef.current;\n\n        if (physCompBkg !== null) {\n            if (card.physicalComponents !== undefined && physComp !== null) {\n                const height = wordWrapSVG(bulletLists(card.physicalComponents), 44, physComp);\n\n                physCompBkg.setAttribute(\"height\", (height + 4).toString());\n                physCompBkg.removeAttribute(\"display\");\n\n                currHeight += height + 3.5;\n            } else {\n                physCompBkg.setAttribute(\"display\", \"none\");\n            }\n        }\n\n        if (card.description !== undefined && desc !== null) {\n            desc.setAttribute(\"dy\", currHeight.toString());\n            const height = wordWrapSVG(bulletLists(card.description), 44, desc);\n\n            currHeight += height;\n        }\n\n        if (extDescTitle !== null) {\n            if (card.extDescription !== undefined && extDesc !== null) {\n                const height = wordWrapSVG(bulletLists(card.extDescription), 44, extDesc);\n                extDesc.setAttribute(\"y\", (65 - height).toString());\n                extDescTitle.setAttribute(\"transform\", `translate(0, ${(62 - height)})`);\n                extDescTitle.removeAttribute(\"display\");\n            } else {\n                extDescTitle.setAttribute(\"display\", \"none\");\n            }\n        }\n\n        rendered.current();\n\n        return () => {\n            if (physComp !== null) {\n                physComp.innerHTML = \"\";\n            }\n            if (desc !== null) {\n                desc.innerHTML = \"\";\n            }\n            if (extDesc !== null) {\n                extDesc.innerHTML = \"\";\n            }\n        };\n    }, [\n        card,\n        rendered,\n        descriptionRef,\n        extDescriptionRef,\n        extDescriptionTitleRef,\n        physComponentsBackgroundRef,\n        physComponentsRef,\n        fonts\n    ]);\n\n    return useObserver(() => {\n        const durationConc = card.duration !== undefined && card.duration.toLowerCase().match(/^concentration(,)? /) !== null;\n        const duration = durationConc ? card.duration?.replace(/^concentration(,)? /i, \"\") : card.duration;\n        const durationCap = `${duration?.charAt(0).toUpperCase() ?? \"\"}${duration?.slice(1) ?? \"\"}`;\n\n        const cardLevel = parseInt(card.level !== undefined ? card.level : \"0\", 10);\n        const cardType = !isNaN(cardLevel) ? cardLevel === 0 ? `${card.type} cantrip` : `${ordinalSuffixOf(cardLevel)} level ${card.type}` : undefined;\n\n        const color = card.color ?? \"#000000\";\n\n        return (\n            <RenderedCard ref={ref}>\n                <defs>\n                    <style>{fonts}</style>\n                </defs>\n                {/* Frame */}\n                <rect width=\"50\" height=\"70\" fill={color} />\n                {/* Background */}\n                <rect width=\"46\" height=\"64\" x=\"2\" y=\"2\" rx=\"2\" ry=\"2\" fill=\"white\" />\n\n                {/* Sections */}\n                <line x1=\"0\" y1=\"9\" x2=\"50\" y2=\"9\" stroke={color} strokeWidth=\".3\" />\n                <line x1=\"0\" y1=\"16\" x2=\"50\" y2=\"16\" stroke={color} strokeWidth=\".3\" />\n                <line x1=\"0\" y1=\"23\" x2=\"50\" y2=\"23\" stroke={color} strokeWidth=\".3\" />\n                <line x1=\"25\" y1=\"9\" x2=\"25\" y2=\"23\" stroke={color} strokeWidth=\".3\" />\n\n                {/* Title */}\n                <ExpandedText fill={color} fontSize=\"4\" x=\"25\" y=\"6.75\">{card.name}</ExpandedText>\n\n                {/* Casting Time */}\n                <ExpandedText fill={color} x=\"13.5\" y=\"12\">CASTING TIME</ExpandedText>\n                <CardText x=\"13.5\" y=\"14.6\">{card.castingTime}</CardText>\n\n                {/* Range */}\n                <ExpandedText fill={color} x=\"36.5\" y=\"12\">RANGE</ExpandedText>\n                <CardText x=\"36.5\" y=\"14.6\" >{card.range}</CardText>\n\n                {/* Components */}\n                <ExpandedText fill={color} x=\"13.5\" y=\"19\" >COMPONENTS</ExpandedText>\n                <CardText x=\"13.5\" y=\"21.6\">{card.components}</CardText>\n\n                {/* Duration */}\n                <ExpandedText fill={color} x=\"36.5\" y=\"19\" >DURATION</ExpandedText>\n                <CardText x=\"36.5\" y=\"21.6\" >{durationCap}</CardText>\n                {/* Duration Concentration */}\n                <g display={durationConc ? undefined : \"none\"}>\n                    <polygon points=\"45.5,17 43.5,19.5 45.5,22 47.5,19.5 45.5,17\" fill={color} />\n                    <ExpandedText x=\"45.5\" y=\"19.5\" dominantBaseline=\"middle\" fill=\"#ffffff\">C</ExpandedText>\n                </g>\n\n                {/* Physical Components */}\n                <rect width=\"50\" height=\"3.5\" y=\"23\" fill={color} ref={physComponentsBackgroundRef} />\n                <CardTextInverted x=\"3\" y=\"25.6\" ref={physComponentsRef} fill=\"#ffffff\" textAnchor=\"right\" />\n\n                {/* Description */}\n                <CardText x=\"3\" y=\"25.5\" ref={descriptionRef} textAnchor=\"right\" />\n\n                {/* Extended Description */}\n                <g ref={extDescriptionTitleRef}>\n                    <rect width=\"50\" height=\"3.5\" y=\"-3\" fill={color} />\n                    <ExpandedText letterSpacing=\".1\" y=\"-.4\" x=\"25\" fill=\"#ffffff\">At Higher Levels</ExpandedText>\n                </g>\n                <CardText x=\"3\" ref={extDescriptionRef} textAnchor=\"right\" />\n\n                {/* Card class */}\n                <ExpandedText fill=\"white\" x=\"2.5\" y=\"68.5\" textAnchor=\"left\">{card.clazz}</ExpandedText>\n\n                {/* Card type */}\n                <CardTextInverted fill=\"white\" x=\"48\" y=\"68.5\" textAnchor=\"end\">{cardType}</CardTextInverted>\n            </RenderedCard>\n        );\n    });\n});\n\nexport default CardFront;","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { Content } from \"pdfmake/interfaces\";\n\n/** The margin, in points, of the page (https://stackoverflow.com/a/3513476) */\nconst PRINT_PAGE_MARGIN = 0.25 * 72; // 1 inch = 72 pts\n\n/** The width, in points, of a letter page */\nconst LETTER_PAPER_WIDTH = 612;\n/** The height, in points, of a letter page */\nconst LETTER_PAPER_HEIGHT = 792;\n\n/** The width of a card tile for a double sided layout */\nconst CARD_TILE_WIDTH = (LETTER_PAPER_WIDTH - (PRINT_PAGE_MARGIN * 2)) / 3;\n/** The height of a card tile for a double sided layout */\nconst CARD_TILE_HEIGHT = (LETTER_PAPER_HEIGHT - (PRINT_PAGE_MARGIN * 2)) / 3;\n\n/** The printed card width */\nconst PRINT_CARD_WIDTH = (CARD_TILE_HEIGHT / 70) * 50;\n/** The printed card height */\nconst PRINT_CARD_HEIGHT = CARD_TILE_HEIGHT;\n\n/** Method to order the cards in a double sided arrangement */\nexport function doubleSideOrdering(cards: Array<[string, string]>) {\n    return cards.map<[Content, Content]>(([front, back], i) => {\n        const cardXIdx = i % 3;\n        const cardYIdx = Math.floor(i / 3) % 3;\n\n        // Calculate the Y of the card\n        const cardY = (cardYIdx * CARD_TILE_HEIGHT) + PRINT_PAGE_MARGIN;\n        // Calculate the X of the card\n        const cardX = (cardXIdx * CARD_TILE_WIDTH) + PRINT_PAGE_MARGIN;\n\n        return [\n            {\n                // Set the front's position\n                absolutePosition: {\n                    x: cardX,\n                    y: cardY\n                },\n                height: CARD_TILE_HEIGHT,\n                svg: front,\n                width: CARD_TILE_WIDTH,\n            },\n            {\n                // Set the cards position, reversing direction\n                absolutePosition: {\n                    x: (CARD_TILE_WIDTH * 2) - cardX,\n                    y: cardY\n                },\n                height: CARD_TILE_HEIGHT,\n                // Add a page break before the card if first and after the card if last but not if it is the last card\n                pageBreak:\n                    i === cards.length - 1 ? undefined :\n                        cardYIdx === 0 && cardXIdx === 0\n                            ? \"before\"\n                            : cardYIdx === 2 && cardXIdx === 2\n                                ? \"after\"\n                                : undefined,\n                svg: back,\n                width: CARD_TILE_WIDTH\n            },\n        ];\n    }).reduce<[Content[], Content[], Content[]]>(([done, fronts, backs], [front, back], i) => {\n        // Interweave the fronts and backs for a double sided print\n        if (i % 9 === 0) {\n            return [[...done, ...fronts, ...backs], [front], [back]];\n        } else {\n            return [done, [...fronts, front], [...backs, back]];\n        }\n    }, [[], [], []]);\n}\n\n/** Method to order the cards in a foldable arrangement */\nexport function foldableOrdering(cards: Array<[string, string]>) {\n    return cards.map<[Content, Content]>(([front, back], i) => {\n        const cardYIdx = i % 3;\n\n        // Calculate the Y of the card\n        const cardY = (cardYIdx * PRINT_CARD_HEIGHT) + PRINT_PAGE_MARGIN;\n\n        return [\n            {\n                // Set the front's position\n                absolutePosition: {\n                    x: PRINT_PAGE_MARGIN,\n                    y: cardY\n                },\n                height: PRINT_CARD_HEIGHT,\n                svg: front,\n                width: PRINT_CARD_WIDTH,\n            },\n            {\n                // Set the cards position\n                absolutePosition: {\n                    x: PRINT_CARD_WIDTH + PRINT_PAGE_MARGIN,\n                    y: cardY\n                },\n                height: PRINT_CARD_HEIGHT,\n                pageBreak:\n                    cardYIdx === 2 && i !== cards.length - 1\n                        ? \"after\"\n                        : undefined,\n                svg: back,\n                width: PRINT_CARD_WIDTH\n            },\n        ];\n    });\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport JSZip from \"jszip\";\nimport pdfMake from \"pdfmake/build/pdfmake\";\nimport { Content } from \"pdfmake/interfaces\";\nimport React, { createContext, forwardRef, MutableRefObject, useCallback, useContext, useEffect, useImperativeHandle, useRef } from \"react\";\nimport { IsRenderingContext } from \"../../App\";\nimport { GlobalState, GlobalStateContext, Selection, SelectionType } from \"../../state\";\nimport { CardContainer } from \"../../styles/app\";\nimport { dataFileReaderAsync } from \"../../util/file\";\nimport { canvasToBlobAsync, createImageAsync } from \"../../util/image\";\nimport CardBack from \"./CardBack\";\nimport CardFront from \"./CardFront\";\nimport { doubleSideOrdering, foldableOrdering } from \"./cardOrdering\";\n\n/** The width of the resulting rasters */\nconst RASTER_WIDTH = 1500;\n/** The height of the resulting rasters */\nconst RASTER_HEIGHT = 2100;\n\n/** The ref exposed by thr Rendered Cards component */\nexport interface IRenderedCardsRef {\n    /** Render/Rasterize the card */\n    render(selection: Selection): Promise<void>;\n    /** Print the card in a double sided arrangement */\n    printDoubleSided(selection: Selection): Promise<void>;\n    /** Print the card in a foldable arrangement */\n    printFoldable(selection: Selection): Promise<void>;\n}\n\n/** The rendered callback context for the front of the card */\nexport const FrontRenderedCallbackContext = createContext<MutableRefObject<() => void>>({ current: () => void 0 });\n/** The rendered callback context for the back of the card */\nexport const BackRenderedCallbackContext = createContext<MutableRefObject<() => void>>({ current: () => void 0 });\n\n/** The rendered cards container and manager */\nconst RenderedCards = forwardRef<IRenderedCardsRef>((_, ref) => {\n    const frontRef = useRef<SVGSVGElement>(null);\n    const backRef = useRef<SVGSVGElement>(null);\n\n    const frontRenderedCallback = useRef<() => void>(() => void 0);\n    const backRenderedCallback = useRef<() => void>(() => void 0);\n\n    const state = useContext(GlobalStateContext);\n    const [, setIsRendering] = useContext(IsRenderingContext);\n\n    useEffect(() => {\n        Promise.all([\n            fetch(\"/fonts/Modesto-Expd.ttf\").then(x => x.blob()).then(dataFileReaderAsync),\n            fetch(\"/fonts/Modesto-Regular.ttf\").then(x => x.blob()).then(dataFileReaderAsync),\n            fetch(\"/fonts/OpenSans-Regular.ttf\").then(x => x.blob()).then(dataFileReaderAsync),\n            fetch(\"/fonts/OpenSans-SemiBold.ttf\").then(x => x.blob()).then(dataFileReaderAsync)\n        ]).then(([expd, regular, sans, sansSemi]) => {\n            pdfMake.vfs = {\n                \"Modesto-Expd.ttf\": expd.substring(expd.lastIndexOf(\",\") + 1),\n                \"Modesto-Regular.ttf\": regular.substring(regular.lastIndexOf(\",\") + 1),\n                \"OpenSans-Regular.ttf\": sans.substring(sans.lastIndexOf(\",\") + 1),\n                \"OpenSans-SemiBold.ttf\": sansSemi.substring(sansSemi.lastIndexOf(\",\") + 1)\n            };\n            pdfMake.fonts = {\n                \"Modesto-Expd\": {\n                    normal: \"Modesto-Expd.ttf\"\n                },\n                \"Modesto-Regular\": {\n                    normal: \"Modesto-Regular.ttf\"\n                },\n                \"Open Sans\": {\n                    normal: \"OpenSans-Regular.ttf\"\n                },\n                \"Open Sans SemiBold\": {\n                    normal: \"OpenSans-SemiBold.ttf\",\n                }\n            };\n        }).catch(e => console.error(e));\n    }, []);\n\n    const selectAsync = useCallback((...args: Parameters<GlobalState[\"select\"]>) => Promise.race([\n        new Promise((resolve) => {\n            frontRenderedCallback.current = () => {\n                frontRenderedCallback.current = () => void 0;\n                backRenderedCallback.current = () => void 0;\n                resolve(undefined);\n            };\n\n            state.select(...args);\n        }),\n        new Promise((resolve) => {\n            backRenderedCallback.current = () => {\n                frontRenderedCallback.current = () => void 0;\n                backRenderedCallback.current = () => void 0;\n                resolve(undefined);\n            };\n        }),\n        new Promise((resolve) => setTimeout(() => resolve(undefined), 1000))\n    ]), [state, frontRenderedCallback, backRenderedCallback]);\n\n    const getCurrentSelectedSVGs = useCallback((): [string, string] => {\n        // Make sure the svgs are actually rendered\n        if (frontRef.current === null || backRef.current === null) {\n            throw new ReferenceError(\"Attempted to render while the card was not rendered, please try again.\");\n        }\n\n        // Setup exportable svg for the sides\n        const svgFront = `<?xml version=\"1.0\" encoding=\"utf-8\"?>${frontRef.current.outerHTML}`;\n        const svgBack = `<?xml version=\"1.0\" encoding=\"utf-8\"?>${backRef.current.outerHTML}`;\n\n        return [svgFront, svgBack];\n    }, [frontRef, backRef]);\n\n    const renderCurrentSelection = useCallback(async (zip: JSZip = new JSZip()) => {\n        // Create the rasterizing canvas\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = RASTER_WIDTH;\n        canvas.height = RASTER_HEIGHT;\n        // Get the rendering context\n        const context = canvas.getContext(\"2d\");\n\n        // Make sure the context exists\n        if (context === null) {\n            throw new ReferenceError(\"Could not load canvas 2d context\");\n        }\n\n        const [svgFront, svgBack] = getCurrentSelectedSVGs();\n\n        // Save the vector images\n        zip.file(\"front.svg\", svgFront);\n        zip.file(\"back.svg\", svgBack);\n\n        // Create rasterable Image objects from the svg\n        const imageFront = await createImageAsync(`data:image/svg+xml;utf8,${encodeURIComponent(svgFront)}`);\n        const imageBack = await createImageAsync(`data:image/svg+xml;utf8,${encodeURIComponent(svgBack)}`);\n\n        // Rasterize the front of the card\n        context?.drawImage(imageFront, 0, 0, RASTER_WIDTH, RASTER_HEIGHT);\n        zip.file(\"front.png\", await canvasToBlobAsync(canvas));\n\n        // Rasterize the back of the card\n        context?.drawImage(imageBack, 0, 0, RASTER_WIDTH, RASTER_HEIGHT);\n        zip.file(\"back.png\", await canvasToBlobAsync(canvas));\n\n        // Rasterize the sides in a row formation\n        canvas.width = RASTER_WIDTH * 2;\n        canvas.height = RASTER_HEIGHT;\n        context?.drawImage(imageFront, 0, 0, RASTER_WIDTH, RASTER_HEIGHT);\n        context?.drawImage(imageBack, RASTER_WIDTH, 0, RASTER_WIDTH, RASTER_HEIGHT);\n        zip.file(\"row.png\", await canvasToBlobAsync(canvas));\n\n        // Rasterize the sides in a column formation\n        canvas.width = RASTER_WIDTH;\n        canvas.height = RASTER_HEIGHT * 2;\n        context?.drawImage(imageFront, 0, 0, RASTER_WIDTH, RASTER_HEIGHT);\n        context?.drawImage(imageBack, 0, RASTER_HEIGHT, RASTER_WIDTH, RASTER_HEIGHT);\n        zip.file(\"column.png\", await canvasToBlobAsync(canvas));\n\n        // Remove the canvas from the DOM\n        canvas.remove();\n\n        // Return the packaged zip\n        return zip;\n    }, [getCurrentSelectedSVGs]);\n\n    const print = useCallback((ordering: (cards: Array<[string, string]>) => Content) => async (selection: Selection) => {\n        // Move into rendering mode\n        setIsRendering(true);\n\n        // Save the previous selection\n        const preselect = state.selection;\n\n        if (selection.type === SelectionType.Group) {\n            const svgs: Array<[string, string]> = [];\n\n            for (let card = 0; card < state.groups[selection.group].cards.length; card++) {\n                // Select and render the current card\n                await selectAsync(selection.group, card);\n\n                const currentSvgs = getCurrentSelectedSVGs();\n\n                svgs.push(currentSvgs);\n            }\n\n            pdfMake.createPdf({\n                content: ordering(svgs),\n                pageMargins: 0,\n                pageSize: \"LETTER\",\n            }).print();\n        } else if (selection.type === SelectionType.Card) {\n            // Select and render the current card\n            await selectAsync(selection.group, selection.card);\n\n            // Make a simple pdf of one side of the card on each page\n            pdfMake.createPdf({\n                content: ordering([getCurrentSelectedSVGs()]),\n                pageMargins: 0,\n                pageSize: \"LETTER\",\n            }).print();\n        } else {\n            const svgs: Array<[string, string]> = [];\n\n            for (let group = 0; group < state.groups.length; group++) {\n                for (let card = 0; card < state.groups[group].cards.length; card++) {\n                    // Select and render the current card\n                    await selectAsync(group, card);\n\n                    const currentSvgs = getCurrentSelectedSVGs();\n\n                    svgs.push(currentSvgs);\n                }\n            }\n\n            pdfMake.createPdf({\n                content: ordering(svgs),\n                pageMargins: 0,\n                pageSize: \"LETTER\",\n            }).print();\n        }\n\n        // Return selection\n        state.setSelection(preselect);\n\n        // Leave rendering mode\n        setIsRendering(false);\n    }, [getCurrentSelectedSVGs, selectAsync, setIsRendering, state]);\n\n    useImperativeHandle<IRenderedCardsRef, IRenderedCardsRef>(ref, () => ({\n        printDoubleSided: print(doubleSideOrdering),\n        printFoldable: print(foldableOrdering),\n        render: async (selection: Selection) => {\n            // Move into rendering mode\n            setIsRendering(true);\n\n            // Save the previous selection\n            const preselect = state.selection;\n\n            if (selection.type === SelectionType.Group) {\n                // Create zip file\n                const zip = new JSZip();\n\n                const cardCount = state.groups[selection.group].cards.length;\n                const cardCountWidth = cardCount.toString(10).length;\n                for (let card = 0; card < cardCount; card++) {\n                    // Select and render the current card\n                    await selectAsync(selection.group, card);\n\n                    // Safe to assert as non null since the card # is used as a uuid\n                    // tslint:disable-next-line: no-non-null-assertion\n                    const folder = zip.folder(`${card.toString(10).padStart(cardCountWidth, \"0\")}-${state.groups[selection.group].cards[card].name}`)!;\n\n                    // Render and export the cards into a new zip file\n                    await renderCurrentSelection(folder);\n                }\n\n                // Save the zip file\n                saveAs(await zip.generateAsync({ type: \"blob\" }), `${state.groups[selection.group].name}.zip`);\n            } else if (selection.type === SelectionType.Card) {\n                // Select and render the current card\n                await selectAsync(selection.group, selection.card);\n\n                // Render and export the cards into a new zip file\n                const zip = await renderCurrentSelection();\n\n                // Save the zip file\n                saveAs(await zip.generateAsync({ type: \"blob\" }), `${state.groups[selection.group].cards[selection.card].name}.zip`);\n            } else {\n                // Create zip file\n                const zip = new JSZip();\n\n                const groupCount = state.groups.length;\n                const groupCountWidth = groupCount.toString(10).length;\n                for (let group = 0; group < groupCount; group++) {\n                    // Safe to assert as non null since the card # is used as a uuid\n                    // tslint:disable-next-line: no-non-null-assertion\n                    const groupFolder = zip.folder(`${group.toString(10).padStart(groupCountWidth, \"0\")}-${state.groups[group].name}`)!;\n\n                    const cardCount = state.groups[group].cards.length;\n                    const cardCountWidth = cardCount.toString(10).length;\n                    for (let card = 0; card < cardCount; card++) {\n                        // Select and render the current card\n                        await selectAsync(group, card);\n\n                        // Safe to assert as non null since the card # is used as a uuid\n                        // tslint:disable-next-line: no-non-null-assertion\n                        const folder = groupFolder.folder(`${card.toString(10).padStart(cardCountWidth, \"0\")}-${state.groups[group].cards[card].name}`)!;\n\n                        // Render and export the cards into a new zip file\n                        await renderCurrentSelection(folder);\n                    }\n                }\n\n                // Save the zip file\n                saveAs(await zip.generateAsync({ type: \"blob\" }), \"workspace.zip\");\n            }\n\n            // Return selection\n            state.setSelection(preselect);\n\n            // Leave rendering mode\n            setIsRendering(false);\n        }\n    }));\n\n    return (\n        <CardContainer>\n            <FrontRenderedCallbackContext.Provider value={frontRenderedCallback}>\n                <BackRenderedCallbackContext.Provider value={backRenderedCallback}>\n                    <CardFront ref={frontRef} />\n                    <CardBack ref={backRef} />\n                </BackRenderedCallbackContext.Provider>\n            </FrontRenderedCallbackContext.Provider >\n        </CardContainer >\n    );\n});\n\nexport default RenderedCards;","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport styled from \"styled-components\";\n\n/** The container for the editor */\nexport const EditorContainer = styled.div`\n    background: #313131;\n    color: #cccccc;\n\n    padding: 15px 10px;\n\n    min-height: calc(100% - 30px);\n    overflow: auto;\n`;\n\n/** The values section of the editor */\nexport const EditorValues = styled.div`\n    padding-bottom: 20px;\n`;\n\n/** The empty editor view */\nexport const EditorEmpty = styled.div`\n    height: 100%;\n    width: 100%;\n    position: relative;\n\n    color: white;\n    background-color: #696969;\n`;\n\n/** The centered text in the editor */\nexport const EditorCenter = styled.div`\n    position: absolute;\n    top: 50%;\n    width: 100%;\n    text-align: center;\n\n    transform: translateY(-50%);\n`;\n\n/** A title for the editor */\nexport const EditorTitle = styled.div`\n    font-weight: bold;\n    font-size: 25px;\n\n    border-bottom: solid 1px #cccccc;\n    padding-bottom: 3px;\n    margin-bottom: 10px;\n`;\n\n/** A label for an editor value */\nexport const EditorLabel = styled.label`\n    font-weight: bold;\n    display: ${props => props.hidden === true ? \"none\" : \"block\"};\n    user-select: none;\n\n    &:hover > input,\n    &:hover > textarea {\n        border-bottom: solid 1px #777777;\n    }\n`;\n\n/** The editor input for a value */\nexport const EditorInput = styled.input`\n    user-select: contain;\n\n    font-weight: normal;\n    background: #00000080;\n    color: #cccccc;\n    border: solid 1px transparent;\n\n    padding: 2px 5px;\n\n    display: block;\n\n    width: calc(100% - 20px);\n\n    &:focus {\n        outline: none;\n        border-bottom: solid 1px #cccccc;\n    }\n`;\n\n/** The editor input for a value */\nexport const EditorTextArea = styled.textarea`\n    user-select: contain;\n    resize: none;\n\n    font-weight: normal;\n    background: #00000080;\n    color: #cccccc;\n    border: solid 1px transparent;\n\n    padding: 2px 5px;\n\n    display: block;\n\n    width: calc(100% - 20px);\n\n    &:focus {\n        outline: none;\n        border-bottom: solid 1px #cccccc;\n    }\n`;\n\n/** An image in the editor */\nexport const EditorImage = styled.img`\n    max-height: 50px;\n    display: block;\n`;","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport React, { memo, useCallback, useEffect, useRef } from \"react\";\nimport { EditorTextArea } from \"../styles/editor\";\n\n/** A text area that resizes when it overflows */\nconst AutoResizeTextArea = memo((props: React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>) => {\n    const ref = useRef<HTMLTextAreaElement>(null);\n\n    const resize = useCallback(() => {\n        if (ref.current === null) {\n            return;\n        }\n\n        ref.current.style.height = \"1px\";\n        ref.current.style.height = `${ref.current.scrollHeight}px`;\n    }, [ref]);\n\n    useEffect(() => {\n        resize();\n\n        window.addEventListener(\"resize\", resize);\n\n        return () => window.removeEventListener(\"resize\", resize);\n    }, [resize, props.value]);\n\n    return <EditorTextArea {...props} ref={ref} onKeyUp={resize} />;\n});\n\nexport default AutoResizeTextArea;","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport styled from \"styled-components\";\n\n/** The container for the group settings */\nexport const GroupSettingsContainer = styled.div`\n    margin-bottom: 20px;\n`;","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { useObserver } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { GlobalStateContext, SelectionType } from \"../state\";\nimport { EditorInput, EditorLabel, EditorTitle } from \"../styles/editor\";\nimport { GroupSettingsContainer } from \"../styles/editor/group\";\n\n/** The group settings part */\nexport default function GroupSettings() {\n    const state = useContext(GlobalStateContext);\n\n    return useObserver(() => {\n        if (state.selection.type !== SelectionType.Group) {\n            return null;\n        }\n\n        const id = state.selection.group;\n        const update = (event: React.FormEvent<HTMLInputElement>) => {\n            state.groups[id].editName(event.currentTarget.value);\n        };\n\n        return (\n            <GroupSettingsContainer>\n                <EditorTitle>Group settings</EditorTitle>\n                <EditorLabel>\n                    Name:\n                    <EditorInput type=\"text\" value={state.groups[state.selection.group].name ?? \"\"} onChange={update} />\n                </EditorLabel>\n            </GroupSettingsContainer>\n        );\n    });\n}\n","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { useObserver } from \"mobx-react-lite\";\nimport React, { useContext, useRef } from \"react\";\nimport ICard from \"../card/card\";\nimport { GlobalStateContext, SelectionType } from \"../state\";\nimport { EditorImage, EditorInput, EditorLabel, EditorTitle, EditorValues } from \"../styles/editor\";\nimport { dataFileReaderAsync } from \"../util/file\";\nimport AutoResizeTextArea from \"./AutoResizeTextArea\";\nimport GroupSettings from \"./GroupSettings\";\n\n/** The CardSettings section */\nexport default function CardSettings() {\n    const state = useContext(GlobalStateContext);\n    const imageRef = useRef<HTMLInputElement>(null);\n\n    return useObserver(() => {\n        const cardSettings =\n            state.selection.type === SelectionType.Card\n                ? state.groups[state.selection.group].rawCards[state.selection.card]\n                : state.selection.type === SelectionType.Group\n                    ? { name: state.groups[state.selection.group].name, ...state.groups[state.selection.group].defaults }\n                    : { name: \"No Selection\" };\n        const placeholders = state.selection.type === SelectionType.Card ? state.groups[state.selection.group].defaults : undefined;\n\n        /** Update the internal cache values of a text value */\n        const cardValueUpdater = (name: keyof ICard) => {\n            return (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n                event.persist();\n\n                if (state.selection.type === SelectionType.Card) {\n                    state.groups[state.selection.group].editCard(state.selection.card, name, event.currentTarget.value === \"\" && name !== \"name\" ? undefined : event.currentTarget.value);\n                } else if (state.selection.type === SelectionType.Group) {\n                    state.groups[state.selection.group].editDefaults(name, event.currentTarget.value === \"\" ? undefined : event.currentTarget.value);\n                }\n            };\n        };\n\n        const clear = (param: keyof ICard) => () => {\n            if (state.selection.type === SelectionType.Card) {\n                state.groups[state.selection.group].editCard(state.selection.card, param, undefined);\n            } else if (state.selection.type === SelectionType.Group) {\n                state.groups[state.selection.group].editDefaults(param, undefined);\n            }\n        };\n\n        const fileInput = async (event: React.FormEvent<HTMLInputElement>) => {\n            event.persist();\n\n            if (state.selection.type === SelectionType.Card) {\n                if (imageRef.current !== null) {\n                    let image: string | undefined;\n\n                    if (imageRef.current.files !== null) {\n                        image = await dataFileReaderAsync(imageRef.current.files[0]);\n                    }\n\n                    state.groups[state.selection.group].editCard(state.selection.card, \"image\", image);\n                }\n            } else if (state.selection.type === SelectionType.Group) {\n                if (imageRef.current !== null) {\n                    let image: string | undefined;\n\n                    if (imageRef.current.files !== null) {\n                        image = await dataFileReaderAsync(imageRef.current.files[0]);\n                    }\n\n                    state.groups[state.selection.group].editDefaults(\"image\", image);\n                }\n            }\n        };\n\n        return (\n            <EditorValues>\n                <GroupSettings />\n                <EditorTitle>Card Settings</EditorTitle>\n                <EditorLabel hidden={state.selection.type === SelectionType.Group}>\n                    Name:\n                    <EditorInput type=\"text\" value={cardSettings.name ?? \"\"} onChange={cardValueUpdater(\"name\")} />\n                </EditorLabel>\n                <EditorLabel>\n                    Casting Time:\n                    <EditorInput type=\"text\" value={cardSettings.castingTime ?? \"\"} onChange={cardValueUpdater(\"castingTime\")} placeholder={placeholders?.castingTime} />\n                </EditorLabel>\n                <EditorLabel>\n                    Range:\n                    <EditorInput type=\"text\" value={cardSettings.range ?? \"\"} onChange={cardValueUpdater(\"range\")} placeholder={placeholders?.range} />\n                </EditorLabel>\n                <EditorLabel>\n                    Components:\n                    <EditorInput type=\"text\" value={cardSettings.components ?? \"\"} onChange={cardValueUpdater(\"components\")} placeholder={placeholders?.components ?? \"\"} />\n                </EditorLabel>\n                <EditorLabel>\n                    Duration:\n                    <EditorInput type=\"text\" value={cardSettings.duration ?? \"\"} onChange={cardValueUpdater(\"duration\")} placeholder={placeholders?.duration} />\n                </EditorLabel>\n                <EditorLabel>\n                    Physical Components:\n                    <AutoResizeTextArea value={cardSettings.physicalComponents ?? \"\"} onChange={cardValueUpdater(\"physicalComponents\")} placeholder={placeholders?.physicalComponents} />\n                </EditorLabel>\n                <EditorLabel>\n                    Description:\n                    <AutoResizeTextArea value={cardSettings.description ?? \"\"} onChange={cardValueUpdater(\"description\")} placeholder={placeholders?.description} />\n                </EditorLabel>\n                <EditorLabel>\n                    Extended Description:\n                    <AutoResizeTextArea value={cardSettings.extDescription ?? \"\"} onChange={cardValueUpdater(\"extDescription\")} placeholder={placeholders?.extDescription} />\n                </EditorLabel>\n                <EditorLabel>\n                    Class:\n                    <EditorInput type=\"text\" value={cardSettings.clazz ?? \"\"} onChange={cardValueUpdater(\"clazz\")} placeholder={placeholders?.clazz} />\n                </EditorLabel>\n                <EditorLabel>\n                    Type:\n                    <EditorInput type=\"text\" value={cardSettings.type ?? \"\"} onChange={cardValueUpdater(\"type\")} placeholder={placeholders?.type} />\n                </EditorLabel>\n                <EditorLabel>\n                    Level:\n                    <EditorInput type=\"number\" min={0} max={99} value={cardSettings.level ?? \"\"} onChange={cardValueUpdater(\"level\")} placeholder={placeholders?.level === undefined ? undefined : placeholders?.level?.toString()} />\n                </EditorLabel>\n                <EditorLabel>\n                    Color:\n                    <EditorInput type=\"color\" value={cardSettings.color ?? \"\"} onChange={cardValueUpdater(\"color\")} placeholder={placeholders?.color} />\n                    <button onClick={clear(\"color\")} disabled={cardSettings.color === undefined}>Clear Color</button>\n                </EditorLabel>\n                <EditorLabel>\n                    Image:\n                    <EditorImage src={cardSettings.image} alt=\"Group Default\" />\n                    <EditorInput type=\"file\" accept=\"image/*\" onChange={fileInput} ref={imageRef} />\n                    <button onClick={clear(\"image\")} disabled={cardSettings.image === undefined}>Remove Image</button>\n                </EditorLabel>\n            </EditorValues>\n        );\n    });\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { useObserver } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { GlobalStateContext, SelectionType } from \"../state\";\nimport { EditorCenter, EditorContainer, EditorEmpty } from \"../styles/editor\";\nimport CardSettings from \"./CardSettings\";\n\n/** The editor component */\nexport default function Editor() {\n    const state = useContext(GlobalStateContext);\n\n    return useObserver(() => {\n        if (state.selection.type !== SelectionType.None) {\n            return (\n                <EditorContainer>\n                    <CardSettings />\n                </EditorContainer>\n            );\n        } else {\n            return (\n                <EditorEmpty>\n                    <EditorCenter>You have nothing selected</EditorCenter>\n                </EditorEmpty>\n            );\n        }\n    });\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { Item } from \"react-contexify\";\nimport styled, { createGlobalStyle } from \"styled-components\";\n\n/** Global styles for the context menu */\nexport const ContextMenuStyles = createGlobalStyle`\n    .react-contexify {\n        position: fixed;\n        opacity: 0;\n        user-select: none;\n        box-sizing: border-box;\n\n        padding: 10px 10px;\n        background-color: #1a1a1a;\n        box-shadow: 5px 5px 15px #00000066;\n\n        border-radius: 3px;\n\n        cursor: pointer;\n\n        & &__submenu {\n            position: absolute;\n            top: 0;\n            pointer-events: none;\n            transition: opacity 0.275s;\n\n            background-color: #282828fa;\n        }\n\n        &__submenu-arrow {\n            font-size: 12px;\n            position: absolute;\n            right: 10px;\n            line-height: 22px;\n        }\n\n        &__separator {\n            float: left;\n            width: 100%;\n            height: 1px;\n            cursor: default;\n            margin: 4px 0;\n\n            background-color: #666666;\n        }\n\n        &__item {\n            font-size: 14px;\n\n            color: #b8b8b8;\n            font-weight: bold;\n\n            cursor: pointer;\n            position: relative;\n\n            &:not(&--disabled):hover > &__data {\n                color: inherit;\n                background-color: #313131;\n            }\n\n            &:not(&--disabled):hover > .react-contexify__submenu {\n                pointer-events: initial;\n                opacity: 1;\n            }\n\n            &--disabled {\n                cursor: default;\n                opacity: .5;\n            }\n\n            &__data {\n                min-width: 100px;\n                padding: 6px 12px;\n                display: flex;\n                text-align: left;\n                white-space: nowrap;\n                color: inherit;\n                position: relative;\n            }\n\n            &__icon {\n                font-size: 20px;\n                margin-right: 8px;\n                width: 12px;\n                text-align: center;\n            }\n        }\n    }\n`;\n\n/** An item that does a dangerous action */\nexport const DangerItem = styled(Item)`\n    color: #f04747 !important;\n`;","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { toJS } from \"mobx\";\nimport { useObserver } from \"mobx-react-lite\";\nimport React, { MouseEvent, PropsWithChildren, useContext } from \"react\";\nimport { contextMenu, Item, Menu, Separator } from \"react-contexify\";\nimport { RenderedCardsContext } from \"../App\";\nimport CardGroup from \"../card/cardGroup\";\nimport { GlobalStateContext, Selection, SelectionType } from \"../state\";\nimport { DangerItem } from \"../styles/contextMenu\";\nimport { downloadSelection } from \"../util/file\";\nimport { IItemArgs, ItemHandler } from \"./Explorer\";\n\n/** Props to the better menu provider component */\ninterface IBMPProps {\n    /** The id of the context menu */\n    id: string;\n    /** The selection that the menu should act upon */\n    selection: Selection;\n}\n\n/** A better menu provider */\nexport function BetterMenuProvider({ id, children, selection }: PropsWithChildren<IBMPProps>) {\n    const rightClick = (event: MouseEvent) => {\n        event.preventDefault();\n        event.stopPropagation();\n        event.persist();\n\n        contextMenu.hideAll();\n        setTimeout(() => contextMenu.show({\n            event,\n            id,\n            props: selection\n        }), 1);\n    };\n\n    const leftClick = (_: MouseEvent) => {\n        contextMenu.hideAll();\n    };\n\n    return (\n        <div onContextMenu={rightClick} onClick={leftClick}>\n            {children}\n        </div>\n    );\n}\n\n/** Props for the Explorer context menus */\ninterface IECMProps {\n    /** State changer for delete selection */\n    setDeleteSelection(val: Selection): void;\n}\n\n/** The context menus for the explorer */\nexport function ExplorerContextMenus({ setDeleteSelection }: IECMProps) {\n    const state = useContext(GlobalStateContext);\n    const renderedCards = useContext(RenderedCardsContext);\n\n    return useObserver(() => {\n        const downloadClick = (({ props }: IItemArgs) => {\n            if (props.type === SelectionType.Group) {\n                const group = state.groups[props.group];\n\n                downloadSelection({ type: SelectionType.Group, data: group.data }, `${group.name}.group.json`);\n            } else if (props.type === SelectionType.Card) {\n                const card = state.groups[props.group].cards[props.card];\n\n                downloadSelection({ type: SelectionType.Card, data: card }, `${card.name}.card.json`);\n            } else {\n                downloadSelection({ type: SelectionType.None, data: toJS(state.groupsData) }, `workspace.json`);\n            }\n        }) as unknown as ItemHandler;\n\n        const addClick = (({ props }: IItemArgs) => {\n            if (props.type === SelectionType.Group) {\n                const id = state.groups[props.group].addCard();\n                state.select(props.group, id);\n            } else if (props.type === SelectionType.None) {\n                const id = state.addGroup(new CardGroup(`New Group ${state.groups.length}`));\n                state.select(id);\n            }\n        }) as unknown as ItemHandler;\n\n        const editClick = (({ props }: IItemArgs) => {\n            if (props.type === SelectionType.Group) {\n                state.select(props.group);\n            }\n        }) as unknown as ItemHandler;\n\n        const editDisable = (({ props }: IItemArgs) => {\n            // Disable the edit button if this card is already selected\n            return props.type === SelectionType.Group && state.selection.type === SelectionType.Group && state.selection.group === props.group;\n        }) as unknown as ItemHandler<boolean>;\n\n        const deleteClick = (({ props }: IItemArgs) => setDeleteSelection(props)) as unknown as ItemHandler;\n\n        const duplicateClick = (({ props }: IItemArgs) => {\n            if (props.type === SelectionType.Group) {\n                const id = state.addGroup(state.groups[props.group]);\n\n                state.select(id);\n            } else if (props.type === SelectionType.Card) {\n                const group = state.groups[props.group];\n                const id = group.addCard(group.rawCards[props.card]);\n\n                state.select(props.group, id);\n            }\n        }) as unknown as ItemHandler;\n\n        const upClick = (({ props }: IItemArgs) => {\n            if (props.type === SelectionType.Group) {\n                state.moveGroup(props.group, props.group - 1);\n                state.select(props.group - 1);\n            } else if (props.type === SelectionType.Card) {\n                state.groups[props.group].moveCard(props.card, props.card - 1);\n                state.select(props.group, props.card - 1);\n            }\n        }) as unknown as ItemHandler;\n\n        const downClick = (({ props }: IItemArgs) => {\n            if (props.type === SelectionType.Group) {\n                state.moveGroup(props.group, props.group + 1);\n                state.select(props.group + 1);\n            } else if (props.type === SelectionType.Card) {\n                state.groups[props.group].moveCard(props.card, props.card + 1);\n                state.select(props.group, props.card + 1);\n            }\n        }) as unknown as ItemHandler;\n\n        const upDisable = (({ props }: IItemArgs): boolean => {\n            if (props.type === SelectionType.Group) {\n                return props.group === 0;\n            } else if (props.type === SelectionType.Card) {\n                return props.card === 0;\n            } else {\n                return true;\n            }\n        }) as unknown as ItemHandler<boolean>;\n\n        const downDisable = (({ props }: IItemArgs): boolean => {\n            if (props.type === SelectionType.Group) {\n                return props.group === state.groups.length - 1;\n            } else if (props.type === SelectionType.Card) {\n                return props.card === state.groups[props.group].cards.length - 1;\n            } else {\n                return true;\n            }\n        }) as unknown as ItemHandler<boolean>;\n\n        const deselect = () => {\n            state.select();\n        };\n\n        const renderClick = (async ({ props }: IItemArgs) => {\n            if (renderedCards.current === null) {\n                return;\n            }\n\n            // Render the cards\n            await renderedCards.current.render(props);\n        }) as unknown as ItemHandler;\n\n        const printDoubleSidedClick = (async ({ props }: IItemArgs) => {\n            if (renderedCards.current === null) {\n                return;\n            }\n\n            // Render the cards\n            await renderedCards.current.printDoubleSided(props);\n        }) as unknown as ItemHandler;\n\n        const printFoldableClick = (async ({ props }: IItemArgs) => {\n            if (renderedCards.current === null) {\n                return;\n            }\n\n            // Render the cards\n            await renderedCards.current.printFoldable(props);\n        }) as unknown as ItemHandler;\n\n        return (\n            <>\n                <Menu id=\"none-contextmenu\">\n                    <Item onClick={addClick}>Add Group</Item>\n                    <Separator />\n                    <Item onClick={deselect}>Deselect All</Item>\n                    <Separator />\n                    <Item onClick={downloadClick}>Download All</Item>\n                    <Item onClick={renderClick}>Render All</Item>\n                    <Item onClick={printDoubleSidedClick}>Print All (Double Sided)</Item>\n                    <Item onClick={printFoldableClick}>Print All (Foldable)</Item>\n                </Menu>\n                <Menu id=\"group-contextmenu\">\n                    <Item onClick={editClick} disabled={editDisable}>Edit</Item>\n                    <Item onClick={addClick}>Add Card</Item>\n                    <Item onClick={duplicateClick}>Duplicate</Item>\n                    <Separator />\n                    <Item onClick={upClick} disabled={upDisable}>Move Up</Item>\n                    <Item onClick={downClick} disabled={downDisable}>Move Down</Item>\n                    <Separator />\n                    <Item onClick={downloadClick}>Download Group</Item>\n                    <Item onClick={renderClick}>Render Group</Item>\n                    <Item onClick={printDoubleSidedClick}>Print Group (Double Sided)</Item>\n                    <Item onClick={printFoldableClick}>Print Group (Foldable)</Item>\n                    <Separator />\n                    <DangerItem onClick={deleteClick}>Delete</DangerItem>\n                </Menu>\n                <Menu id=\"card-contextmenu\">\n                    <Item onClick={duplicateClick}>Duplicate</Item>\n                    <Separator />\n                    <Item onClick={upClick} disabled={upDisable}>Move Up</Item>\n                    <Item onClick={downClick} disabled={downDisable}>Move Down</Item>\n                    <Separator />\n                    <Item onClick={downloadClick}>Download Card</Item>\n                    <Item onClick={renderClick}>Render Card</Item>\n                    <Item onClick={printDoubleSidedClick}>Print Card (Double Sided)</Item>\n                    <Item onClick={printFoldableClick}>Print Card (Foldable)</Item>\n                    <Separator />\n                    <DangerItem onClick={deleteClick}>Delete</DangerItem>\n                </Menu>\n            </>\n        );\n    });\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport styled from \"styled-components\";\n\n/** The styles for the modal */\nexport const ModalStyles: {\n    /** The content props */\n    content: React.CSSProperties;\n    /** The overlay props */\n    overlay: React.CSSProperties;\n} = {\n    content: {\n        background: \"#1a1a1a\",\n        border: \"solid 1px #666666\",\n        color: \"#b8b8b8\",\n        height: \"150px\",\n        left: \"50%\",\n        maxHeight: \"calc(100% - 40px)\",\n        maxWidth: \"calc(100% - 40px)\",\n        minHeight: \"100px\",\n        minWidth: \"100px\",\n        position: \"absolute\",\n        top: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        width: \"500px\",\n    },\n    overlay: {\n        background: \"#000000AA\"\n    }\n};\n\n/** The container for the modal */\nexport const ModalContainer = styled.div`\n    display: grid;\n    grid-template-columns: auto;\n    grid-template-rows: auto 40px 30px;\n    height: 100%;\n\n    grid-column-gap: 10px;\n\n    color: #cccccc;\n    font-size: 20px;\n`;\n\n/** The dialog for the modal */\nexport const ModalDialog = styled.div`\n    grid-row: 1;\n    margin-left: 10px;\n`;\n\n/** An emphasis on the modal text */\nexport const ModalEmph = styled.span`\n    font-weight: bold;\n    font-style: italic;\n`;\n\n/** The description for the modal */\nexport const ModalDesc = styled.div`\n    grid-row: 2;\n\n    margin-left: 10px;\n    font-weight: bold;\n`;\n\n/** A danger emphasis on modal text */\nexport const ModalDangerEmph = styled.span`\n    color: #f04747;\n`;\n\n/** The buttons on a modal */\nexport const ModalButtons = styled.div`\n    grid-row: 3;\n    text-align: center;\n`;\n\n/** A modal button */\nexport const ModalButton = styled.button`\n    background: #313131;\n    border: none;\n    color: #cccccc;\n\n    padding: 5px 10px;\n    border-radius: 5px;\n\n    margin: 0px 10px;\n\n    &:hover {\n        background: #515151;\n    }\n`;\n\n/** A modal button that represents a dangerous action */\nexport const ModalDangerButton = styled(ModalButton)`\n    color: #f04747;\n    font-weight: bold;\n\n    &:hover {\n        background: #f04747;\n        color: #FFFFFF;\n    }\n`;\n\n/** A modal button that represents a suggested action */\nexport const ModalSuggestedButton = styled(ModalButton)`\n    color: #17831d;\n    font-weight: bold;\n\n    &:hover {\n        background: #17831d;\n        color: #FFFFFF;\n    }\n`;","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { Observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport ReactModal from \"react-modal\";\nimport { GlobalStateContext, Selection, SelectionType } from \"../state\";\nimport { ModalButton, ModalButtons, ModalContainer, ModalDangerButton, ModalDangerEmph, ModalDesc, ModalDialog, ModalEmph, ModalStyles } from \"../styles/modal\";\n\n/** The props for the delete modal */\ninterface IDeleteModalProps {\n    /** The selection to delete */\n    deleteSelection: Selection;\n    /** A way to change the selection */\n    setDeleteSelection(selection: Selection): void;\n}\n\n/** The delete confirmation modal */\nexport default function DeleteModal({ deleteSelection, setDeleteSelection }: IDeleteModalProps) {\n    const state = useContext(GlobalStateContext);\n\n    const deleteCard = () => {\n        if (deleteSelection.type === SelectionType.Group) {\n            state.select();\n            state.removeGroup(deleteSelection.group);\n        } else if (deleteSelection.type === SelectionType.Card) {\n            state.select(deleteSelection.group);\n            state.groups[deleteSelection.group].removeCard(deleteSelection.card);\n        } else {\n            console.warn(\"Attempted to delete card when no card selected for deletion\");\n        }\n\n        setDeleteSelection({ type: SelectionType.None });\n    };\n    const closeDeleteModal = () => setDeleteSelection({ type: SelectionType.None });\n\n    const confirmationMessage = () => {\n        if (deleteSelection.type === SelectionType.Group) {\n            const group = state.groups[deleteSelection.group];\n\n            return <span>Are you sure you want to delete the group <ModalEmph>{group.name}</ModalEmph> and all of its cards</span>;\n        } else if (deleteSelection.type === SelectionType.Card) {\n            const card = state.groups[deleteSelection.group].cards[deleteSelection.card];\n\n            return <span>Are you sure you want to delete the card <ModalEmph>{card.name}</ModalEmph></span>;\n        } else {\n            return <span>You have reached an invalid state, please press cancel</span>;\n        }\n    };\n\n    return (\n        <ReactModal isOpen={deleteSelection.type !== SelectionType.None} style={ModalStyles}>\n            <ModalContainer>\n                <ModalDialog>\n                    <Observer>{confirmationMessage}</Observer>\n                </ModalDialog>\n                <ModalDesc>\n                    This action is <ModalDangerEmph>irreversible</ModalDangerEmph>\n                </ModalDesc>\n                <ModalButtons>\n                    <ModalButton onClick={closeDeleteModal}>Cancel</ModalButton>\n                    <ModalDangerButton onClick={deleteCard}>Delete</ModalDangerButton>\n                </ModalButtons>\n            </ModalContainer>\n        </ReactModal>\n    );\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport styled from \"styled-components\";\n\n/** The container for the explorer */\nexport const ExplorerContainer = styled.div`\n    display: grid;\n    grid-template-columns: auto;\n    grid-template-rows: 40px calc(100% - 60px);\n\n    grid-column-gap: 10px;\n\n    background: #313131;\n    color: #cccccc;\n\n    height: 100%;\n    overflow: hidden;\n`;\n\n/** Properties for the explorer header */\ninterface IHeaderProps {\n    /** If the view below is scrolled all the way to the top */\n    isTop: boolean;\n}\n\n/** The header component of the explorer */\nexport const ExplorerHeader = styled.div<IHeaderProps>`\n    grid-row: 1;\n    height: 100%;\n\n    padding: 0px 50px;\n\n    margin-left: -50px;\n\n    width: 100%;\n    box-shadow: ${props => props.isTop ? \"none\" : \"0px 10px 10px #000000\"};\n`;\n\n/** The search bar for the explorere */\nexport const ExplorerSearch = styled.div`\n    display: inline-block;\n    width: calc(100% - 60px);\n\n    margin: 8px 5px 8px 10px;\n\n    border: 1px solid transparent;\n\n    padding: 0px 3px;\n\n    background: #555555;\n`;\n\n/** Properties for the explorer header input */\ninterface IHeaderSearchInputProps {\n    /** If the input should be shortened for the x button */\n    short: boolean;\n}\n\n/** The input in the explorer search */\nexport const ExporerSearchInput = styled.input.attrs({\n    type: \"text\"\n}) <IHeaderSearchInputProps>`\n    &::-ms-clear {\n        display: none;\n    }\n    outline: none;\n\n    height: 20px;\n    width: ${props => props.short ? \"calc(100% - 20px)\" : \"calc(100%)\"};\n\n    background: transparent;\n    color: #cccccc;\n    border: none;\n\n    font-size: 15px;\n\n    padding: 0px;\n\n    display: inline-block;\n`;\n\n/** The x button on the explorer */\nexport const ExplorerSearchX = styled.div`\n    height: 20px;\n    font-size: 16px;\n    width: 20px;\n\n    color: #cccccc;\n    text-align: center;\n    display: ${props => props.hidden === true ? \"none\" : \"inline-block\"};\n    position: relative;\n    vertical-align: text-bottom;\n\n    user-select: none;\n\n    &:hover {\n        color: #f04747;\n    }\n\n    svg {\n        position: absolute;\n\n        top: 50%;\n        left: 50%;\n\n        transform: translate(-50%, -50%);\n    }\n`;\n\n/** The add button on the explorer */\nexport const ExplorerAddButton = styled.div`\n    color: #cccccc;\n    text-align: center;\n    display: inline-block;\n    position: relative;\n\n    user-select: none;\n\n    width: 20px;\n    margin: 0 5px;\n\n    &:hover {\n        color: #43b581;\n    }\n`;\n\n/** The exporer groups section props */\ninterface IExplorerGroupsProps {\n    /** If there is smthn dragged over */\n    dragOver: boolean;\n}\n\n/** The groupd section of the explorer */\nexport const ExplorerGroups = styled.div<IExplorerGroupsProps>`\n    grid-row: 2;\n    user-select: none;\n\n    overflow: auto;\n    height: 100%;\n\n    padding: 10px 0px 10px 0px;\n    background: ${props => props.dragOver ? \"#ec52ec80\" : \"none\"};\n`;\n\n/** The highlighted match of the search term */\nexport const ExplorerHighlight = styled.span`\n    background: #ff440041;\n`;","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport styled from \"styled-components\";\n\n/** Props for a component that is selectable */\nexport interface ISelectableProps {\n    /** If the component is selected */\n    selected: boolean;\n}\n\n/** The title to the card group */\nexport const CardGroupTitle = styled.div<ISelectableProps>`\n    padding: 0px 0px 0px 10px;\n    background: ${props => props.selected ? \"#2b5c3b\" : \"none\"};\n\n    &:hover {\n        background: #414141;\n    }\n`;\n\n/** The carat for the card group */\nexport const CardGroupCaret = styled.div`\n    display: inline-block;\n    width: 20px;\n    text-align: center;\n`;\n\n/** The name for the group */\nexport const CardGroupName = styled.div`\n    display: inline-block;\n    font-weight: bold;\n    font-size: 20px;\n`;","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport styled from \"styled-components\";\nimport { ISelectableProps } from \"./cardGroup\";\n\n/** The title to the card group */\nexport const CardTitle = styled.div<ISelectableProps>`\n    min-height: 20px;\n    background: ${props => props.selected ? \"#515151\" : \"none\"};\n\n    &:hover {\n        background: #414141;\n    }\n\n    padding: 3px 0px 3px 30px;\n`;","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { useObserver } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport ICard from \"../card/card\";\nimport { GlobalStateContext, SelectionType } from \"../state\";\nimport { CardTitle } from \"../styles/explorer/card\";\nimport { BetterMenuProvider } from \"./ContextMenu\";\nimport { highlightMatches } from \"./Explorer\";\n\n/** The propt */\ninterface IProps {\n    /** The card id */\n    id: number;\n    /** The group id */\n    groupid: number;\n    /** The search term */\n    search: string;\n}\n\n/** Filter for cards */\nexport function cardFilter(filter: string) {\n    return (card: ICard) => (card.name.toLowerCase().includes(filter.toLowerCase()));\n}\n\n/** A card component in the explortr */\nexport default function CardComponent({ groupid, id, search }: IProps) {\n    const state = useContext(GlobalStateContext);\n\n    const select = () => state.select(groupid, id);\n\n    return useObserver(() => {\n        const card = state.groups[groupid].cards[id];\n\n        // Hide the card if there is a search term AND\n        const hidden = search !== \"\" && (\n            // If the group is not selected AND\n            state.selection.type !== SelectionType.Card\n            || state.selection.card !== id\n            || state.selection.group !== groupid\n            // Or if it is a match\n        ) && !cardFilter(search)(card);\n\n        return (\n            <BetterMenuProvider id=\"card-contextmenu\" selection={{ type: SelectionType.Card, card: id, group: groupid }}>\n                <CardTitle\n                    selected={state.selection.type === SelectionType.Card && state.selection.card === id && state.selection.group === groupid}\n                    onClick={select}\n                    hidden={hidden}\n                >\n                    {/* Highlight any text in the card that matches the search query */}\n                    {highlightMatches(card.name, search)}\n                </CardTitle>\n            </BetterMenuProvider>\n        );\n    });\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { faCaretDown, faCaretRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Observer, useObserver } from \"mobx-react-lite\";\nimport React, { useContext, useState } from \"react\";\nimport { GlobalStateContext, SelectionType } from \"../state\";\nimport { CardGroupCaret, CardGroupName, CardGroupTitle } from \"../styles/explorer/cardGroup\";\nimport CardComponent, { cardFilter } from \"./CardComponent\";\nimport { BetterMenuProvider } from \"./ContextMenu\";\nimport { highlightMatches } from \"./Explorer\";\n\n/** The props */\ninterface IProps {\n    /** The card id */\n    id: number;\n    /** The search term */\n    search: string;\n}\n\n/** A component to show a card group in the side panel */\nexport default function CardGroupComponent({ id, search }: IProps) {\n    const [collapsed, setCollapsed] = useState(false);\n    const state = useContext(GlobalStateContext);\n\n    // Hide the group if there is a search term AND\n    const hidden = useObserver(() => search !== \"\" && (\n        // If there are no cards in the group that match the filter\n        state.groups[id].cards.filter(cardFilter(search)).length === 0\n        // AND the name of the group does not match\n        && !state.groups[id].name.toLowerCase().includes(search.toLowerCase())\n        // AND the group is not selected OR any card in the group\n        && !((state.selection.type === SelectionType.Card || state.selection.type === SelectionType.Group) && state.selection.group === id)\n    ));\n\n    const toggleCollapse = () => setCollapsed(!collapsed);\n\n    return useObserver(() => (\n        <BetterMenuProvider id=\"group-contextmenu\" selection={{ type: SelectionType.Group, group: id }}>\n            <div hidden={hidden}>\n                <CardGroupTitle selected={state.selection.type === SelectionType.Group && state.selection.group === id} onClick={toggleCollapse}>\n                    <CardGroupCaret>\n                        <FontAwesomeIcon icon={collapsed ? faCaretRight : faCaretDown} />\n                    </CardGroupCaret>\n                    <CardGroupName>\n                        {/* Highlight any text in the name that matches the search query */}\n                        <Observer>{() => <>{highlightMatches(state.groups[id].name, search)}</>}</Observer>\n                    </CardGroupName>\n                </CardGroupTitle>\n                <div hidden={collapsed}>\n                    <Observer>{() => <>{state.groups[id].cards.map((_, j) => <CardComponent key={j} id={j} groupid={id} search={search} />)}</>}</Observer>\n                </div>\n            </div>\n        </BetterMenuProvider>\n    ));\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Observer } from \"mobx-react-lite\";\nimport React, { ChangeEvent, DragEvent, useContext, useState } from \"react\";\nimport { MenuItemEventHandler, TriggerEvent } from \"react-contexify/lib/types\";\nimport CardGroup from \"../card/cardGroup\";\nimport { GlobalStateContext, Selection, SelectionType } from \"../state\";\nimport { ExplorerAddButton, ExplorerContainer, ExplorerGroups, ExplorerHeader, ExplorerHighlight, ExplorerSearch, ExplorerSearchX, ExporerSearchInput } from \"../styles/explorer\";\nimport { DownloadSelection, loadSelection, textFileReaderAsync } from \"../util/file\";\nimport useIsTop from \"../util/useIsTop\";\nimport CardGroupComponent from \"./CardGroupComponent\";\nimport { BetterMenuProvider } from \"./ContextMenu\";\n\n/** Highlight the matches to the match string */\nexport function highlightMatches(text?: string, match?: string) {\n    // Only spend time spliting if there is a match to look for\n    if (match !== undefined && match !== \"\") {\n        // Split on higlight term and include term into parts, ignore case\n        return text !== undefined && text !== \"\" ?\n            text.split(new RegExp(`(${match.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\")})`, \"gi\"))\n                .map((part, i) => (\n                    // If the part is the same as the search term, give it the class highlight\n                    part.toLowerCase() === match.toLowerCase() ? (\n                        <ExplorerHighlight>\n                            {part}\n                        </ExplorerHighlight>\n                    ) : (\n                            <span key={i}>\n                                {part}\n                            </span>\n                        )\n                )) : undefined;\n    } else {\n        return text;\n    }\n}\n\n/** The args passed to a context menu item when it is clicked */\nexport interface IItemArgs {\n    /** The event that triggered the click */\n    event: TriggerEvent;\n    /** The props passed to the item */\n    props: Selection;\n}\n\n/** The handler type that react-contextify needs */\nexport type ItemHandler<T = void> = (info: MenuItemEventHandler) => T;\n\n/** The explorer view */\nexport default function Explorer() {\n    const [search, setSearch] = useState(\"\");\n    const [isDragOver, setDragOver] = useState(false);\n    const [isTop, onScroll] = useIsTop();\n    const state = useContext(GlobalStateContext);\n\n    const onDragEnter = () => setDragOver(true);\n    const onDragExit = () => setDragOver(false);\n    const onDragOver = (event: DragEvent<HTMLDivElement>) => {\n        event.preventDefault();\n    };\n\n    const onDrop = async (event: DragEvent<HTMLDivElement>) => {\n        event.preventDefault();\n        event.persist();\n\n        setDragOver(false);\n\n        for (let i = 0; i < event.dataTransfer.items.length; i++) {\n            const file = event.dataTransfer.files[i];\n\n            if (file.type === \"application/json\" || file.name.endsWith(\".json\")) {\n                const contents = await textFileReaderAsync(file);\n\n                loadSelection(JSON.parse(contents) as DownloadSelection, state);\n            } else {\n                console.error(`Format \"${file.type}\" unrecognised`);\n            }\n        }\n\n        event.dataTransfer.items.clear();\n    };\n\n    const clearSearch = () => setSearch(\"\");\n    const updateSearch = (e: ChangeEvent<HTMLInputElement>) => setSearch(e.target.value);\n\n    const addGroup = () => {\n        const idx = state.addGroup(new CardGroup(`New Group ${state.groups.length}`));\n        state.select(idx);\n    };\n\n    return (\n        <ExplorerContainer>\n            {/* Search results */}\n            <BetterMenuProvider id=\"none-contextmenu\" selection={{ type: SelectionType.None }}>\n                <ExplorerGroups dragOver={isDragOver} onScroll={onScroll} onDrop={onDrop} onDragEnter={onDragEnter} onDragExit={onDragExit} onDragOver={onDragOver}>\n                    <Observer>{() => <>{state.groups.map((_, i) => <CardGroupComponent key={i} id={i} search={search} />)}</>}</Observer>\n                </ExplorerGroups>\n            </BetterMenuProvider>\n\n            {/* Header */}\n            <ExplorerHeader isTop={isTop}>\n                <ExplorerSearch>\n                    <ExporerSearchInput short={search !== \"\"} value={search} onChange={updateSearch} />\n                    <ExplorerSearchX hidden={search === \"\"} onClick={clearSearch}>\n                        <FontAwesomeIcon icon={faTimes} />\n                    </ExplorerSearchX>\n                </ExplorerSearch>\n                <ExplorerAddButton onClick={addGroup}><FontAwesomeIcon icon={faPlus} /></ExplorerAddButton>\n            </ExplorerHeader>\n        </ExplorerContainer>\n    );\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { UIEvent, useState } from \"react\";\n\n/** Hook to determine if a component is at the top */\nexport default function useIsTop(): [boolean, (event: UIEvent<HTMLDivElement>) => void] {\n    const [isTop, setTop] = useState(true);\n\n    /** Listen for scroll */\n    const onScroll = (event: UIEvent<HTMLDivElement>) => {\n        if (isTop !== (event.currentTarget.scrollTop === 0)) {\n            setTop(event.currentTarget.scrollTop === 0);\n        }\n    };\n\n    return [isTop, onScroll];\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\n/** Check for localhost uri */\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    ) !== null\n);\n\n/** Method to register the service worker */\nexport default function register(setUpdateAvaliable: (is: boolean) => void) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.toString()\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, setUpdateAvaliable);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n                    );\n                }).catch(e => console.error(e));\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl, setUpdateAvaliable);\n            }\n        });\n    }\n}\n\n/** Method to register a valid service worker */\nfunction registerValidSW(swUrl: string, setUpdateAvaliable: (is: boolean) => void) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker !== null) {\n                    installingWorker.onstatechange = () => {\n                        if (installingWorker.state === \"installed\") {\n                            if (navigator.serviceWorker.controller !== null) {\n                                // At this point, the old content will have been purged and\n                                // the fresh content will have been added to the cache.\n                                // It's the perfect time to display a 'New content is\n                                // available; please refresh.' message in your web app.\n                                console.log(\"New content is available; please refresh.\");\n                                setUpdateAvaliable(true);\n                            } else {\n                                // At this point, everything has been precached.\n                                // It's the perfect time to display a\n                                // 'Content is cached for offline use.' message.\n                                console.log(\"Content is cached for offline use.\");\n                            }\n                        }\n                    };\n                }\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\n/** A method to make sure that the service worker exists before usig it */\nfunction checkValidServiceWorker(swUrl: string, setUpdateAvaliable: (is: boolean) => void) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1 // tslint:disable-line: no-non-null-assertion\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration =>\n                    registration.unregister()\n                        .then(() => {\n                            window.location.reload();\n                        })\n                ).catch(e => console.error(e));\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, setUpdateAvaliable);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\n/** Method to unregister the service worker */\n// ts-unused-exports:disable-next-line\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration =>\n            registration.unregister()\n        ).catch(e => console.error(e));\n    }\n}\n","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport React from \"react\";\nimport ReactModal from \"react-modal\";\nimport { ModalContainer, ModalDangerEmph, ModalDesc, ModalDialog, ModalStyles } from \"./styles/modal\";\n\n/** The props to the rndering modal */\ninterface IRenderingModalProps {\n    /** If the modal should show */\n    show: boolean;\n}\n\n/** The delete confirmation modal */\nexport default function RenderingModal({ show }: IRenderingModalProps) {\n    return (\n        <ReactModal isOpen={show} style={ModalStyles}>\n            <ModalContainer>\n                <ModalDialog>\n                    A rendering task is taking place\n                </ModalDialog>\n                <ModalDesc>\n                    Please <ModalDangerEmph>DO NOT</ModalDangerEmph> leave the page\n                </ModalDesc>\n            </ModalContainer>\n        </ReactModal>\n    );\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { createGlobalStyle } from \"styled-components\";\n\n/** The global styles for all of the app */\nconst GlobalStyles = createGlobalStyle`\n    body,\n    html {\n        margin: 0;\n        padding: 0;\n        font-family: 'Open Sans', sans-serif;\n        overflow: auto;\n        width: 100%;\n        height: 100%;\n    }\n\n    @font-face {\n        font-family: \"Modesto-Expd\";\n        src: url(\"/fonts/Modesto-Expd.ttf\");\n    }\n\n    @font-face {\n        font-family: \"Modesto-Regular\";\n        src: url(\"/fonts/Modesto-Regular.ttf\");\n    }\n\n    @font-face {\n        font-family: \"Open Sans\";\n        src: url(\"/fonts/OpenSans-Regular.ttf\");\n    }\n\n    @font-face {\n        font-family: \"Open Sans SemiBold\";\n        src: url(\"/fonts/OpenSans-SemiBold.ttf\");\n    }\n`;\n\nexport default GlobalStyles;","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport React from \"react\";\nimport ReactModal from \"react-modal\";\nimport { ModalButton, ModalButtons, ModalContainer, ModalDialog, ModalStyles, ModalSuggestedButton } from \"./styles/modal\";\n\n/** The props to the update modal */\ninterface IUpdateModalProps {\n    /** The has to act on */\n    show: boolean;\n    /** The action to call when a choice is made */\n    doUpdate(update: boolean): void;\n}\n\n/** The delete confirmation modal */\nexport default function UpdateModal({ doUpdate, show }: IUpdateModalProps) {\n    const callDoUpdate = (update: boolean) => () => doUpdate(update);\n\n    return (\n        <ReactModal isOpen={show} style={ModalStyles}>\n            <ModalContainer>\n                <ModalDialog>\n                    There is a new update! You can choose to update now, or ignore the message.\n                </ModalDialog>\n                <ModalButtons>\n                    <ModalSuggestedButton onClick={callDoUpdate(true)}>Update</ModalSuggestedButton>\n                    <ModalButton onClick={callDoUpdate(false)}>Ignore</ModalButton>\n                </ModalButtons>\n            </ModalContainer>\n        </ReactModal>\n    );\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { create } from \"mobx-persist\";\nimport React, { createContext, useContext, useEffect, useRef, useState } from \"react\";\nimport RenderedCards, { IRenderedCardsRef } from \"./card/rendered/RenderedCards\";\nimport Editor from \"./editor/Editor\";\nimport { ExplorerContextMenus } from \"./explorer/ContextMenu\";\nimport DeleteModal from \"./explorer/DeleteModal\";\nimport Explorer from \"./explorer/Explorer\";\nimport register from \"./registerServiceWorker\";\nimport RenderingModal from \"./RenderingModal\";\nimport { GlobalStateContext, Selection, SelectionType } from \"./state\";\nimport { AppContainer } from \"./styles/app\";\nimport { ContextMenuStyles } from \"./styles/contextMenu\";\nimport GlobalStyles from \"./styles/global\";\nimport UpdateModal from \"./UpdateModal\";\n\n/**\n * TODO:\n * - Better layout\n * - Stat sheets\n * - Margins on printed PDF\n */\n\n/** The context for the rendered cards component */\nexport const RenderedCardsContext = createContext<React.RefObject<IRenderedCardsRef>>({ current: null });\n/** The context for the rendering state */\nexport const IsRenderingContext = createContext<[boolean, (value: boolean) => void]>([false, () => void 0]);\n\n/** The main app component */\nexport default function App() {\n    const state = useContext(GlobalStateContext);\n\n    const [isRendering, setIsRendering] = useState(false);\n\n    const cardsRef = useRef<IRenderedCardsRef>(null);\n\n    // Updates\n    const [updateAvaliable, setUpdateAvaliable] = useState(false);\n    const doUpdate = (update: boolean) => {\n        if (update) {\n            console.log(\"%cUser accepting update, reloading\", \"color: goldenrod\");\n            location.reload(); // eslint-disable-line\n        } else {\n            console.log(\"%cUser ignored update\", \"color: goldenrod\");\n        }\n\n        // Hide prompt\n        setUpdateAvaliable(false);\n    };\n\n    useEffect(() => {\n        // Setup Mobx-Persist\n        const hydrate = create({\n            jsonify: true,\n            storage: localStorage\n        });\n\n        hydrate(\"state\", state);\n\n        // Setup service worker\n        register(setUpdateAvaliable);\n\n        // Disable context menu\n        document.oncontextmenu = (e) => {\n            e.preventDefault();\n        };\n        // eslint-disable-next-line\n    }, []);\n\n    const [deleteSelection, setDeleteSelection] = useState<Selection>({ type: SelectionType.None });\n\n    return (\n        <AppContainer>\n            <RenderedCardsContext.Provider value={cardsRef}>\n                <IsRenderingContext.Provider value={[isRendering, setIsRendering]}>\n                    {/* Global styles */}\n                    <GlobalStyles />\n                    <ContextMenuStyles />\n\n                    {/* The exporer view */}\n                    <Explorer />\n                    <ExplorerContextMenus setDeleteSelection={setDeleteSelection} />\n                    <DeleteModal setDeleteSelection={setDeleteSelection} deleteSelection={deleteSelection} />\n\n                    {/* The editor */}\n                    <Editor />\n\n                    {/* The card renders */}\n                    <RenderedCards ref={cardsRef} />\n\n                    {/* The update modal */}\n                    <UpdateModal doUpdate={doUpdate} show={updateAvaliable} />\n\n                    {/* The rendering modal */}\n                    <RenderingModal show={isRendering} />\n                </IsRenderingContext.Provider>\n            </RenderedCardsContext.Provider>\n        </AppContainer>\n    );\n}\n","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactModal from \"react-modal\";\nimport App from \"./App\";\n\nReactModal.setAppElement(\"#root\");\n\nReactDOM.render(\n    <App />,\n    document.getElementById(\"root\") as HTMLElement\n);"],"sourceRoot":""}