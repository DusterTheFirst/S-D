{"version":3,"sources":["state.ts","card/cardGroup.ts","util/string.ts","util/wordWrap.ts","card/RenderedCard.tsx","util/file.ts","editor/AutoResizeTextArea.tsx","editor/Editor.tsx","explorer/ContextMenu.tsx","explorer/CardComponent.tsx","explorer/CardGroupComponent.tsx","explorer/Explorer.tsx","explorer/Modal.tsx","registerServiceWorker.ts","UpdateModal.tsx","App.tsx","index.tsx"],"names":["SelectionType","CardGroup","persist","name","defaults","cards","this","_cards","card","undefined","push","oldpos","newpos","splice","i","key","value","Object","entries","filter","reduce","pre","k","v","map","data","observable","action","GlobalState","group","_selection","type","None","Group","Card","_groups","x","GlobalStateContext","createContext","bulletLists","text","replace","hashCode","s","hash","length","charCodeAt","wordWrapSVG","width","outputElement","split","initialOffset","words","elems","tspanElement","document","createElementNS","textNode","createTextNode","setAttribute","baseVal","valueAsString","attributes","getNamedItem","appendChild","some","textContent","parseFloat","firstChild","console","error","len","getComputedTextLength","slice","wordWrapOneLineSVG","a","b","CardFront","state","useContext","physComponentsRef","createRef","physComponentsBakgroundRef","descriptionRef","extDescriptionRef","extDescriptionTitleRef","useObserver","selection","groups","useEffect","currHeight","physComp","current","physCompBkg","desc","extDesc","extDescTitle","physicalComponents","height","toString","removeAttribute","description","extDescription","innerHTML","durationConc","duration","toLowerCase","match","durationCap","charAt","toUpperCase","cardlevel","parseInt","level","cardType","isNaN","j","ordinalSuffixOf","color","className","viewBox","fontFamily","fill","y","rx","ry","x1","y1","x2","y2","stroke","strokeWidth","textAnchor","fontSize","castingTime","range","components","display","points","dominantBaseline","ref","fontWeight","letterSpacing","clazz","CardBackDyn","useMemo","image","href","CardBack","outImages","g","c","hashed","h","id","textFileReaderAsync","file","Promise","resolve","reject","reader","FileReader","readAsText","onload","_","result","Error","onerror","dataFileReaderAsync","readAsDataURL","download","filename","link","createElement","url","URL","createObjectURL","Blob","JSON","stringify","body","click","setTimeout","removeChild","revokeObjectURL","load","addGroup","fromData","select","addCard","alert","AutoResizeTextArea","memo","props","resize","useCallback","style","scrollHeight","onKeyUp","Editor","CardSettings","GroupSettings","onChange","event","editName","currentTarget","imageRef","cardSettings","rawCards","placeholders","cardValueUpdater","editCard","editDefaults","fileInput","files","placeholder","min","max","onClick","src","alt","accept","BetterMenuProvider","children","onContextMenu","preventDefault","stopPropagation","contextMenu","hideAll","show","ExplorerContextMenus","setDeleteSelection","downloadClick","toJS","groupsData","addClick","deleteClick","duplicateClick","upClick","moveGroup","moveCard","downClick","upDisable","downDisable","disabled","cardFilter","includes","CardComponent","groupid","search","hidden","highlightMatches","CardGroupComponent","useState","collapsed","setCollapsed","toggleCollapse","icon","faCaretRight","faCaretDown","RegExp","part","Explorer","setSearch","isDragOver","setDragOver","isTop","setTop","onDrop","dataTransfer","items","endsWith","contents","parse","clear","onScroll","scrollTop","onDragEnter","onDragExit","onDragOver","e","target","faTimes","idx","faPlus","ModalStyles","content","background","border","left","maxHeight","maxWidth","minHeight","minWidth","position","top","transform","overlay","DeleteModal","deleteSelection","confirmationMessage","isOpen","removeGroup","removeCard","warn","isLocalhost","Boolean","window","location","hostname","register","setUpdateAvaliable","navigator","process","origin","addEventListener","swUrl","fetch","then","response","status","headers","get","indexOf","serviceWorker","ready","registration","unregister","reload","catch","registerValidSW","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","UpdateModal","doUpdate","callDoUpdate","update","App","updateAvaliable","create","jsonify","storage","localStorage","hydrate","oncontextmenu","ReactModal","setAppElement","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ba8b098c.chunk.js","sourcesContent":["/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { action, observable } from \"mobx\";\nimport { persist } from \"mobx-persist\";\nimport { createContext } from \"react\";\nimport CardGroup, { ICardGroupData } from \"./card/cardGroup\";\n\n/** The tag for the selection enum */\nexport enum SelectionType {\n    None = \"none\",\n    Group = \"group\",\n    Card = \"card\",\n}\n\n/** The user's selection */\nexport type Selection = {\n    /** The type of selection */\n    type: SelectionType.None;\n} | {\n    /** The type of selection */\n    type: SelectionType.Group;\n    /** The current selected group */\n    group: number;\n} | {\n    /** The type of selection */\n    type: SelectionType.Card;\n    /** The current selected group */\n    group: number;\n    /** The current selected card */\n    card: number;\n};\n\n/** The global state of the application */\nexport class GlobalState {\n    /** The current selection */\n    @observable @persist(\"object\")\n    private _selection: Selection = { type: SelectionType.None };\n    /** The groups of cards */\n    @observable @persist(\"list\", CardGroup)\n    private readonly _groups: CardGroup[] = [];\n\n    /** The current selection */\n    public get selection(): Selection {\n        return this._selection;\n    }\n\n    /** Select a group and or a card */\n    @action\n    public select(group?: number, card?: number) {\n        if (group === undefined) {\n            this._selection = { type: SelectionType.None };\n        } else if (card === undefined) {\n            this._selection = {\n                group,\n                type: SelectionType.Group\n            };\n        } else {\n            this._selection = {\n                card,\n                group,\n                type: SelectionType.Card\n            };\n        }\n    }\n\n    /** Add a group */\n    @action\n    public addGroup(group: CardGroup) {\n        return this._groups.push(group) - 1;\n    }\n\n    /** Remove a group */\n    @action\n    public removeGroup(group: number) {\n        return this._groups.splice(group, 1)[0];\n    }\n\n    /** Get a group */\n    public get groups() {\n        return this._groups;\n    }\n\n    /** Get a group */\n    public get groupsData(): ICardGroupData[] {\n        return this._groups.map(x => x.data);\n    }\n\n    /** Move a group */\n    @action\n    public moveGroup(oldpos: number, newpos: number) {\n        const [group] = this._groups.splice(oldpos, 1);\n        this._groups.splice(newpos, 0, group);\n    }\n}\n\n/** The global state context */\nexport const GlobalStateContext = createContext(new GlobalState());","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { action, observable } from \"mobx\";\nimport { persist } from \"mobx-persist\";\nimport ICard from \"./card\";\n\n/** The persistant data of a card group */\nexport interface ICardGroupData {\n    /** The name of the group */\n    readonly name: string;\n    /** The defaults for the cards */\n    readonly defaults: ICard;\n    /** The child cards of the group */\n    readonly cards: ICard[];\n}\n\n/** A group of cards */\nexport default class CardGroup {\n    /** The name of the group */\n    @observable @persist\n    public name: string;\n    /** The defaults for the cards */\n    @observable @persist(\"object\")\n    public defaults: ICard;\n    /** The child cards of the group */\n    @observable @persist(\"list\")\n    private readonly _cards: ICard[];\n\n    constructor(name = \"\", defaults: ICard = {}, cards: ICard[] = []) {\n        this.name = name;\n        this._cards = cards;\n        this.defaults = defaults;\n    }\n\n    /** Create a card group from a data object */\n    public static fromData(data: ICardGroupData) {\n        return new CardGroup(data.name, data.defaults, data.cards);\n    }\n\n    /** Method to get the jsonifyable data for the group */\n    public get data(): ICardGroupData {\n        return {\n            cards: this._cards,\n            defaults: this.defaults,\n            name: this.name\n        };\n    }\n\n    /** Add a card to the group */\n    @action\n    public addCard(card: ICard = {}) {\n        if (card.name === undefined) {\n            card.name = \"Unnamed\";\n        }\n\n        return this._cards.push(card) - 1;\n    }\n\n    /** Move a cards position */\n    @action\n    public moveCard(oldpos: number, newpos: number): this {\n        const [card] = this._cards.splice(oldpos, 1);\n        this._cards.splice(newpos, 0, card);\n\n        return this;\n    }\n\n    /** Get the cards stored in the group */\n    public get cards(): ICard[] {\n        return this._cards.map(card => ({ ...this.defaults, ...card }));\n    }\n\n    /** Get the cards stored in the group without their defaults applied */\n    public get rawCards(): ICard[] {\n        return this._cards;\n    }\n\n    /** Remove a card from the group */\n    @action\n    public removeCard(i: number): ICard {\n        return this._cards.splice(i, 1)[0];\n    }\n\n    /** Change the value of a card in the group */\n    @action\n    public editCard<K extends keyof ICard>(card: number, key: K, value: ICard[K]) {\n        this._cards[card] = Object.entries({ ...this._cards[card], [key]: value })\n            // Remove undefined props\n            .filter(([, v]) => v !== undefined)\n            .reduce<ICard>((pre, [k, v]) => ({ ...pre, [k]: v }), {});\n    }\n\n    /** Change the value of the groups defaults */\n    @action\n    public editDefaults<K extends keyof ICard>(key: K, value: ICard[K]) {\n        this.defaults = Object.entries({ ...this.defaults, [key]: value })\n            // Remove undefined props\n            .filter(([, v]) => v !== undefined)\n            .reduce<ICard>((pre, [k, v]) => ({ ...pre, [k]: v }), {});\n    }\n\n    /** Change the value of the groups defaults */\n    @action\n    public editName(name: string) {\n        this.name = name;\n    }\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\n/** Add a suffix to a number */\nexport function ordinalSuffixOf(i: number) {\n    const j = i % 10;\n    const k = i % 100;\n    if (j === 1 && k !== 11) {\n        return `${i}st`;\n    }\n    if (j === 2 && k !== 12) {\n        return `${i}nd`;\n    }\n    if (j === 3 && k !== 13) {\n        return `${i}rd`;\n    } else {\n        return `${i}th`;\n    }\n}\n\n/** Replace `- ` and `* ` with a bullet */\nexport function bulletLists(text: string): string {\n    return text.replace(/^(\\*|-)(?= )/img, \"\\u2022\");\n}\n\n/** Hash a string */\nexport function hashCode(s: string) {\n    let hash = 0;\n    let chr;\n    for (let i = 0; i < s.length; i++) {\n        chr = s.charCodeAt(i);\n        hash = ((hash << 5) - hash) + chr; // tslint:disable-line no-bitwise\n        hash |= 0; // tslint:disable-line no-bitwise // Convert to 32bit integer\n    }\n\n    return hash;\n}\n","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\n/** Helper function to achieve word wrapping */\nexport function wordWrapSVG(text: string, width: number, outputElement: SVGTextElement) {\n    return text.replace(\"\\r\", \"\").split(\"\\n\").map((x, i) => wordWrapOneLineSVG(x, width, outputElement, i !== 0)).reduce((a, b) => a + b);\n}\n\n/** Helper Function to wrap one continous line of text in an svg */\nfunction wordWrapOneLineSVG(text: string, width: number, outputElement: SVGTextElement, initialOffset = false) {\n    const words = text.split(\" \");\n    let elems = 0;\n\n    let tspanElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");   // Create first tspan element\n    let textNode = document.createTextNode(words[0]);           // Create text in tspan element\n\n    if (initialOffset) {\n        tspanElement.setAttribute(\"x\", outputElement.x.baseVal[0].valueAsString);\n        tspanElement.setAttribute(\"dy\", outputElement.attributes.getNamedItem(\"font-size\")?.value ?? \"\");\n\n        elems++;\n    }\n\n    tspanElement.appendChild(textNode);                     // Add tspan element to DOM\n    outputElement.appendChild(tspanElement);                        // Add text to tspan element\n\n    if (!words.some(x => x.length > 0)) {\n        tspanElement.textContent = \"\\x20\";\n\n        return parseFloat(outputElement.attributes.getNamedItem(\"font-size\")?.value ?? \"0\");\n    }\n\n    for (let i = 1; i < words.length; i++) {\n        if (tspanElement.firstChild === null || tspanElement.firstChild.textContent === null) {\n            console.error(\"TSPAN element has no first child\", tspanElement);\n\n            return elems * parseFloat(outputElement.attributes.getNamedItem(\"font-size\")?.value ?? \"0\");\n        }\n\n        const len = tspanElement.firstChild?.textContent?.length;             // Find number of letters in string\n        tspanElement.firstChild.textContent += ` ${words[i]}`;            // Add next word\n\n        if (tspanElement.getComputedTextLength() > width) {\n            tspanElement.firstChild.textContent = tspanElement.firstChild.textContent.slice(0, len);    // Remove added word\n\n            tspanElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");       // Create new tspan element\n            tspanElement.setAttribute(\"x\", outputElement.x.baseVal[0].valueAsString);\n            tspanElement.setAttribute(\"dy\", outputElement.attributes.getNamedItem(\"font-size\")?.value ?? \"\");\n            textNode = document.createTextNode(words[i]);\n\n            tspanElement.appendChild(textNode);\n            outputElement.appendChild(tspanElement);\n\n            elems++;\n        }\n    }\n\n    return elems * parseFloat(outputElement.attributes.getNamedItem(\"font-size\")?.value ?? \"0\");\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { useObserver } from \"mobx-react-lite\";\nimport React, { createRef, useContext, useEffect, useMemo } from \"react\";\nimport { GlobalStateContext, SelectionType } from \"../state\";\nimport { bulletLists, hashCode, ordinalSuffixOf } from \"../util/string\";\nimport { wordWrapSVG } from \"../util/wordWrap\";\n\n/** The front face of the card */\nexport function CardFront() {\n    const state = useContext(GlobalStateContext);\n\n    // Refs to wrappable words\n    const physComponentsRef = createRef<SVGTextElement>();\n    const physComponentsBakgroundRef = createRef<SVGRectElement>();\n    const descriptionRef = createRef<SVGTextElement>();\n    const extDescriptionRef = createRef<SVGTextElement>();\n    const extDescriptionTitleRef = createRef<SVGGElement>();\n\n    // Card selection\n    const card = useObserver(() => state.selection.type === SelectionType.Card ? state.groups[state.selection.group].cards[state.selection.card] : state.selection.type === SelectionType.Group ? state.groups[state.selection.group].defaults : {});\n\n    // Apply word wrapping to textx\n    useEffect(() => {\n        // Collecctive hight of blocks\n        let currHeight = 0;\n\n        // Aliases for refs\n        const physComp = physComponentsRef.current;\n        const physCompBkg = physComponentsBakgroundRef.current;\n        const desc = descriptionRef.current;\n        const extDesc = extDescriptionRef.current;\n        const extDescTitle = extDescriptionTitleRef.current;\n\n        if (physCompBkg !== null) {\n            if (card.physicalComponents !== undefined && physComp !== null) {\n                const height = wordWrapSVG(bulletLists(card.physicalComponents), 44, physComp);\n\n                physCompBkg.setAttribute(\"height\", (height + 4).toString());\n                physCompBkg.removeAttribute(\"display\");\n\n                currHeight += height + 3.5;\n            } else {\n                physCompBkg.setAttribute(\"display\", \"none\");\n            }\n        }\n\n        if (card.description !== undefined && desc !== null) {\n            desc.setAttribute(\"dy\", currHeight.toString());\n            const height = wordWrapSVG(bulletLists(card.description), 44, desc);\n\n            currHeight += height;\n        }\n\n        if (extDescTitle !== null) {\n            if (card.extDescription !== undefined && extDesc !== null) {\n                const height = wordWrapSVG(bulletLists(card.extDescription), 44, extDesc);\n                extDesc.setAttribute(\"y\", (65 - height).toString());\n                extDescTitle.setAttribute(\"transform\", `translate(0, ${(62 - height)})`);\n                extDescTitle.removeAttribute(\"display\");\n            } else {\n                extDescTitle.setAttribute(\"display\", \"none\");\n            }\n        }\n\n        return () => {\n            if (physComp !== null) {\n                physComp.innerHTML = \"\";\n            }\n            if (desc !== null) {\n                desc.innerHTML = \"\";\n            }\n            if (extDesc !== null) {\n                extDesc.innerHTML = \"\";\n            }\n        };\n    }, [\n        card,\n        descriptionRef,\n        extDescriptionRef,\n        extDescriptionTitleRef,\n        physComponentsBakgroundRef,\n        physComponentsRef\n    ]);\n\n    return useObserver(() => {\n        const durationConc = card.duration !== undefined && card.duration.toLowerCase().match(/^concentration(,)? /) !== null;\n        const duration = durationConc ? card.duration?.replace(/^concentration(,)? /i, \"\") : card.duration;\n        const durationCap = `${duration?.charAt(0).toUpperCase() ?? \"\"}${duration?.slice(1) ?? \"\"}`;\n\n        const cardlevel = parseInt(card.level !== undefined ? card.level : \"0\", 10);\n        const cardType = !isNaN(cardlevel) ? cardlevel === 0 ? `${card.type} cantrip` : `${ordinalSuffixOf(cardlevel)} level ${card.type}` : undefined;\n\n        const color = card.color ?? \"#000000\";\n\n        return (\n            <svg className=\"frontview view\" width=\"50\" height=\"70\" viewBox=\"0 0 50 70\" fontFamily=\"Modesto\">\n                {/* Frame */}\n                <rect width=\"50\" height=\"70\" fill={color} />\n                {/* Background */}\n                <rect width=\"46\" height=\"64\" x=\"2\" y=\"2\" rx=\"2\" ry=\"2\" fill=\"white\" />\n\n                {/* Sections */}\n                <line x1=\"0\" y1=\"9\" x2=\"50\" y2=\"9\" stroke={color} strokeWidth=\".3\" />\n                <line x1=\"0\" y1=\"16\" x2=\"50\" y2=\"16\" stroke={color} strokeWidth=\".3\" />\n                <line x1=\"0\" y1=\"23\" x2=\"50\" y2=\"23\" stroke={color} strokeWidth=\".3\" />\n                <line x1=\"25\" y1=\"9\" x2=\"25\" y2=\"23\" stroke={color} strokeWidth=\".3\" />\n\n                {/* Title */}\n                <text fontFamily=\"ModestoW01-Expd\" textAnchor=\"middle\" fontSize=\"4\" x=\"25\" y=\"6.75\">{card.name}</text>\n\n                {/* Casting Time */}\n                <text fontFamily=\"ModestoW01-Expd\" fontSize=\"2\" fill={color} x=\"13.5\" y=\"12\" textAnchor=\"middle\">CASTING TIME</text>\n                <text fontSize=\"2\" x=\"13.5\" y=\"14.6\" textAnchor=\"middle\">{card.castingTime}</text>\n\n                {/* Range */}\n                <text fontFamily=\"ModestoW01-Expd\" fontSize=\"2\" fill={color} x=\"36.5\" y=\"12\" textAnchor=\"middle\">RANGE</text>\n                <text fontSize=\"2\" x=\"36.5\" y=\"14.6\" textAnchor=\"middle\">{card.range}</text>\n\n                {/* Components */}\n                <text fontFamily=\"ModestoW01-Expd\" fontSize=\"2\" fill={color} x=\"13.5\" y=\"19\" textAnchor=\"middle\">COMPONENTS</text>\n                <text fontSize=\"2\" x=\"13.5\" y=\"21.6\" textAnchor=\"middle\">{card.components}</text>\n\n                {/* Duration */}\n                <text fontFamily=\"ModestoW01-Expd\" fontSize=\"2\" fill={color} x=\"36.5\" y=\"19\" textAnchor=\"middle\">DURATION</text>\n                <text fontSize=\"2\" x=\"36.5\" y=\"21.6\" textAnchor=\"middle\">{durationCap}</text>\n                {/* Duration Concentration */}\n                <g display={durationConc ? undefined : \"none\"}>\n                    <polygon points=\"46,17 44,19.5 46,22 48,19.5 46,17\" fill={color} />\n                    <text fontFamily=\"ModestoW01-Expd\" fontSize=\"2\" x=\"46\" y=\"19.5\" dominantBaseline=\"middle\" textAnchor=\"middle\" fill=\"#ffffff\">C</text>\n                </g>\n\n                {/* Physical Components */}\n                <rect width=\"50\" height=\"3.5\" y=\"23\" fill={color} ref={physComponentsBakgroundRef} />\n                <text fontSize=\"2\" x=\"3\" y=\"25.6\" ref={physComponentsRef} fill=\"#ffffff\" />\n                {/* Description */}\n                <text fontSize=\"2\" x=\"3\" y=\"25.5\" ref={descriptionRef} />\n                {/* Extended Description */}\n                <g ref={extDescriptionTitleRef}>\n                    <rect width=\"50\" height=\"3.5\" y=\"-3\" fill={color} />\n                    <text fontWeight=\"bold\" letterSpacing=\".1\" y=\"-.4\" fontSize=\"2\" x=\"25\" textAnchor=\"middle\" fill=\"#ffffff\">At Higher Levels</text>\n                </g>\n                <text fontSize=\"2\" x=\"3\" ref={extDescriptionRef} />\n\n                {/* Card class */}\n                <text fontFamily=\"ModestoW01-Expd\" fontSize=\"2\" fill=\"white\" x=\"2.5\" y=\"68.5\">{card.clazz}</text>\n                {/* Card type */}\n                <text fontSize=\"2\" fill=\"white\" x=\"48\" y=\"68.5\" textAnchor=\"end\">{cardType}</text>\n            </svg>\n        );\n    });\n}\n\n/** The more dynamic part of the card back */\nfunction CardBackDyn() {\n    const state = useContext(GlobalStateContext);\n\n    const card = useObserver(() => state.selection.type === SelectionType.Card ? state.groups[state.selection.group].cards[state.selection.card] : state.selection.type === SelectionType.Group ? state.groups[state.selection.group].defaults : {});\n    const hash = useMemo(() => hashCode(card.image ?? \"\"), [card.image]);\n\n    return useObserver(() => {\n        const color = card.color ?? \"#000000\";\n\n        return (\n            <>\n                {/* Frame */}\n                <rect width=\"50\" height=\"70\" fill={color} />\n\n                {/* Background */}\n                <rect width=\"46\" height=\"66\" x=\"2\" y=\"2\" rx=\"2\" ry=\"2\" fill=\"white\" />\n\n                {/* Rounded line */}\n                <rect width=\"40\" height=\"60\" x=\"5\" y=\"5\" rx=\"2\" ry=\"2\" stroke={color} strokeWidth=\"0.5\" fill=\"transparent\" />\n\n                {/* Rhombus */}\n                <polyline points=\"5.25,35 25,5.25 45,34.75 25,64.75 5.25,35\" fill=\"transparent\" stroke={color} strokeWidth=\".5\" />\n\n                {/* Card level top right */}\n                <text fontSize=\"10\" fontWeight=\"bold\" fill={color} x=\"38\" y=\"15\" textAnchor=\"middle\">{card.level}</text>\n                {/* Card level bottom left */}\n                <text fontSize=\"10\" fontWeight=\"bold\" fill={color} x=\"12\" y=\"62\" textAnchor=\"middle\">{card.level}</text>\n\n                {/* Card image */}\n                <use href={`#${hash}`} />\n            </>\n        );\n    });\n}\n\n/** The back face of the card */\nexport function CardBack() {\n    const state = useContext(GlobalStateContext);\n\n    return useObserver(() => {\n        const outImages: { [x: string]: string | undefined } = {};\n\n        for (const g of state.groups) {\n            for (const c of g.cards) {\n                if (c.image !== undefined) {\n                    const hashed = hashCode(c.image);\n                    if (outImages[hashed] === undefined) {\n                        outImages[hashed] = c.image;\n                    }\n                }\n            }\n        }\n\n        return (\n            <svg className=\"backview view\" width=\"50\" height=\"70\" viewBox=\"0 0 50 70\" fontFamily=\"Modesto\">\n                {/* Cache images on screen for faster switch */}\n                <defs>\n                    {Object.entries(outImages).map(([h, image]) => <image key={h} id={h} href={image} width=\"25\" height=\"25\" x=\"12.5\" y=\"22.5\" />)}\n                </defs>\n\n                <CardBackDyn />\n            </svg>\n        );\n    });\n}\n","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport ICard from \"../card/card\";\nimport CardGroup, { ICardGroupData } from \"../card/cardGroup\";\nimport { GlobalState, SelectionType } from \"../state\";\n\n/** Helper to create a file reader that is async and reads text */\nexport async function textFileReaderAsync(file: Blob) {\n    return new Promise<string>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsText(file);\n        reader.onload = (_) => {\n            if (reader.result !== null) {\n                resolve(reader.result.toString());\n            } else {\n                reject(new Error(\"No result\"));\n            }\n        };\n        reader.onerror = reject;\n    });\n}\n\n/** Helper that can create a file reaer that is async and reads data */\nexport async function dataFileReaderAsync(file: Blob) {\n    return new Promise<string>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = (_) => {\n            if (reader.result !== null) {\n                resolve(reader.result.toString());\n            } else {\n                reject(new Error(\"No result\"));\n            }\n        };\n        reader.onerror = reject;\n    });\n}\n\n/** The structure for a downloaded file */\nexport type DownloadFile = {\n    /** The type of selection */\n    type: SelectionType.None;\n    /** All groups */\n    data: ICardGroupData[];\n} | {\n    /** The type of selection */\n    type: SelectionType.Group;\n    /** The group */\n    data: ICardGroupData;\n} | {\n    /** The type of selection */\n    type: SelectionType.Card;\n    /** The card */\n    data: ICard;\n};\n\n/** Helper to download a file */\nexport function download(file: DownloadFile, filename: string) {\n    const link = document.createElement(\"a\");\n    const url = URL.createObjectURL(new Blob([JSON.stringify(file)], { type: \"application/json\" }));\n\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n\n    setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n    }, 0);\n}\n\n/** Helper to laod a file */\nexport function load(file: DownloadFile, state: GlobalState) {\n    if (file.type === SelectionType.None) {\n        for (const group of file.data) {\n            state.addGroup(CardGroup.fromData(group));\n        }\n    } else if (file.type === SelectionType.Group) {\n        const id = state.addGroup(CardGroup.fromData(file.data));\n        state.select(id);\n    } else {\n        if (state.selection.type === SelectionType.Card || state.selection.type === SelectionType.Group) {\n            const id = state.groups[state.selection.group].addCard(file.data);\n            state.select(id);\n        } else {\n            alert(\"Attempted to add a card when no group is selected\");\n        }\n    }\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport React, { createRef, memo, useCallback, useEffect } from \"react\";\n\n/** A text area that resizes when it overflows */\nconst AutoResizeTextArea = memo((props: React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>) => {\n    const ref = createRef<HTMLTextAreaElement>();\n\n    const resize = useCallback(() => {\n        if (ref.current === null) {\n            return;\n        }\n\n        ref.current.style.height = \"1px\";\n        ref.current.style.height = `${ref.current.scrollHeight}px`;\n    }, [ref]);\n\n    useEffect(() => {\n        resize();\n    }, [resize, props.value]);\n\n    return <textarea {...props} ref={ref} onKeyUp={resize} />;\n});\n\nexport default AutoResizeTextArea;","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { useObserver } from \"mobx-react-lite\";\nimport React, { createRef, useContext } from \"react\";\nimport ICard from \"../card/card\";\nimport { GlobalStateContext, SelectionType } from \"../state\";\nimport { dataFileReaderAsync } from \"../util/file\";\nimport AutoResizeTextArea from \"./AutoResizeTextArea\";\nimport \"./Editor.scss\";\n\n/** The editor component */\nexport default function Editor() {\n    const state = useContext(GlobalStateContext);\n\n    // TODO: For saving\n    // const handleKeyDown = (event: KeyboardEvent<HTMLDivElement>) => {\n    //     const charCode = String.fromCharCode(event.which).toLowerCase();\n    //     if ((event.ctrlKey || event.metaKey) && charCode === \"s\") {\n    //         event.preventDefault();\n    //     }\n    // };\n\n    return useObserver(() => {\n        if (state.selection.type !== SelectionType.None) {\n            return <CardSettings />;\n        } else {\n            return <div className=\"empty\">You have nothing selected</div>;\n        }\n    });\n}\n\n/** The group settings part */\nfunction GroupSettings() {\n    const state = useContext(GlobalStateContext);\n\n    return useObserver(() => {\n        if (state.selection.type !== SelectionType.Group) {\n            return null;\n        }\n\n        const id = state.selection.group;\n\n        const update = (event: React.FormEvent<HTMLInputElement>) => {\n            state.groups[id].editName(event.currentTarget.value);\n        };\n\n        return (\n            <div className=\"groupsettings\">\n                <div className=\"title\">Group settings</div>\n                <label>\n                    Name:\n                <input type=\"text\" value={state.groups[state.selection.group].name ?? \"\"} onChange={update} />\n                </label>\n            </div>\n        );\n    });\n}\n\n/** The CardSettings section */\nfunction CardSettings() {\n    const state = useContext(GlobalStateContext);\n    const imageRef = createRef<HTMLInputElement>();\n\n    return useObserver(() => {\n        const cardSettings = state.selection.type === SelectionType.Card ? state.groups[state.selection.group].rawCards[state.selection.card] : state.selection.type === SelectionType.Group ? state.groups[state.selection.group].defaults : {};\n        const placeholders = state.selection.type === SelectionType.Card ? state.groups[state.selection.group].defaults : undefined;\n\n        /** Update the internal cache values of a text value */\n        const cardValueUpdater = (name: keyof ICard) => {\n            return (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n                event.persist();\n\n                if (state.selection.type === SelectionType.Card) {\n                    state.groups[state.selection.group].editCard(state.selection.card, name, event.currentTarget.value === \"\" ? undefined : event.currentTarget.value);\n                } else if (state.selection.type === SelectionType.Group) {\n                    state.groups[state.selection.group].editDefaults(name, event.currentTarget.value === \"\" ? undefined : event.currentTarget.value);\n                }\n            };\n        };\n\n        const clearColor = () => {\n            if (state.selection.type === SelectionType.Card) {\n                state.groups[state.selection.group].editCard(state.selection.card, \"color\", undefined);\n            } else if (state.selection.type === SelectionType.Group) {\n                state.groups[state.selection.group].editDefaults(\"color\", undefined);\n            }\n        };\n\n        const fileInput = async (event: React.FormEvent<HTMLInputElement>) => {\n            event.persist();\n\n            if (state.selection.type === SelectionType.Card) {\n                if (imageRef.current !== null) {\n                    let image: string | undefined;\n\n                    if (imageRef.current.files !== null) {\n                        image = await dataFileReaderAsync(imageRef.current.files[0]);\n                    }\n\n                    state.groups[state.selection.group].editCard(state.selection.card, \"image\", image);\n                }\n            } else if (state.selection.type === SelectionType.Group) {\n                if (imageRef.current !== null) {\n                    let image: string | undefined;\n\n                    if (imageRef.current.files !== null) {\n                        image = await dataFileReaderAsync(imageRef.current.files[0]);\n                    }\n\n                    state.groups[state.selection.group].editDefaults(\"image\", image);\n                }\n            }\n        };\n\n        return (\n            <div className=\"editor\">\n                <div className=\"values\">\n                    <GroupSettings />\n                    <div className=\"title\">Card Settings</div>\n                    <label>\n                        Name:\n                        <input type=\"text\" value={cardSettings.name ?? \"\"} onChange={cardValueUpdater(\"name\")} placeholder={placeholders?.name} />\n                    </label>\n                    <label>\n                        Casting Time:\n                        <input type=\"text\" value={cardSettings.castingTime ?? \"\"} onChange={cardValueUpdater(\"castingTime\")} placeholder={placeholders?.castingTime} />\n                    </label>\n                    <label>\n                        Range:\n                        <input type=\"text\" value={cardSettings.range ?? \"\"} onChange={cardValueUpdater(\"range\")} placeholder={placeholders?.range} />\n                    </label>\n                    <label>\n                        Components:\n                        <input type=\"text\" value={cardSettings.components ?? \"\"} onChange={cardValueUpdater(\"components\")} placeholder={placeholders?.components ?? \"\"} />\n                    </label>\n                    <label>\n                        Duration:\n                        <input type=\"text\" value={cardSettings.duration ?? \"\"} onChange={cardValueUpdater(\"duration\")} placeholder={placeholders?.duration} />\n                    </label>\n                    <label>\n                        Physical Components:\n                        <AutoResizeTextArea value={cardSettings.physicalComponents ?? \"\"} onChange={cardValueUpdater(\"physicalComponents\")} placeholder={placeholders?.physicalComponents} />\n                    </label>\n                    <label>\n                        Description:\n                        <AutoResizeTextArea value={cardSettings.description ?? \"\"} onChange={cardValueUpdater(\"description\")} placeholder={placeholders?.description} />\n                    </label>\n                    <label>\n                        Extended Description:\n                        <AutoResizeTextArea value={cardSettings.extDescription ?? \"\"} onChange={cardValueUpdater(\"extDescription\")} placeholder={placeholders?.extDescription} />\n                    </label>\n                    <label>\n                        Class:\n                        <input type=\"text\" value={cardSettings.clazz ?? \"\"} onChange={cardValueUpdater(\"clazz\")} placeholder={placeholders?.clazz} />\n                    </label>\n                    <label>\n                        Type:\n                        <input type=\"text\" value={cardSettings.type ?? \"\"} onChange={cardValueUpdater(\"type\")} placeholder={placeholders?.type} />\n                    </label>\n                    <label>\n                        Level:\n                        <input type=\"number\" min={0} max={99} value={cardSettings.level ?? \"\"} onChange={cardValueUpdater(\"level\")} placeholder={placeholders?.level === undefined ? undefined : placeholders?.level?.toString()} />\n                    </label>\n                    <label>\n                        Color:\n                        <input type=\"color\" value={cardSettings.color ?? \"\"} onChange={cardValueUpdater(\"color\")} placeholder={placeholders?.color} />\n                        <button onClick={clearColor}>Clear Color</button>\n                    </label>\n                    <label>\n                        Image:\n                        <img src={cardSettings.image} alt=\"Card Back\" />\n                        <input type=\"file\" accept=\"image/*\" onChange={fileInput} ref={imageRef} />\n                    </label>\n\n                    {/* TODO:? <button className={`save ${this.state.saved ? \"saved\" : \"unsaved\"}`} onClick={this.saveClick}>Save</button> */}\n                </div>\n            </div>\n        );\n    });\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { toJS } from \"mobx\";\nimport { useObserver } from \"mobx-react-lite\";\nimport React, { MouseEvent, PropsWithChildren, useContext } from \"react\";\nimport { contextMenu, Item, Menu, Separator } from \"react-contexify\";\nimport CardGroup from \"../card/cardGroup\";\nimport { GlobalStateContext, Selection, SelectionType } from \"../state\";\nimport { download } from \"../util/file\";\nimport { IItemArgs, ItemHandler } from \"./Explorer\";\n\n/** Props to the better menu provider component */\ninterface IBMPProps {\n    /** The id of the context menu */\n    id: string;\n    /** The selection that the menu should act upon */\n    selection: Selection;\n}\n\n/** A better menu provider */\nexport function BetterMenuProvider({ id, children, selection }: PropsWithChildren<IBMPProps>) {\n    const rightClick = (event: MouseEvent) => {\n        event.preventDefault();\n        event.stopPropagation();\n        event.persist();\n\n        contextMenu.hideAll();\n        setTimeout(() => contextMenu.show({\n            event,\n            id,\n            props: selection\n        }), 1);\n    };\n\n    const leftClick = (_: MouseEvent) => {\n        contextMenu.hideAll();\n    };\n\n    return (\n        <div onContextMenu={rightClick} onClick={leftClick}>\n            {children}\n        </div>\n    );\n}\n\n/** Props for the Explorer context menus */\ninterface IECMProps {\n    /** State changer for delete selection */\n    setDeleteSelection(val: Selection): void;\n}\n\n/** The context menus for the explorer */\nexport function ExplorerContextMenus({ setDeleteSelection }: IECMProps) {\n    const state = useContext(GlobalStateContext);\n\n    return useObserver(() => {\n        const downloadClick = (({ props }: IItemArgs) => {\n            if (props.type === SelectionType.Group) {\n                const group = state.groups[props.group];\n\n                download({ type: SelectionType.Group, data: group.data }, `${group.name}.group.json`);\n            } else if (props.type === SelectionType.Card) {\n                const card = state.groups[props.group].cards[props.card];\n\n                download({ type: SelectionType.Card, data: card }, `${card.name}.card.json`);\n            } else {\n                download({ type: SelectionType.None, data: toJS(state.groupsData) }, `workspace.json`);\n            }\n        }) as unknown as ItemHandler;\n\n        const addClick = (({ props }: IItemArgs) => {\n            if (props.type === SelectionType.Group) {\n                const id = state.groups[props.group].addCard();\n                state.select(props.group, id);\n            } else if (props.type === SelectionType.None) {\n                const id = state.addGroup(new CardGroup(`New Group ${state.groups.length}`));\n                state.select(id);\n            }\n        }) as unknown as ItemHandler;\n\n        const editClick = (({ props }: IItemArgs) => {\n            if (props.type === SelectionType.Group) {\n                state.select(props.group);\n            }\n        }) as unknown as ItemHandler;\n\n        const editDisable = (({ props }: IItemArgs) => {\n            // Disable the edit button if this card is already selected\n            return props.type === SelectionType.Group && state.selection.type === SelectionType.Group && state.selection.group === props.group;\n        }) as unknown as ItemHandler<boolean>;\n\n        const deleteClick = (({ props }: IItemArgs) => setDeleteSelection(props)) as unknown as ItemHandler;\n\n        const duplicateClick = (({ props }: IItemArgs) => {\n            if (props.type === SelectionType.Group) {\n                const id = state.addGroup(state.groups[props.group]);\n\n                state.select(id);\n            } else if (props.type === SelectionType.Card) {\n                const group = state.groups[props.group];\n                const id = group.addCard(group.rawCards[props.card]);\n\n                state.select(props.group, id);\n            }\n        }) as unknown as ItemHandler;\n\n        const upClick = (({ props }: IItemArgs) => {\n            if (props.type === SelectionType.Group) {\n                state.moveGroup(props.group, props.group - 1);\n                state.select(props.group - 1);\n            } else if (props.type === SelectionType.Card) {\n                state.groups[props.group].moveCard(props.card, props.card - 1);\n                state.select(props.group, props.card - 1);\n            }\n        }) as unknown as ItemHandler;\n\n        const downClick = (({ props }: IItemArgs) => {\n            if (props.type === SelectionType.Group) {\n                state.moveGroup(props.group, props.group + 1);\n                state.select(props.group + 1);\n            } else if (props.type === SelectionType.Card) {\n                state.groups[props.group].moveCard(props.card, props.card + 1);\n                state.select(props.group, props.card + 1);\n            }\n        }) as unknown as ItemHandler;\n\n        const upDisable = (({ props }: IItemArgs): boolean => {\n            if (props.type === SelectionType.Group) {\n                return props.group === 0;\n            } else if (props.type === SelectionType.Card) {\n                return props.card === 0;\n            } else {\n                return true;\n            }\n        }) as unknown as ItemHandler<boolean>;\n\n        const downDisable = (({ props }: IItemArgs): boolean => {\n            if (props.type === SelectionType.Group) {\n                return props.group === state.groups.length - 1;\n            } else if (props.type === SelectionType.Card) {\n                return props.card === state.groups[props.group].cards.length - 1;\n            } else {\n                return true;\n            }\n        }) as unknown as ItemHandler<boolean>;\n\n        return (\n            <>\n                <Menu id=\"none-contextmenu\">\n                    <Item onClick={addClick}>Add Group</Item>\n                    <Separator />\n                    <Item onClick={downloadClick}>Download All</Item>\n                    <Item disabled={true}>Render All</Item>\n                    <Item disabled={true}>Print All</Item>\n                </Menu>\n                <Menu id=\"group-contextmenu\">\n                    <Item onClick={editClick} disabled={editDisable}>Edit</Item>\n                    <Item onClick={addClick}>Add Card</Item>\n                    <Item onClick={duplicateClick}>Duplicate</Item>\n                    <Separator />\n                    <Item onClick={upClick} disabled={upDisable}>Move Up</Item>\n                    <Item onClick={downClick} disabled={downDisable}>Move Down</Item>\n                    <Separator />\n                    <Item onClick={downloadClick}>Download Group</Item>\n                    <Item disabled={true}>Render Group</Item>\n                    <Item disabled={true}>Print Group</Item>\n                    <Separator />\n                    <Item className=\"delete\" onClick={deleteClick}>Delete</Item>\n                </Menu>\n                <Menu id=\"card-contextmenu\">\n                    <Item onClick={duplicateClick}>Duplicate</Item>\n                    <Separator />\n                    <Item onClick={upClick} disabled={upDisable}>Move Up</Item>\n                    <Item onClick={downClick} disabled={downDisable}>Move Down</Item>\n                    <Separator />\n                    <Item onClick={downloadClick}>Download Card</Item>\n                    <Item disabled={true}>Render Card</Item>\n                    <Item disabled={true}>Print Card</Item>\n                    <Separator />\n                    <Item className=\"delete\" onClick={deleteClick}>Delete</Item>\n                </Menu>\n            </>\n        );\n    });\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { useObserver } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport ICard from \"../card/card\";\nimport { GlobalStateContext, SelectionType } from \"../state\";\nimport { BetterMenuProvider } from \"./ContextMenu\";\nimport { highlightMatches } from \"./Explorer\";\n\n/** The propt */\ninterface IProps {\n    /** The card id */\n    id: number;\n    /** The group id */\n    groupid: number;\n    /** The search term */\n    search: string;\n}\n\n/** Filter for cards */\nexport function cardFilter(filter: string) {\n    return (card: ICard) => (card.name !== undefined && card.name.toLowerCase().includes(filter.toLowerCase()));\n}\n\n/** A card component in the explortr */\nexport default function CardComponent({ groupid, id, search }: IProps) {\n    const state = useContext(GlobalStateContext);\n\n    const select = () => state.select(groupid, id);\n\n    return useObserver(() => {\n        const card = state.groups[groupid].cards[id];\n\n        // Hide the card if there is a search term AND\n        const hidden = search !== \"\" && (\n            // If the group is not selected AND\n            state.selection.type !== SelectionType.Card\n            || state.selection.card !== id\n            || state.selection.group !== groupid\n            // Or if it is a match\n        ) && cardFilter(search)(card);\n\n        return (\n            <BetterMenuProvider id=\"card-contextmenu\" selection={{ type: SelectionType.Card, card: id, group: groupid }}>\n                <div\n                    className={`card ${state.selection.type === SelectionType.Card && state.selection.card === id && state.selection.group === groupid ? \"selected\" : \"notselected\"}`}\n                    onClick={select}\n                    hidden={hidden}\n                >\n                    {/* Highlight any text in the card that matches the search query */}\n                    {highlightMatches(card.name, search)}\n                </div>\n            </BetterMenuProvider>\n        );\n    });\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { faCaretDown, faCaretRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Observer, useObserver } from \"mobx-react-lite\";\nimport React, { useContext, useState } from \"react\";\nimport { GlobalStateContext, SelectionType } from \"../state\";\nimport CardComponent, { cardFilter } from \"./CardComponent\";\nimport { BetterMenuProvider } from \"./ContextMenu\";\nimport { highlightMatches } from \"./Explorer\";\n\n/** The props */\ninterface IProps {\n    /** The card id */\n    id: number;\n    /** The search term */\n    search: string;\n}\n\n/** A component to show a card group in the side panel */\nexport default function CardGroupComponent({ id, search }: IProps) {\n    const [collapsed, setCollapsed] = useState(false);\n    const state = useContext(GlobalStateContext);\n\n    // Hide the group if there is a search term AND\n    const hidden = useObserver(() => search !== \"\" && (\n        // If there are no cards in the group that match the filter\n        state.groups[id].cards.filter(cardFilter(search)).length === 0\n        // AND the name of the group does not match\n        && !state.groups[id].name.toLowerCase().includes(search.toLowerCase())\n    ));\n\n    const toggleCollapse = () => setCollapsed(!collapsed);\n\n    return useObserver(() => (\n        <BetterMenuProvider id=\"group-contextmenu\" selection={{ type: SelectionType.Group, group: id }}>\n            <div\n                className={`group ${state.selection.type === SelectionType.Group && state.selection.group === id ? \"selected\" : \"notselected\"}`}\n                hidden={hidden}\n            >\n                <div className=\"title\" onClick={toggleCollapse}>\n                    <div className=\"caret\">\n                        <FontAwesomeIcon icon={collapsed ? faCaretRight : faCaretDown} />\n                    </div>\n                    <div className=\"name\">\n                        {/* Highlight any text in the name that matches the search query */}\n                        <Observer>{() => <>{highlightMatches(state.groups[id].name, search)}</>}</Observer>\n                    </div>\n                </div>\n                <div className=\"cards\" hidden={collapsed}>\n                    <Observer>{() => <>{state.groups[id].cards.map((_, j) => <CardComponent key={j} id={j} groupid={id} search={search} />)}</>}</Observer>\n                </div>\n            </div>\n        </BetterMenuProvider>\n    ));\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Observer } from \"mobx-react-lite\";\nimport React, { ChangeEvent, DragEvent, UIEvent, useContext, useState } from \"react\";\nimport { MenuItemEventHandler, TriggerEvent } from \"react-contexify/lib/types\";\nimport CardGroup from \"../card/cardGroup\";\nimport { GlobalStateContext, Selection, SelectionType } from \"../state\";\nimport { DownloadFile, load, textFileReaderAsync } from \"../util/file\";\nimport CardGroupComponent from \"./CardGroupComponent\";\nimport { BetterMenuProvider } from \"./ContextMenu\";\nimport \"./Explorer.scss\";\n\n/** Highlight the matches to the match string */\nexport function highlightMatches(text?: string, match?: string) {\n    // Only spend time spliting if there is a match to look for\n    if (match !== undefined && match !== \"\") {\n        // Split on higlight term and include term into parts, ignore case\n        return text !== undefined && text !== \"\" ?\n            text.split(new RegExp(`(${match.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\")})`, \"gi\"))\n                .map((part, i) => (\n                    // If the part is the same as the search term, give it the class highlight\n                    <span className={part.toLowerCase() === match.toLowerCase() ? \"highlight\" : \"\"} key={i}>\n                        {part}\n                    </span>\n                )) : undefined;\n    } else {\n        return text;\n    }\n}\n\n/** The args passed to a context menu item when it is clicked */\nexport interface IItemArgs {\n    /** The event that triggered the click */\n    event: TriggerEvent;\n    /** The props passed to the item */\n    props: Selection;\n}\n\n/** The handler type that react-contextify needs */\nexport type ItemHandler<T = void> = (info: MenuItemEventHandler) => T;\n\n/** The explorer view */\nexport default function Explorer() {\n    const [search, setSearch] = useState(\"\");\n    const [isDragOver, setDragOver] = useState(false);\n    const [isTop, setTop] = useState(true);\n    const state = useContext(GlobalStateContext);\n\n    /** Listen for scroll */\n    const onScroll = (event: UIEvent<HTMLDivElement>) => {\n        if (isTop !== (event.currentTarget.scrollTop === 0)) {\n            setTop(event.currentTarget.scrollTop === 0);\n        }\n    };\n\n    const onDragEnter = () => setDragOver(true);\n    const onDragExit = () => setDragOver(false);\n    const onDragOver = (event: DragEvent<HTMLDivElement>) => {\n        event.preventDefault();\n    };\n\n    const onDrop = async (event: DragEvent<HTMLDivElement>) => {\n        event.preventDefault();\n        event.persist();\n\n        setDragOver(false);\n\n        for (let i = 0; i < event.dataTransfer.items.length; i++) {\n            const file = event.dataTransfer.files[i];\n\n            if (file.type === \"application/json\" || file.name.endsWith(\".json\")) {\n                const contents = await textFileReaderAsync(file);\n\n                load(JSON.parse(contents) as DownloadFile, state);\n            } else {\n                console.error(`Format \"${file.type}\" unrecognised`);\n            }\n        }\n\n        event.dataTransfer.items.clear();\n    };\n\n    const clearSearch = () => setSearch(\"\");\n    const updateSearch = (e: ChangeEvent<HTMLInputElement>) => setSearch(e.target.value);\n\n    const addGroup = () => {\n        const idx = state.addGroup(new CardGroup(`New Group ${state.groups.length}`));\n        state.select(idx);\n    };\n\n    return (\n        <div className=\"explorer\">\n            {/* Search results */}\n            <BetterMenuProvider id=\"none-contextmenu\" selection={{ type: SelectionType.None }}>\n                <div className={`children ${isDragOver ? \"dragover\" : \"nodragover\"}`} onScroll={onScroll} onDrop={onDrop} onDragEnter={onDragEnter} onDragExit={onDragExit} onDragOver={onDragOver}>\n                    <Observer>{() => <>{state.groups.map((_, i) => <CardGroupComponent key={i} id={i} search={search} />)}</>}</Observer>\n                </div>\n            </BetterMenuProvider>\n\n            {/* Header */}\n            <div className={`head ${(isTop ? \"top\" : \"scrolled\")}`}>\n                <div className=\"search\">\n                    <input type=\"text\" onChange={updateSearch} className={search !== \"\" ? \"short\" : undefined} value={search} />\n                    <div className=\"x\" style={{ display: search !== \"\" ? undefined : \"none\" }} onClick={clearSearch}><FontAwesomeIcon icon={faTimes} /></div>\n                </div>\n                <div className=\"add\" onClick={addGroup}><FontAwesomeIcon icon={faPlus} /></div>\n            </div>\n        </div>\n    );\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { Observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport ReactModal from \"react-modal\";\nimport { GlobalStateContext, Selection, SelectionType } from \"../state\";\nimport \"./Modal.scss\";\n\n/** The props for the delete modal */\ninterface IDeleteModalProps {\n    /** The selection to delete */\n    deleteSelection: Selection;\n    /** A way to change the selection */\n    setDeleteSelection(selection: Selection): void;\n}\n\n/** The styles for the modal */\nexport const ModalStyles: {\n    /** The content props */\n    content: React.CSSProperties;\n    /** The overlay props */\n    overlay: React.CSSProperties;\n} = {\n    content: {\n        background: \"#1a1a1a\",\n        border: \"solid 1px #666666\",\n        color: \"#b8b8b8\",\n        height: \"150px\",\n        left: \"50%\",\n        maxHeight: \"calc(100% - 40px)\",\n        maxWidth: \"calc(100% - 40px)\",\n        minHeight: \"100px\",\n        minWidth: \"100px\",\n        position: \"absolute\",\n        top: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        width: \"500px\",\n    },\n    overlay: {\n        background: \"#000000AA\"\n    }\n};\n\n/** The delete confirmation modal */\nexport default function DeleteModal({ deleteSelection, setDeleteSelection }: IDeleteModalProps) {\n    const state = useContext(GlobalStateContext);\n\n    const deleteCard = () => {\n        if (deleteSelection.type === SelectionType.Group) {\n            state.select();\n            state.removeGroup(deleteSelection.group);\n        } else if (deleteSelection.type === SelectionType.Card) {\n            state.select(deleteSelection.group);\n            state.groups[deleteSelection.group].removeCard(deleteSelection.card);\n        } else {\n            console.warn(\"Attempted to delete card when no card selected for deletion\");\n        }\n\n        setDeleteSelection({ type: SelectionType.None });\n    };\n    const closeDeleteModal = () => setDeleteSelection({ type: SelectionType.None });\n\n    const confirmationMessage = () => {\n        if (deleteSelection.type === SelectionType.Group) {\n            const group = state.groups[deleteSelection.group];\n\n            return <span className=\"info\">Are you sure you want to delete the group <span className=\"name\">{group.name}</span> and all of its cards</span>;\n        } else if (deleteSelection.type === SelectionType.Card) {\n            const card = state.groups[deleteSelection.group].cards[deleteSelection.card];\n\n            return <span className=\"info\">Are you sure you want to delete the card <span className=\"name\">{card.name}</span></span>;\n        } else {\n            return <div className=\"error\">You have reached an invalid state, please press cancel</div>;\n        }\n    };\n\n    return (\n        <ReactModal isOpen={deleteSelection.type !== SelectionType.None} style={ModalStyles}>\n            <div className=\"modal\">\n                <div className=\"dialog\">\n                    <Observer>{confirmationMessage}</Observer>\n                </div>\n                <div className=\"warn\">\n                    This action is <span className=\"irreversible\">irreversible</span>\n                </div>\n                <div className=\"buttons\">\n                    <button onClick={closeDeleteModal}>Cancel</button>\n                    <button className=\"delete\" onClick={deleteCard}>Delete</button>\n                </div>\n            </div>\n        </ReactModal>\n    );\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\n/** Check for localhost uri */\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    ) !== null\n);\n\n/** Method to register the service worker */\nexport default function register(setUpdateAvaliable: (is: boolean) => void) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.toString()\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, setUpdateAvaliable);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n                    );\n                }).catch(e => console.error(e));\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl, setUpdateAvaliable);\n            }\n        });\n    }\n}\n\n/** Method to register a valid service worker */\nfunction registerValidSW(swUrl: string, setUpdateAvaliable: (is: boolean) => void) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker !== null) {\n                    installingWorker.onstatechange = () => {\n                        if (installingWorker.state === \"installed\") {\n                            if (navigator.serviceWorker.controller !== null) {\n                                // At this point, the old content will have been purged and\n                                // the fresh content will have been added to the cache.\n                                // It's the perfect time to display a 'New content is\n                                // available; please refresh.' message in your web app.\n                                console.log(\"New content is available; please refresh.\");\n                                setUpdateAvaliable(true);\n                            } else {\n                                // At this point, everything has been precached.\n                                // It's the perfect time to display a\n                                // 'Content is cached for offline use.' message.\n                                console.log(\"Content is cached for offline use.\");\n                            }\n                        }\n                    };\n                }\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\n/** A method to make sure that the service worker exists before usig it */\nfunction checkValidServiceWorker(swUrl: string, setUpdateAvaliable: (is: boolean) => void) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1 // tslint:disable-line: no-non-null-assertion\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration =>\n                    registration.unregister()\n                        .then(() => {\n                            window.location.reload();\n                        })\n                ).catch(e => console.error(e));\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, setUpdateAvaliable);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\n/** Method to unregister the service worker */\n// ts-unused-exports:disable-next-line\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration =>\n            registration.unregister()\n        ).catch(e => console.error(e));\n    }\n}\n","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport React from \"react\";\nimport ReactModal from \"react-modal\";\nimport { ModalStyles } from \"./explorer/Modal\";\nimport \"./explorer/Modal.scss\";\n\n/** The props to the update modal */\ninterface IUpdateModalProps {\n    /** The has to act on */\n    show: boolean;\n    /** The action to call when a choice is made */\n    doUpdate(update: boolean): void;\n}\n\n/** The delete confirmation modal */\nexport default function UpdateModal({ doUpdate, show }: IUpdateModalProps) {\n    const callDoUpdate = (update: boolean) => () => doUpdate(update);\n\n    return (\n        <ReactModal isOpen={show} style={ModalStyles}>\n            <div className=\"modal\">\n                <div className=\"dialog\">\n                    There is a new update! You can choose to update now, or ignore the message.\n                </div>\n                <div className=\"buttons\">\n                    <button className=\"good\" onClick={callDoUpdate(true)}>Update</button>\n                    <button onClick={callDoUpdate(false)}>Ignore</button>\n                </div>\n            </div>\n        </ReactModal>\n    );\n}","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\nimport { create } from \"mobx-persist\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport { CardBack, CardFront } from \"./card/RenderedCard\";\nimport \"./ContextMenu.scss\";\nimport Editor from \"./editor/Editor\";\nimport { ExplorerContextMenus } from \"./explorer/ContextMenu\";\nimport Explorer from \"./explorer/Explorer\";\nimport DeleteModal from \"./explorer/Modal\";\nimport register from \"./registerServiceWorker\";\nimport { GlobalStateContext, Selection, SelectionType } from \"./state\";\nimport UpdateModal from \"./UpdateModal\";\n\n/**\n * TODO:\n * - Better layout\n * - svg image\n * - Styled components?\n * - Printing (double sided)\n */\n\n/** The main app component */\nexport default function App() {\n    const state = useContext(GlobalStateContext);\n    const [updateAvaliable, setUpdateAvaliable] = useState(false);\n    const doUpdate = (update: boolean) => {\n        if (update) {\n            console.log(\"%cUser accepting update, reloading\", \"color: goldenrod\");\n            location.reload(); // eslint-disable-line\n        }else {\n            console.log(\"%cUser ignored update\", \"color: goldenrod\");\n        }\n\n        // Hide prompt\n        setUpdateAvaliable(false);\n    };\n\n    useEffect(() => {\n        // Setup Mobx-Persist\n        const hydrate = create({\n            jsonify: true,\n            storage: localStorage\n        });\n\n        hydrate(\"state\", state);\n\n        // Setup service worker\n        register(setUpdateAvaliable);\n\n        // Disable context menu\n        document.oncontextmenu = (e) => {\n            e.preventDefault();\n        };\n        // eslint-disable-next-line\n    }, []);\n\n    const [deleteSelection, setDeleteSelection] = useState<Selection>({ type: SelectionType.None });\n\n    return (\n        <div className=\"app\">\n            <div className=\"workspace\">\n                <Explorer />\n                <ExplorerContextMenus setDeleteSelection={setDeleteSelection} />\n                <DeleteModal setDeleteSelection={setDeleteSelection} deleteSelection={deleteSelection} />\n            </div>\n            <div className=\"settings\">\n                <Editor />\n            </div>\n            <div className=\"renders\">\n                {/* Create the svg with react, not the extra lib */}\n                <CardFront />\n                <CardBack />\n            </div>\n            <UpdateModal doUpdate={doUpdate} show={updateAvaliable} />\n        </div>\n    );\n}\n","/*!\n * Copyright (C) 2018-2020  Zachary Kohnen (DusterTheFirst)\n */\n\n// tslint:disable-next-line: no-import-side-effect\nimport \"mobx-react-lite/batchingForReactDom\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactModal from \"react-modal\";\nimport App from \"./App\";\nimport \"./index.scss\";\n\nReactModal.setAppElement(\"#root\");\n\nReactDOM.render(\n    <App />,\n    document.getElementById(\"root\") as HTMLElement\n);"],"sourceRoot":""}